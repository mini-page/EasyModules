<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Start-ThreadJob</command:name>
      <maml:description>
        <maml:para>Creates background jobs similar to the `Start-Job` cmdlet.</maml:para>
      </maml:description>
      <command:verb>Start</command:verb>
      <command:noun>ThreadJob</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Start-ThreadJob` creates background jobs similar to the `Start-Job` cmdlet. The main difference is that the jobs which are created run in separate threads within the local process. By default, the jobs use the current working directory of the caller that started the job.</maml:para>
      <maml:para>The cmdlet also supports a **ThrottleLimit** parameter to limit the number of jobs running at one time. As more jobs are started, they are queued and wait until the current number of jobs drops below the throttle limit.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Start-ThreadJob</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ArgumentList</maml:name>
          <maml:description>
            <maml:para>Specifies an array of arguments, or parameter values, for the script that is specified by the
**FilePath** or **ScriptBlock** parameters.</maml:para>
            <maml:para>**ArgumentList** must be the last parameter on the command line. All the values that follow the
parameter name are interpreted values in the argument list.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InitializationScript</maml:name>
          <maml:description>
            <maml:para>Specifies commands that run before the job starts. Enclose the commands in braces (`{}`) to create
a script block.</maml:para>
            <maml:para>Use this parameter to prepare the session in which the job runs. For example, you can use it to add
functions and modules to the session.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScriptBlock</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the objects used as input to the script block. It also allows for pipeline input. Use the
`$input` automatic variable in the script block to access the input objects.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies a friendly name for the new job. You can use the name to identify the job to other job
cmdlets, such as the `Stop-Job` cmdlet.</maml:para>
            <maml:para>The default friendly name is "Job#", where "#" is an ordinal number that is incremented for each
job.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>ScriptBlock</maml:name>
          <maml:description>
            <maml:para>Specifies the commands to run in the background job. Enclose the commands in braces (`{}`) to create
a script block. Use the `$input` automatic variable to access the value of the **InputObject**
parameter. This parameter is required.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.ScriptBlock</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StreamingHost</maml:name>
          <maml:description>
            <maml:para>This parameter provides a thread safe way to allow `Write-Host` output to go directly to the passed
in **PSHost** object. Without it, `Write-Host` output goes to the job information data stream
collection and doesn't appear in a host console until after the jobs finish running.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Host.PSHost</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ThrottleLimit</maml:name>
          <maml:description>
            <maml:para>This parameter limits the number of jobs running at one time. As jobs are started, they are queued
and wait until a thread is available in the thread pool to run the job. The default limit is 5
threads.</maml:para>
            <maml:para>The thread pool size is global to the PowerShell session. Specifying a **ThrottleLimit** in one
call sets the limit for subsequent calls in the same session.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Start-ThreadJob</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ArgumentList</maml:name>
          <maml:description>
            <maml:para>Specifies an array of arguments, or parameter values, for the script that is specified by the
**FilePath** or **ScriptBlock** parameters.</maml:para>
            <maml:para>**ArgumentList** must be the last parameter on the command line. All the values that follow the
parameter name are interpreted values in the argument list.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>FilePath</maml:name>
          <maml:description>
            <maml:para>Specifies a script file to run as a background job. Enter the path and filename of the script. The
script must be on the local computer or in a folder that the local computer can access.</maml:para>
            <maml:para>When you use this parameter, PowerShell converts the contents of the specified script file to a
script block and runs the script block as a background job.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InitializationScript</maml:name>
          <maml:description>
            <maml:para>Specifies commands that run before the job starts. Enclose the commands in braces (`{}`) to create
a script block.</maml:para>
            <maml:para>Use this parameter to prepare the session in which the job runs. For example, you can use it to add
functions and modules to the session.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScriptBlock</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the objects used as input to the script block. It also allows for pipeline input. Use the
`$input` automatic variable in the script block to access the input objects.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies a friendly name for the new job. You can use the name to identify the job to other job
cmdlets, such as the `Stop-Job` cmdlet.</maml:para>
            <maml:para>The default friendly name is "Job#", where "#" is an ordinal number that is incremented for each
job.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StreamingHost</maml:name>
          <maml:description>
            <maml:para>This parameter provides a thread safe way to allow `Write-Host` output to go directly to the passed
in **PSHost** object. Without it, `Write-Host` output goes to the job information data stream
collection and doesn't appear in a host console until after the jobs finish running.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Host.PSHost</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ThrottleLimit</maml:name>
          <maml:description>
            <maml:para>This parameter limits the number of jobs running at one time. As jobs are started, they are queued
and wait until a thread is available in the thread pool to run the job. The default limit is 5
threads.</maml:para>
            <maml:para>The thread pool size is global to the PowerShell session. Specifying a **ThrottleLimit** in one
call sets the limit for subsequent calls in the same session.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ArgumentList</maml:name>
        <maml:description>
          <maml:para>Specifies an array of arguments, or parameter values, for the script that is specified by the
**FilePath** or **ScriptBlock** parameters.</maml:para>
          <maml:para>**ArgumentList** must be the last parameter on the command line. All the values that follow the
parameter name are interpreted values in the argument list.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Object[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>FilePath</maml:name>
        <maml:description>
          <maml:para>Specifies a script file to run as a background job. Enter the path and filename of the script. The
script must be on the local computer or in a folder that the local computer can access.</maml:para>
          <maml:para>When you use this parameter, PowerShell converts the contents of the specified script file to a
script block and runs the script block as a background job.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InitializationScript</maml:name>
        <maml:description>
          <maml:para>Specifies commands that run before the job starts. Enclose the commands in braces (`{}`) to create
a script block.</maml:para>
          <maml:para>Use this parameter to prepare the session in which the job runs. For example, you can use it to add
functions and modules to the session.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScriptBlock</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the objects used as input to the script block. It also allows for pipeline input. Use the
`$input` automatic variable in the script block to access the input objects.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies a friendly name for the new job. You can use the name to identify the job to other job
cmdlets, such as the `Stop-Job` cmdlet.</maml:para>
          <maml:para>The default friendly name is "Job#", where "#" is an ordinal number that is incremented for each
job.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>ScriptBlock</maml:name>
        <maml:description>
          <maml:para>Specifies the commands to run in the background job. Enclose the commands in braces (`{}`) to create
a script block. Use the `$input` automatic variable to access the value of the **InputObject**
parameter. This parameter is required.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.ScriptBlock</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StreamingHost</maml:name>
        <maml:description>
          <maml:para>This parameter provides a thread safe way to allow `Write-Host` output to go directly to the passed
in **PSHost** object. Without it, `Write-Host` output goes to the job information data stream
collection and doesn't appear in a host console until after the jobs finish running.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.Host.PSHost</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ThrottleLimit</maml:name>
        <maml:description>
          <maml:para>This parameter limits the number of jobs running at one time. As jobs are started, they are queued
and wait until a thread is available in the thread pool to run the job. The default limit is 5
threads.</maml:para>
          <maml:para>The thread pool size is global to the PowerShell session. Specifying a **ThrottleLimit** in one
call sets the limit for subsequent calls in the same session.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>ThreadJob.ThreadJob</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 - Create background jobs with a thread limit of 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Start-ThreadJob -ScriptBlock { 1..100 | % { sleep 1; "Output $_" } } -ThrottleLimit 2
Start-ThreadJob -ScriptBlock { 1..100 | % { sleep 1; "Output $_" } }
Start-ThreadJob -ScriptBlock { 1..100 | % { sleep 1; "Output $_" } }
Get-Job
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Id   Name   PSJobTypeName   State        HasMoreData   Location     Command
--   ----   -------------   -----        -----------   --------     -------
1    Job1   ThreadJob       Running      True          PowerShell   1..100 | % { sleep 1;...
2    Job2   ThreadJob       Running      True          PowerShell   1..100 | % { sleep 1;...
3    Job3   ThreadJob       NotStarted   False         PowerShell   1..100 | % { sleep 1;...
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2 - Compare the performance of Start-Job and Start-ThreadJob ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows the difference between `Start-Job` and `Start-ThreadJob`. The jobs run the
`Start-Sleep` cmdlet for 1 second. Since the jobs run in parallel, the total execution time
is about 1 second, plus any time required to create the jobs.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# start five background jobs each running 1 second
Measure-Command {1..5 | % {Start-Job {Start-Sleep 1}} | Wait-Job} | Select-Object TotalSeconds
Measure-Command {1..5 | % {Start-ThreadJob {Start-Sleep 1}} | Wait-Job} | Select-Object TotalSeconds
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
TotalSeconds
------------
   5.7665849
   1.5735008
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>After subtracting 1 second for execution time, you can see that `Start-Job` takes about 4.8 seconds
to create five jobs. `Start-ThreadJob` is 8 times faster, taking about 0.6 seconds to create five
jobs. The results may vary in your environment but the relative improvement should be the same.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3 - Create jobs using InputObject ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, the script block uses the `$input` variable to receive input from the
**InputObject** parameter. This can also be done by piping objects to `Start-ThreadJob`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$j = Start-ThreadJob -InputObject (Get-Process pwsh) -ScriptBlock { $input | Out-String }
$j | Wait-Job | Receive-Job
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
 NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
 ------    -----      -----     ------      --  -- -----------
     94   145.80     159.02      18.31   18276   1 pwsh
    101   163.30     222.05      29.00   35928   1 pwsh
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$j = Get-Process pwsh | Start-ThreadJob -ScriptBlock { $input | Out-String }
$j | Wait-Job | Receive-Job
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
 NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
 ------    -----      -----     ------      --  -- -----------
     94   145.80     159.02      18.31   18276   1 pwsh
    101   163.30     222.05      29.00   35928   1 pwsh
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4 - Stream job output to parent host ---------</maml:title>
        <maml:introduction>
          <maml:para>Using the **StreamingHost** parameter you can tell a job to direct all host output to a specific
host. Without this parameter the output goes to the job data stream collection and doesn't appear in
a host console until you receive the output from the job.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For this example, the current host is passed to `Start-ThreadJob` using the `$Host` automatic
variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Start-ThreadJob -ScriptBlock { Read-Host 'Say hello'; Write-Warning 'Warning output' } -StreamingHost $Host</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Id   Name   PSJobTypeName   State         HasMoreData     Location      Command
--   ----   -------------   -----         -----------     --------      -------
7    Job7   ThreadJob       NotStarted    False           PowerShell    Read-Host 'Say hello'; ...</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Say hello: Hello
WARNING: Warning output
PS&gt; Receive-Job -Id 7
Hello
WARNING: Warning output
PS&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Notice that the prompt from `Read-Host` is displayed and you are able to type input. Then, the
message from `Write-Warning` is displayed. The `Receive-Job` cmdlet returns all the output from the
job.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5 - Download multiple files at the same time ---------</maml:title>
        <maml:introduction>
          <maml:para>The `Invoke-WebRequest` cmdlet can only download one file at a time. The following example uses
`Start-ThreadJob` to create multiple thread jobs to download multiple files at the same time.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$baseUri = 'https://github.com/PowerShell/PowerShell/releases/download'
$files = @(
    @{
        Uri = "$baseUri/v7.3.0-preview.5/PowerShell-7.3.0-preview.5-win-x64.msi"
        OutFile = 'PowerShell-7.3.0-preview.5-win-x64.msi'
    },
    @{
        Uri = "$baseUri/v7.3.0-preview.5/PowerShell-7.3.0-preview.5-win-x64.zip"
        OutFile = 'PowerShell-7.3.0-preview.5-win-x64.zip'
    },
    @{
        Uri = "$baseUri/v7.2.5/PowerShell-7.2.5-win-x64.msi"
        OutFile = 'PowerShell-7.2.5-win-x64.msi'
    },
    @{
        Uri = "$baseUri/v7.2.5/PowerShell-7.2.5-win-x64.zip"
        OutFile = 'PowerShell-7.2.5-win-x64.zip'
    }
)</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>$jobs = @()</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>foreach ($file in $files) {
    $jobs += Start-ThreadJob -Name $file.OutFile -ScriptBlock {
        $params = $Using:file
        Invoke-WebRequest @params
    }
}</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Write-Host "Downloads started..."
Wait-Job -Job $jobs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>foreach ($job in $jobs) {
    Receive-Job -Job $job
}
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/threadjob/start-threadjob?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Job</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/Start-Job.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Job</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/Stop-Job.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Receive-Job</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/Receive-Job.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>