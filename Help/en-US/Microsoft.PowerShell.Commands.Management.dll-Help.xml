<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-Content</command:name>
      <maml:description>
        <maml:para>Adds content to the specified items, such as adding words to a file.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>Content</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Add-Content` cmdlet appends content to a specified item or file. Content can be passed in from the pipeline or specified by using the **Value** parameter.</maml:para>
      <maml:para>If you need to create files or directories for the following examples, see [New-Item](New-Item.md).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>Specifies that the content should be read as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to the `Add-Content` cmdlet. This
parameter works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Overrides the read-only attribute, allowing you to add content to a read-only file. For example,
**Force** overrides the read-only attribute but it doesn't change file permissions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet doesn't add a new line or carriage return to the content.</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the added content. By default, this cmdlet doesn't generate any
output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the items that receive the additional content. Wildcard characters are
permitted. The paths must be paths to items, not to containers. For example, you must specify a path
to one or more files, not a path to a directory. If you specify multiple paths, use commas to
separate the paths.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream doesn't exist, this cmdlet creates
it. Wildcard characters aren't supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the FileSystem provider adds to `Add-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Add-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we don't recommend this as a way to eliminate security checks that
block files that are downloaded from the Internet. If you verify that a downloaded file is safe, use
the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Add-Content` can target
alternative data streams on both files and directories.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the content to be added. Type a quoted string, such as **This data is for internal use
only**, or specify an object that contains content, such as the **DateTime** object that `Get-Date`
generates.</maml:para>
            <maml:para>You can't specify the contents of a file by typing its path, because the path is just a string.
You can use a `Get-Content` command to get the content and pass it to the **Value** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Add-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>Specifies that the content should be read as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to the `Add-Content` cmdlet. This
parameter works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Overrides the read-only attribute, allowing you to add content to a read-only file. For example,
**Force** overrides the read-only attribute but it doesn't change file permissions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet doesn't add a new line or carriage return to the content.</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the added content. By default, this cmdlet doesn't generate any
output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream doesn't exist, this cmdlet creates
it. Wildcard characters aren't supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the FileSystem provider adds to `Add-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Add-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we don't recommend this as a way to eliminate security checks that
block files that are downloaded from the Internet. If you verify that a downloaded file is safe, use
the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Add-Content` can target
alternative data streams on both files and directories.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the content to be added. Type a quoted string, such as **This data is for internal use
only**, or specify an object that contains content, such as the **DateTime** object that `Get-Date`
generates.</maml:para>
            <maml:para>You can't specify the contents of a file by typing its path, because the path is just a string.
You can use a `Get-Content` command to get the content and pass it to the **Value** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsByteStream</maml:name>
        <maml:description>
          <maml:para>Specifies that the content should be read as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
          <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Encoding</maml:name>
        <maml:description>
          <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
          <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to the `Add-Content` cmdlet. This
parameter works only in file system drives.</maml:para>
          <maml:para>The acceptable values for this parameter are as follows:</maml:para>
          <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
          <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
          <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Overrides the read-only attribute, allowing you to add content to a read-only file. For example,
**Force** overrides the read-only attribute but it doesn't change file permissions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoNewline</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet doesn't add a new line or carriage return to the content.</maml:para>
          <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the added content. By default, this cmdlet doesn't generate any
output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the items that receive the additional content. Wildcard characters are
permitted. The paths must be paths to items, not to containers. For example, you must specify a path
to one or more files, not a path to a directory. If you specify multiple paths, use commas to
separate the paths.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
          <maml:para>Specifies an alternative data stream for content. If the stream doesn't exist, this cmdlet creates
it. Wildcard characters aren't supported.</maml:para>
          <maml:para>**Stream** is a dynamic parameter that the FileSystem provider adds to `Add-Content`. This
parameter works only in file system drives.</maml:para>
          <maml:para>You can use the `Add-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we don't recommend this as a way to eliminate security checks that
block files that are downloaded from the Internet. If you verify that a downloaded file is safe, use
the `Unblock-File` cmdlet.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Add-Content` can target
alternative data streams on both files and directories.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies the content to be added. Type a quoted string, such as **This data is for internal use
only**, or specify an object that contains content, such as the **DateTime** object that `Get-Date`
generates.</maml:para>
          <maml:para>You can't specify the contents of a file by typing its path, because the path is just a string.
You can use a `Get-Content` command to get the content and pass it to the **Value** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe values to `Add-Content`.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSCredential</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe credentials to `Add-Content`.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **System.String** object
representing the content.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Add-Content`:

- Windows:
  - `ac`

- When you pipe an object to `Add-Content`, the object is converted to a string before it's added
  to the item. The object type determines the string format, but the format might be different than
  the default display of the object. To control the string format, use the formatting parameters of
  the sending cmdlet.
- The `Add-Content` cmdlet is designed to work with the data exposed by any provider. To list the
  providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Add a string to all text files with an exception ---------</maml:title>
        <maml:introduction>
          <maml:para>This example appends a value to text files in the current directory but excludes files based on
their file name.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-Content -Path .\*.txt -Exclude help* -Value 'End of file'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Path** parameter specifies all `.txt` files in the current directory, but the **Exclude**
parameter ignores file names that match the specified pattern. The **Value** parameter specifies the
text string that's written to the files.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Use [Get-Content](Get-Content.md) to display the contents of these files.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Add a date to the end of the specified files ---------</maml:title>
        <maml:introduction>
          <maml:para>This example appends the date to files in the current directory and displays the date in the
PowerShell console.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-Content -Path .\DateTimeFile1.log, .\DateTimeFile2.log -Value (Get-Date) -PassThru
Get-Content -Path .\DateTimeFile1.log
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Tuesday, May 14, 2019 8:24:27 AM
Tuesday, May 14, 2019 8:24:27 AM
5/14/2019 8:24:27 AM
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Add-Content` cmdlet creates two new files in the current directory. The **Value** parameter
contains the output of the `Get-Date` cmdlet. The **PassThru** parameter outputs the added contents
to the pipeline. Because there is no other cmdlet to receive the output, it's displayed in the
PowerShell console. The `Get-Content` cmdlet displays the updated file, `DateTimeFile1.log`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Add the contents of a specified file to another file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the content from a file and stores the content in a variable. The variable is
used to append the content into another file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$From = Get-Content -Path .\CopyFromFile.txt
Add-Content -Path .\CopyToFile.txt -Value $From
Get-Content -Path .\CopyToFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- The `Get-Content` cmdlet gets the contents of `CopyFromFile.txt` and stores the contents in the
  `$From` variable.
- The `Add-Content` cmdlet updates the `CopyToFile.txt` file using the contents of the `$From`
  variable.
- The `Get-Content` cmdlet displays CopyToFile.txt.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Add the contents of a specified file to another file using the pipeline ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the content from a file and pipes it to the `Add-Content` cmdlet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content -Path .\CopyFromFile.txt | Add-Content -Path .\CopyToFile.txt
Get-Content -Path .\CopyToFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Content` cmdlet gets the contents of `CopyFromFile.txt`. The results are piped to the
`Add-Content` cmdlet, which updates the `CopyToFile.txt`.
The last `Get-Content` cmdlet displays `CopyToFile.txt`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Create a new file and copy content ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a new file and copies an existing file's content into the new file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-Content -Path .\NewFile.txt -Value (Get-Content -Path .\CopyFromFile.txt)
Get-Content -Path .\NewFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- The `Add-Content` cmdlet uses the **Path** and **Value** parameters to create a new file in the
  current directory.
- The `Get-Content` cmdlet gets the contents of an existing file, `CopyFromFile.txt`
  and passes it to the **Value** parameter. The parentheses around the `Get-Content` cmdlet ensure
  that the command finishes before the `Add-Content` command begins.
- The `Get-Content` cmdlet displays the contents of the new file, `NewFile.txt`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Add content to a read-only file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command adds a value to the file even if the **IsReadOnly** file attribute is set to **True**.
The steps to create a read-only file are included in the example.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -Path .\IsReadOnlyTextFile.txt -ItemType File
Set-ItemProperty -Path .\IsReadOnlyTextFile.txt -Name IsReadOnly -Value $true
Get-ChildItem -Path .\IsReadOnlyTextFile.txt
Add-Content -Path .\IsReadOnlyTextFile.txt -Value 'Add value to read-only text file' -Force
Get-Content -Path .\IsReadOnlyTextFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-ar--         1/28/2019     13:35              0 IsReadOnlyTextFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- The `New-Item` cmdlet uses the **Path** and **ItemType** parameters to create the file
  `IsReadOnlyTextFile.txt` in the current directory.
- The `Set-ItemProperty` cmdlet uses the **Name** and **Value** parameters to change the file's
  **IsReadOnly** property to True.
- The `Get-ChildItem` cmdlet shows the file is empty (`0`) and has the read-only attribute (`r`).
- The `Add-Content` cmdlet uses the **Path** parameter to specify the file. The **Value** parameter
  includes the text string to append to the file. The **Force** parameter writes the text to the
  read-only file.
- The `Get-Content` cmdlet uses the **Path** parameter to display the file's contents.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To remove the read-only attribute, use the `Set-ItemProperty` command with the **Value** parameter
set to `False`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Use Filters with Add-Content ---------</maml:title>
        <maml:introduction>
          <maml:para>You can specify a filter to the `Add-Content` cmdlet. When using filters to qualify the **Path**
parameter, you need to include a trailing asterisk (`*`) to indicate the contents of the path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The following command adds the word "Done" the content of all `*.txt` files in the `C:\Temp`
directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-Content -Path C:\Temp\* -Filter *.txt -Value "Done"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/add-content?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Aliases</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Aliases.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Content</maml:linkText>
        <command:uri>Clear-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Content</maml:linkText>
        <command:uri>Get-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Content</maml:linkText>
        <command:uri>Set-Content.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-Content</command:name>
      <maml:description>
        <maml:para>Deletes the contents of an item, but does not delete the item.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>Content</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Clear-Content` cmdlet deletes the contents of an item, such as deleting the text from a file, but it does not delete the item. As a result, the item exists, but it is empty. `Clear-Content` is similar to `Clear-Item`, but it works on items with contents, instead of items with values.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the
**Path** parameter. The syntax of the filter, including the use of wildcards, depends on the
provider. Filters are more efficient than other parameters, because the provider applies them when
retrieving the objects, rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies
the **Path** parameter. Enter a path element or pattern, such as `*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>You can use the `Clear-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks that
block files that are downloaded from the internet. If you verify that a downloaded file is safe,
use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Clear-Content` can clear the
content of alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the
**Path** parameter. The syntax of the filter, including the use of wildcards, depends on the
provider. Filters are more efficient than other parameters, because the provider applies them when
retrieving the objects, rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies
the **Path** parameter. Enter a path element or pattern, such as `*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>You can use the `Clear-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks that
block files that are downloaded from the internet. If you verify that a downloaded file is safe,
use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Clear-Content` can clear the
content of alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the
**Path** parameter. The syntax of the filter, including the use of wildcards, depends on the
provider. Filters are more efficient than other parameters, because the provider applies them when
retrieving the objects, rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies
the **Path** parameter. Enter a path element or pattern, such as `*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>You can use the `Clear-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks that
block files that are downloaded from the internet. If you verify that a downloaded file is safe,
use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Clear-Content` can clear the
content of alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the
**Path** parameter. The syntax of the filter, including the use of wildcards, depends on the
provider. Filters are more efficient than other parameters, because the provider applies them when
retrieving the objects, rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies
the **Path** parameter. Enter a path element or pattern, such as `*.txt`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>You can use the `Clear-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks that
block files that are downloaded from the internet. If you verify that a downloaded file is safe,
use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Clear-Content` can clear the
content of alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the
**Path** parameter. The syntax of the filter, including the use of wildcards, depends on the
provider. Filters are more efficient than other parameters, because the provider applies them when
retrieving the objects, rather than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies
the **Path** parameter. Enter a path element or pattern, such as `*.txt`. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies the paths to the items from which content is deleted. Unlike the **Path** parameter, the
value of **LiteralPath** is used exactly as it is typed. No characters are interpreted as wildcards.
If the path includes escape characters, enclose it in single quotation marks (`'`). Single quotation
marks tell having PowerShell not to interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the paths to the items from which content is deleted. Wildcards are permitted. The paths
must be paths to items, not to containers. For example, you must specify a path to one or more
files, not a path to a directory. Wildcards are permitted. This parameter is required, but the
parameter name (**Path**) is optional.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
          <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
          <maml:para>You can use the `Clear-Content` cmdlet to change the content of any alternate data stream, such as
`Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks that
block files that are downloaded from the internet. If you verify that a downloaded file is safe,
use the `Unblock-File` cmdlet.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Clear-Content` can clear the
content of alternative data streams from directories as well as files.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Clear-Content`:

- All platforms:
  - `clc`

You can use `Clear-Content` with the PowerShell FileSystem provider and with other providers that
manipulate content. To clear items that are not considered to be content, such as items managed by
the PowerShell Certificate or Registry providers, use `Clear-Item`.

The `Clear-Content` cmdlet is designed to work with the data exposed by any provider.
To list the providers available in your session, type `Get-PSProvider`.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Delete all content from a directory ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-Content "..\SmpUsers\*\init.txt"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command deletes all of the content from the `init.txt` files in all subdirectories of the
`SmpUsers` directory. The files are not deleted, but they are empty.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Delete content of all files with a wildcard ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-Content -Path "*" -Filter "*.log" -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command deletes the contents of all files in the current directory with the `.log` file name
extension, including files with the read-only attribute. The asterisk (`*`) in the path represents
all items in the current directory. The **Force** parameter makes the command effective on read-only
files. Using a filter to restrict the command to files with the `.log` file name extension instead
of specifying `*.log` in the path makes the operation faster.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Clear all data from a stream ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how the `Clear-Content` cmdlet clears the content from an alternate data stream
while leaving the stream intact.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses the `Get-Content` cmdlet to get the content of the `Zone.Identifier` stream
in the `Copy-Script.ps1` file, which was downloaded from the internet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses the `Clear-Content` cmdlet to clear the content.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The third command repeats the first command. It verifies that the content is cleared, but the stream
remains. If the stream were deleted, the command would generate an error.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You can use a method like this one to clear the content of an alternate data stream. However, it is
not the recommended way to eliminate security checks that block files that are downloaded from the
Internet. If you verify that a downloaded file is safe, use the `Unblock-File` cmdlet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
[ZoneTransfer]
ZoneId=3
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-Content C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
Get-Content C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/clear-content?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-Content</maml:linkText>
        <command:uri>Add-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Content</maml:linkText>
        <command:uri>Get-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Content</maml:linkText>
        <command:uri>Set-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-Item</command:name>
      <maml:description>
        <maml:para>Clears the contents of an item, but does not delete the item.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Clear-Item` cmdlet clears the content of an item, but it does not delete the item. For example, the `Clear-Item` cmdlet can delete the value of a variable, but it does not delete the variable. The value that used to represent a cleared item is defined by each PowerShell provider. This cmdlet is similar to `Clear-Content`, but it works on aliases and variables, instead of files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet clears items that cannot otherwise be changed, such as read- only aliases.
The cmdlet cannot clear constants.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
The cmdlet cannot override security restrictions, even when the **Force** parameter is used.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the items being cleared.
Wildcard characters are permitted.
This parameter is required, but the parameter name **Path** is optional.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet clears items that cannot otherwise be changed, such as read- only aliases.
The cmdlet cannot clear constants.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
The cmdlet cannot override security restrictions, even when the **Force** parameter is used.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Indicates that the cmdlet clears items that cannot otherwise be changed, such as read- only aliases.
The cmdlet cannot clear constants.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
The cmdlet cannot override security restrictions, even when the **Force** parameter is used.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the items being cleared.
Wildcard characters are permitted.
This parameter is required, but the parameter name **Path** is optional.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a path string to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Clear-Item`:

- All platforms:
  - `cli`

- The `Clear-Item` cmdlet is supported only by several PowerShell providers, including the
  **Alias**, **Environment**, **Function**, **Registry**, and **Variable** providers. As such, you
  can use `Clear-Item` to delete the content of items in the provider namespaces. To list the
  providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
- You cannot use `Clear-Item` to delete the contents of a file, because the PowerShell FileSystem
  provider does not support this cmdlet. To clear files, use the `Clear-Content`.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Clear the value of a variable ---------</maml:title>
        <maml:introduction>
          <maml:para>This command clears the value of the variable named `TestVar1`.
The variable remains and is valid, but its value is set to `$null`.
The variable name is prefixed with `Variable:` to indicate the PowerShell Variable provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The alternate commands show that, to get the same result, you can switch to the PowerShell
`Variable:` drive and then run the `Clear-Item` command.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-Item Variable:TestVar1
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
Set-Location Variable:
PS Variable:\&gt; Clear-Item TestVar1
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Clear all registry entries ---------</maml:title>
        <maml:introduction>
          <maml:para>This command clears all registry entries in the "MyKey" subkey, but only after prompting you to
confirm your intent. It does not delete the "MyKey" subkey or affect any other registry keys or
entries. You can use the **Include** and **Exclude** parameters to identify particular registry
keys, but you cannot use them to identify registry entries.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- To delete particular registry entries, use the `Remove-ItemProperty` cmdlet.
- To delete the value of a registry entry, use the `Clear-ItemProperty cmdlet`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-Item HKLM:\Software\MyCompany\MyKey -Confirm
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/clear-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-ItemProperty</command:name>
      <maml:description>
        <maml:para>Clears the value of a property but does not delete the property.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Clear-ItemProperty` cmdlet clears the value of a property, but it does not delete the property. You can use this cmdlet to delete the data from a registry value.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes properties from items that cannot otherwise be accessed by the
user. Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be cleared, such as the name of a registry value.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the property being cleared.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes properties from items that cannot otherwise be accessed by the
user. Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be cleared, such as the name of a registry value.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet deletes properties from items that cannot otherwise be accessed by the
user. Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property to be cleared, such as the name of a registry value.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the property being cleared.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a path string to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PSCustomObject** object
representing the cleared item property.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Clear-ItemProperty`:

- All platforms:
  - `clp`

- You can use `Clear-ItemProperty` to delete the data in registry values without deleting the value.
  If the data type of the value is Binary or DWORD, clearing the data sets the value to zero.
  Otherwise, the value is empty.
- The `Clear-ItemProperty` cmdlet is designed to work with the data exposed by any provider. To list
  the providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Clear the value of registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command clears the data in the "Options" registry value in the "MyApp" subkey of
`HKEY_LOCAL_MACHINE\Software\MyCompany`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-ItemProperty -Path "HKLM:\Software\MyCompany\MyApp" -Name "Options"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/clear-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-RecycleBin</command:name>
      <maml:description>
        <maml:para>Clears the contents of the current user's recycle bin.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>RecycleBin</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Clear-RecycleBin` cmdlet deletes the content of the current user's recycle bin. This action is like using Windows **Empty Recycle Bin**.</maml:para>
      <maml:para>This cmdlet was readded in PowerShell 7.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-RecycleBin</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts for user confirmation before running the cmdlet. The user is prompted for confirmation even
if the **Confirm** parameter isn't specified.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>DriveLetter</maml:name>
          <maml:description>
            <maml:para>Specifies the recycle bin to clear for a single drive letter or an array of drive letters.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Specifies that the user isn't prompted for confirmation to clear a recycle bin. The **Force**
parameter also overrides the **WhatIf** and **Confirm** parameters.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if `Clear-RecycleBin` runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts for user confirmation before running the cmdlet. The user is prompted for confirmation even
if the **Confirm** parameter isn't specified.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>DriveLetter</maml:name>
        <maml:description>
          <maml:para>Specifies the recycle bin to clear for a single drive letter or an array of drive letters.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Specifies that the user isn't prompted for confirmation to clear a recycle bin. The **Force**
parameter also overrides the **WhatIf** and **Confirm** parameters.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if `Clear-RecycleBin` runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- 1: Clear all recycle bins ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, the current user's recycle bins for all drives are cleared.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-RecycleBin
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Confirm
Are you sure you want to perform this action?
Performing the operation "Clear-RecycleBin" on target "All of the contents of the Recycle Bin".
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"):
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Clear-RecycleBin` prompts the user for confirmation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- 2: Clear a specified recycle bin ---------</maml:title>
        <maml:introduction>
          <maml:para>This example clears the recycle bin for a specified drive letter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-RecycleBin -DriveLetter C
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Clear-RecycleBin` uses the **DriveLetter** parameter to specify the recycle bin on the `C`
volume. The user is prompted for confirmation to run the command.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- 3: Clear all recycle bins without confirmation ---------</maml:title>
        <maml:introduction>
          <maml:para>This example doesn't prompt for confirmation to clear the recycle bins.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Clear-RecycleBin -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Clear-RecycleBin` uses the **Force** parameter and doesn't prompt the user for confirmation to
clear all recycle bins.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>An alternative is to replace `-Force` with `-Confirm:$false`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/clear-recyclebin?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Convert-Path</command:name>
      <maml:description>
        <maml:para>Converts a path from a PowerShell path to a PowerShell provider path.</maml:para>
      </maml:description>
      <command:verb>Convert</command:verb>
      <command:noun>Path</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Convert-Path` cmdlet converts a path from a PowerShell path to a PowerShell provider path.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Convert-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the PowerShell path to be converted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Convert-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the path to be converted. The value of the **LiteralPath** parameter
is used exactly as it's typed. No characters are interpreted as wildcards. If the path includes
escape characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not
to interpret any characters as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the path to be converted. The value of the **LiteralPath** parameter
is used exactly as it's typed. No characters are interpreted as wildcards. If the path includes
escape characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not
to interpret any characters as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the PowerShell path to be converted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a string that contains the converted path.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Convert-Path`:

- All platforms:
  - `cvpa`

The cmdlets that contain the Path noun manipulate path names and return the names in a concise
format that all PowerShell providers can interpret. They're designed for use in programs and
scripts where you want to display all or part of a path in a particular format. Use them like you
would use **Dirname**, **Normpath**, **Realpath**, **Join**, or other path manipulators.

You can use the path cmdlets with several providers, including the **FileSystem**, **Registry**,
and **Certificate** providers.

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

`Convert-Path` only converts existing paths. It can't be used to convert a location that doesn't
exist yet.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Convert the working directory to a standard file system path ---------</maml:title>
        <maml:introduction>
          <maml:para>This example converts the current working directory, which is represented by a dot (`.`), to a
standard FileSystem path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
PS C:\&gt; Convert-Path .
C:\
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Convert a provider path to a standard registry path ---------</maml:title>
        <maml:introduction>
          <maml:para>This example converts the PowerShell provider path to a standard registry path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Convert-Path HKLM:\Software\Microsoft
HKEY_LOCAL_MACHINE\Software\Microsoft
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Convert a path to a string ---------</maml:title>
        <maml:introduction>
          <maml:para>This example converts the path to the home directory of the current provider, which is the
FileSystem provider, to a string.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Convert-Path ~
C:\Users\User01
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Convert paths for hidden items ---------</maml:title>
        <maml:introduction>
          <maml:para>By default, `Convert-Path` does not return hidden items. This example uses the **Force** parameter
to find hidden items. The `Get-Item` command confirms that the `.git` folder is hidden. Using
`Convert-Path` without the **Force** parameter returns only the visible items. Adding the **Force**
parameter returns all items, including hidden items.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Get-Item .git -Force</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: D:\Git\PS-Docs\PowerShell-Docs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d--h-           9/25/2024  4:46 PM                .git</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Convert-Path .git*
D:\Git\PS-Docs\PowerShell-Docs\.github
D:\Git\PS-Docs\PowerShell-Docs\.gitattributes
D:\Git\PS-Docs\PowerShell-Docs\.gitignore</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Convert-Path .git* -Force
D:\Git\PS-Docs\PowerShell-Docs\.git
D:\Git\PS-Docs\PowerShell-Docs\.github
D:\Git\PS-Docs\PowerShell-Docs\.gitattributes
D:\Git\PS-Docs\PowerShell-Docs\.gitignore
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/convert-path?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-Path</maml:linkText>
        <command:uri>Join-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resolve-Path</maml:linkText>
        <command:uri>Resolve-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-Path</maml:linkText>
        <command:uri>Split-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Path</maml:linkText>
        <command:uri>Test-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Copy-Item</command:name>
      <maml:description>
        <maml:para>Copies an item from one location to another.</maml:para>
      </maml:description>
      <command:verb>Copy</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Copy-Item` cmdlet copies an item from one location to another location in the same namespace. For instance, it can copy a file to a folder, but it can't copy a file to a certificate drive.</maml:para>
      <maml:para>This cmdlet doesn't cut or delete the items being copied. The particular items that the cmdlet can copy depend on the PowerShell provider that exposes the item. For instance, it can copy files and directories in a file system drive and registry keys and entries in the registry drive.</maml:para>
      <maml:para>This cmdlet can copy and rename items in the same command. To rename an item, enter the new name in the value of the **Destination** parameter. To rename an item and not copy it, use the `Rename-Item` cmdlet.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Copy-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Container</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet preserves container objects during the copy operation. By default, the
**Container** parameter is set to **True**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the new location. The default is the current directory.</maml:para>
            <maml:para>To rename the item being copied, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet copies items that can't otherwise be changed, such as copying over a
read-only file or alias.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FromSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object from which a remote file is being copied. When you use this
parameter, the **Path** and **LiteralPath** parameters refer to the local path on the remote
machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item with which you're working. By default, this cmdlet
doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does a recursive copy.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ToSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object to which a remote file is being copied. When you use this
parameter, the **Destination** parameter refers to the local path on the remote machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Copy-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Container</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet preserves container objects during the copy operation. By default, the
**Container** parameter is set to **True**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the new location. The default is the current directory.</maml:para>
            <maml:para>To rename the item being copied, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet copies items that can't otherwise be changed, such as copying over a
read-only file or alias.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FromSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object from which a remote file is being copied. When you use this
parameter, the **Path** and **LiteralPath** parameters refer to the local path on the remote
machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item with which you're working. By default, this cmdlet
doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does a recursive copy.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ToSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object to which a remote file is being copied. When you use this
parameter, the **Destination** parameter refers to the local path on the remote machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Copy-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Container</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet preserves container objects during the copy operation. By default, the
**Container** parameter is set to **True**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the new location. The default is the current directory.</maml:para>
            <maml:para>To rename the item being copied, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet copies items that can't otherwise be changed, such as copying over a
read-only file or alias.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FromSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object from which a remote file is being copied. When you use this
parameter, the **Path** and **LiteralPath** parameters refer to the local path on the remote
machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item with which you're working. By default, this cmdlet
doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does a recursive copy.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ToSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object to which a remote file is being copied. When you use this
parameter, the **Destination** parameter refers to the local path on the remote machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Copy-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Container</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet preserves container objects during the copy operation. By default, the
**Container** parameter is set to **True**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the new location. The default is the current directory.</maml:para>
            <maml:para>To rename the item being copied, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet copies items that can't otherwise be changed, such as copying over a
read-only file or alias.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FromSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object from which a remote file is being copied. When you use this
parameter, the **Path** and **LiteralPath** parameters refer to the local path on the remote
machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item with which you're working. By default, this cmdlet
doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does a recursive copy.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ToSession</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify the **PSSession** object to which a remote file is being copied. When you use this
parameter, the **Destination** parameter refers to the local path on the remote machine.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Container</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet preserves container objects during the copy operation. By default, the
**Container** parameter is set to **True**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the new location. The default is the current directory.</maml:para>
          <maml:para>To rename the item being copied, specify a new name in the value of the **Destination** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet copies items that can't otherwise be changed, such as copying over a
read-only file or alias.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>FromSession</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
          <maml:para>Specify the **PSSession** object from which a remote file is being copied. When you use this
parameter, the **Path** and **LiteralPath** parameters refer to the local path on the remote
machine.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies one or more path elements or patterns, such as `"*.txt"`, to limit this cmdlet's
operation. The value of this parameter filters against the wildcard-matching result of the **Path**
parameter, not the final results. This parameter is only effective when the **Path** is specified
with one or more wildcards. Since this parameter only filters on the paths resolved for the **Path**
parameter, it doesn't filter any items discovered when recursing through child folders with the
**Recurse** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the item with which you're working. By default, this cmdlet
doesn't generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the path to the items to copy. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Recurse</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet does a recursive copy.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ToSession</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
          <maml:para>Specify the **PSSession** object to which a remote file is being copied. When you use this
parameter, the **Destination** parameter refers to the local path on the remote machine.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.Runspaces.PSSession</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns an object representing the copied
item.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Copy-Item`:

- All platforms:
  - `copy`
  - `cpi`
- Windows:
  - `cp`

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Copy a file to the specified directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example copies the `mar1604.log.txt` file to the `C:\Presentation` directory. The original file
isn't deleted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Copy-Item "C:\Wabash\Logfiles\mar1604.log.txt" -Destination "C:\Presentation"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Copy directory contents to an existing directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example copies the contents of the `C:\Logfiles` directory into the existing `C:\Drawings`
directory. The `Logfiles` directory isn't copied.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If the `Logfiles` directory has files in subdirectories, those subdirectories are copied with their
file trees intact. By default, the **Container** parameter is set to **True**, which preserves the
directory structure.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Copy-Item -Path "C:\Logfiles\*" -Destination "C:\Drawings" -Recurse
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; If the path `C:\Drawings` doesn't exist the cmdlet copies all the files from the `Logfiles`
&gt; folder tree into a single folder `C:\Drawings`, overwriting any files with the same name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Copy directory and contents to a new directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example copies the contents of the `C:\Logfiles` source directory and creates a new destination
directory. The new destination directory, `\Logs` is created in `C:\Drawings`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To include the source directory's name, copy to an existing destination directory as shown in
**Example 2**. Or, name the new destination directory with the same as the source directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Copy-Item -Path "C:\Logfiles" -Destination "C:\Drawings\Logs" -Recurse
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; If the **Path** includes `\*`, all the directory's file contents, including the subdirectory
&gt; trees, are copied to the new destination directory. For example:
&gt;
&gt; `Copy-Item -Path "C:\Logfiles\*" -Destination "C:\Drawings\Logs" -Recurse`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Copy a file to the specified directory and rename the file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses the `Copy-Item` cmdlet to copy the `Get-Widget.ps1` script from the
`\\Server01\Share` directory to the `\\Server12\ScriptArchive` directory. As part of the copy
operation, the command changes the item name from `Get-Widget.ps1` to `Get-Widget.ps1.txt`, so it
can be safely attached to email messages.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$copyParams = @{
    Path        = "\\Server01\Share\Get-Widget.ps1"
    Destination = "\\Server12\ScriptArchive\Get-Widget.ps1.txt"
}
Copy-Item @copyParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Copy a file to a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies `test.log` from the `D:\Folder001` folder to the `C:\Folder001_Copy`
folder on the remote computer using the session information stored in the `$Session` variable. The
original file isn't deleted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\User01"
Copy-Item "D:\Folder001\test.log" -Destination "C:\Folder001_Copy\" -ToSession $Session
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Copy a folder to a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies the `D:\Folder002` folder to the `C:\Folder002_Copy` directory on the
remote computer using the session information stored in the `$Session` variable. Any subfolders or
files aren't copied without using the **Recurse** switch. The operation creates the `Folder002_Copy`
folder if it doesn't already exist.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server02" -Credential "Contoso\User01"
Copy-Item "D:\Folder002\" -Destination "C:\Folder002_Copy\" -ToSession $Session
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Recursively copy the entire contents of a folder to a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies the entire contents from the `D:\Folder003` folder to the
`C:\Folder003_Copy` directory on the remote computer using the session information stored in the
`$Session` variable. The subfolders are copied with their file trees intact. The operation creates
the `Folder003_Copy` folder if it doesn't already exist.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server04" -Credential "Contoso\User01"
Copy-Item "D:\Folder003\" -Destination "C:\Folder003_Copy\" -ToSession $Session -Recurse
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Copy a file to a remote computer and then rename the file ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies `scriptingexample.ps1` from the `D:\Folder004` folder to the
`C:\Folder004_Copy` folder on the remote computer using the session information stored in the
`$Session` variable. The original file isn't deleted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server04" -Credential "Contoso\User01"
$copyParams = @{
    Path        = "D:\Folder004\scriptingexample.ps1"
    Destination = "C:\Folder004_Copy\scriptingexample_copy.ps1"
    ToSession   = $Session
}
Copy-Item @copyParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Copy a remote file to the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies `test.log` from the remote `C:\MyRemoteData\` to the local
`D:\MyLocalData` folder using the session information stored in the `$Session` variable. The
original file isn't deleted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\User01"
Copy-Item "C:\MyRemoteData\test.log" -Destination "D:\MyLocalData\" -FromSession $Session
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 10: Copy the entire contents of a remote folder to the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies the entire contents from the remote `C:\MyRemoteData\scripts` folder
to the local `D:\MyLocalData` folder using the session information stored in the `$Session`
variable. If the scripts folder has files in subfolders, those subfolders are copied with their
file trees intact.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\User01"
Copy-Item "C:\MyRemoteData\scripts" -Destination "D:\MyLocalData\" -FromSession $Session
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 11: Recursively copy the entire contents of a remote folder to the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>A session is created to the remote computer named **Server01** with the credential of
`Contoso\User01` and stores the results in the variable named `$Session`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet copies the entire contents from the remote `C:\MyRemoteData\scripts` folder
to the local `D:\MyLocalData\scripts` folder using the session information stored in the `$Session`
variable. Because the **Recurse** parameter is used, the operation creates the scripts folder if it
doesn't already exist. If the scripts folder has files in subfolders, those subfolders are
copied with their file trees intact.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\User01"
$copyParams = @{
    Path        = "C:\MyRemoteData\scripts"
    Destination = "D:\MyLocalData\scripts"
    FromSession = $Session
    Recurse     = $true
}
Copy-Item @copyParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 12: Recursively copy files from a folder tree into the current folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to copy files from a multilevel folder structure into a single flat folder.
The first three commands show the existing folder structure and the contents of two files, both
names `file3.txt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\temp\test&gt; (Get-ChildItem C:\temp\tree -Recurse).FullName
C:\temp\tree\subfolder
C:\temp\tree\file1.txt
C:\temp\tree\file2.txt
C:\temp\tree\file3.txt
C:\temp\tree\subfolder\file3.txt
C:\temp\tree\subfolder\file4.txt
C:\temp\tree\subfolder\file5.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\temp\test&gt; Get-Content C:\temp\tree\file3.txt
This is file3.txt in the root folder</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\temp\test&gt; Get-Content C:\temp\tree\subfolder\file3.txt
This is file3.txt in the subfolder</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\temp\test&gt; Copy-Item -Path C:\temp\tree -Filter *.txt -Recurse -Container:$false
PS C:\temp\test&gt; (Get-ChildItem . -Recurse).FullName
C:\temp\test\subfolder
C:\temp\test\file1.txt
C:\temp\test\file2.txt
C:\temp\test\file3.txt
C:\temp\test\file4.txt
C:\temp\test\file5.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\temp\test&gt; Get-Content .\file3.txt
This is file3.txt in the subfolder
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Copy-Item` cmdlet has the **Container** parameter set to `$false`. This causes the contents of
the source folder to be copied but doesn't preserve the folder structure. Notice that files with
the same name are overwritten in the destination folder.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 13: Using filters to copy items without recursion ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows the results using the **Include** parameter to select the items to be copied.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example uses the following folder structure containing the files to be copied:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- `D:\temp\tree\example.ps1`
- `D:\temp\tree\example.txt`
- `D:\temp\tree\examples\`
- `D:\temp\tree\examples\example_1.txt`
- `D:\temp\tree\examples\example_2.txt`
- `D:\temp\tree\examples\subfolder\`
- `D:\temp\tree\examples\subfolder\test.txt`</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, `Copy-Item` is called with a wildcard for both the **Path** and **Include**
parameters. Specifying a wildcard for the **Path** parameter ensures that it processes all files and
folders that match `D:\temp\tree\*`. The **Include** parameter filters the list of items to process,
limiting the operation to only those paths that begin with `ex`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS D:\temp\test\out&gt; Copy-Item -Path D:\temp\tree\* -Include ex*
PS D:\temp\test\out&gt; (Get-ChildItem -Recurse).FullName
D:\temp\out\examples
D:\temp\out\example.ps1
D:\temp\out\example.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Include** parameter is applied to the contents of `D:\temp\tree` folder to copy all items that
match `ex*`. Notice that, without recursion, the `D:\temp\out\examples` folder is copied, but none
of its contents are copied.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 14: Using filters to copy items with recursion ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows the results using the **Include** parameter to select the items to be copied.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example uses the following folder structure containing the files to be copied:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- `D:\temp\tree\example.ps1`
- `D:\temp\tree\example.txt`
- `D:\temp\tree\examples\`
- `D:\temp\tree\examples\example_1.txt`
- `D:\temp\tree\examples\example_2.txt`
- `D:\temp\tree\examples\subfolder\`
- `D:\temp\tree\examples\subfolder\test.txt`</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, `Copy-Item` is called with a wildcard for both the **Path** and **Include**
parameters. Specifying a wildcard for the **Path** parameter ensures that it processes all the files
and folders that match `D:\temp\tree\*`. The **Include** parameter filters the list of items to
process, limiting the operation to only those paths that begin with `ex`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
D:\temp\out&gt; Copy-Item -Path D:\temp\tree\* -Include ex* -Recurse
D:\temp\out&gt; (Get-ChildItem -Recurse).FullName
D:\temp\out\examples
D:\temp\out\example.ps1
D:\temp\out\example.txt
D:\temp\out\examples\subfolder
D:\temp\out\examples\example_1.txt
D:\temp\out\examples\example_2.txt
D:\temp\out\examples\subfolder\test.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Include** parameter is applied to the contents of `D:\temp\tree` folder to copy all items that
match `ex*`. Notice that, with recursion, the `D:\temp\out\examples` folder is copied along with all
the files and subfolders. The copy includes files that _do not_ match the include filter. When using
`Copy-Item`, the filters only apply to the top-level specified by the **Path** parameter. Then
recursion is applied to those matching items.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; The behavior of the **Exclude** parameter is the same as described in this example, except that
&gt; it limits the operation to only those paths that don't match the pattern.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 15: Limit the files to recursively copy from a wildcard-specified path ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to limit the files recursively copied from a wildcard-matching path into
another folder. Example 13 shows that, because the **Include** parameter only filters on the paths
resolved for a wildcard-specifying **Path**, the **Include** parameter can't be used to limit the
files recursively copied from a folder. Instead, you can use `Get-ChildItem` to find the items you
want to copy and pass those items to `Copy-Item`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example uses the following folder structure containing the files to be copied:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- `D:\temp\tree\example.ps1`
- `D:\temp\tree\example.txt`
- `D:\temp\tree\examples\`
- `D:\temp\tree\examples\example_1.txt`
- `D:\temp\tree\examples\example_2.txt`
- `D:\temp\tree\examples\subfolder\`
- `D:\temp\tree\examples\subfolder\test.txt`</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To copy all items that begin with `ex*`, use `Get-ChildItem` with the **Recurse** and **Filter**
parameters and pipe the results to `Copy-Item`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
D:\temp\out&gt; Get-ChildItem -Path D:\temp\tree -Recurse -Filter ex* | Copy-Item
D:\temp\out&gt; (Get-ChildItem -Recurse).FullName
D:\temp\out\examples
D:\temp\out\example_1.txt
D:\temp\out\example_2.txt
D:\temp\out\example.ps1
D:\temp\out\example.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Unlike the `Copy-Item`, the **Filter** parameter for `Get-ChildItem` applies to the items discovered
during recursion. This enables you to find, filter, and then copy items recursively.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/copy-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Copy-ItemProperty</command:name>
      <maml:description>
        <maml:para>Copies a property and value from a specified location to another location.</maml:para>
      </maml:description>
      <command:verb>Copy</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Copy-ItemProperty` cmdlet copies a property and value from a specified location to another location. For instance, you can use this cmdlet to copy one or more registry entries from one registry key to another registry key.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Copy-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the destination location.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.
Implementation varies from provider to provider.</maml:para>
            <maml:para>For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be copied.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the path to the property to be copied.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Copy-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the destination location.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.
Implementation varies from provider to provider.</maml:para>
            <maml:para>For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be copied.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the destination location.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation.
Implementation varies from provider to provider.</maml:para>
          <maml:para>For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property to be copied.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the path to the property to be copied.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PSCustomObject** representing the
copied item property.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Copy-ItemProperty`:

- Windows:
  - `cpp`

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Copy a property from a registry key to another registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command copies the property named "MyProperty" from the "MyApplication" registry key to the
"MyApplicationRev2" registry key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$copyParams = @{
    Path        = "MyApplication"
    Destination = "HKLM:\Software\MyApplicationRev2"
    Name        = "MyProperty"
}
Copy-ItemProperty @copyParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/copy-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Debug-Process</command:name>
      <maml:description>
        <maml:para>Debugs one or more processes running on the local computer.</maml:para>
      </maml:description>
      <command:verb>Debug</command:verb>
      <command:noun>Process</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Debug-Process` cmdlet attaches a debugger to one or more running processes on a local computer. You can specify the processes by their process name or process ID (PID), or you can pipe process objects to this cmdlet.</maml:para>
      <maml:para>This cmdlet attaches the debugger that's registered for the process. Before using this cmdlet, verify that a debugger is installed and configured.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Debug-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the processes to be debugged. If there is more than one process with the same
name, this cmdlet attaches a debugger to all processes with that name. The **Name** parameter is
optional.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Debug-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies the process IDs of the processes to be debugged. The **Id** parameter name is optional.</maml:para>
            <maml:para>To find the process ID of a process, type `Get-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Debug-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the process objects that represent processes to be debugged. Enter a variable that
contains the process objects or a command that gets the process objects, such as the `Get-Process`
cmdlet. You can also pipe process objects to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies the process IDs of the processes to be debugged. The **Id** parameter name is optional.</maml:para>
          <maml:para>To find the process ID of a process, type `Get-Process`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the process objects that represent processes to be debugged. Enter a variable that
contains the process objects or a command that gets the process objects, such as the `Get-Process`
cmdlet. You can also pipe process objects to this cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the names of the processes to be debugged. If there is more than one process with the same
name, this cmdlet attaches a debugger to all processes with that name. The **Name** parameter is
optional.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Int32</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a process ID to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a process object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a process name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet uses the AttachDebugger method of the Windows Management Instrumentation (WMI)
**Win32_Process** class. For more information about this method, see
[AttachDebugger method](https://go.microsoft.com/fwlink/?LinkId=143640) in Microsoft Learn.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Attach a debugger to a process on the computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Debug-Process -Name powershell
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to the PowerShell process on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Attach a debugger to all processes that begin with the specified string ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Debug-Process -Name note*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to all processes that have names that begin with `note`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Attach a debugger to multiple processes ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Debug-Process "Winlogon", "Explorer", "Outlook"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attempts to attach a debugger to the Winlogon, Explorer, and Outlook processes.
Winlogon is a protected process. To debug Winlogon, you must run the command as an administrator.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Attach a debugger to multiple process IDs ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Debug-Process -Id 1132, 2028
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to the processes that have process IDs 1132 and 2028.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Use Get-Process to get a process then attach a debugger to it ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process powershell | Debug-Process
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to the PowerShell processes on the computer. It uses the
`Get-Process` cmdlet to get the PowerShell processes on the computer, and it uses a pipeline
operator (`|`) to send the processes to the `Debug-Process` cmdlet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To specify a particular PowerShell process, use the **Id** parameter of `Get-Process`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Attach a debugger to a current process on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
 Debug-Process -Id $PID
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to the current PowerShell processes on the computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command uses the `$PID` automatic variable, which contains the process ID of the current
PowerShell process. Then, it uses a pipeline operator (`|`) to send the process ID to the
`Debug-Process` cmdlet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about the `$PID` automatic variable, see
[about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Attach a debugger to a process that uses the InputObject parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$P = Get-Process powershell
Debug-Process -InputObject $P
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command attaches a debugger to the PowerShell processes on the local computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses the `Get-Process` cmdlet to get the PowerShell processes on the
computer. It saves the resulting process object in the variable named `$P`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses the **InputObject** parameter of the `Debug-Process` cmdlet to submit the
process object in the `$P` variable.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/debug-process?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Debug-Process</maml:linkText>
        <command:uri>Debug-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Process</maml:linkText>
        <command:uri>Start-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Process</maml:linkText>
        <command:uri>Stop-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Wait-Process</maml:linkText>
        <command:uri>Wait-Process.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ChildItem</command:name>
      <maml:description>
        <maml:para>Gets the items and child items in one or more specified locations.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ChildItem</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-ChildItem` cmdlet gets the items in one or more specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the **Recurse** parameter to get items in all child containers and use the **Depth** parameter to limit the number of levels to recurse.</maml:para>
      <maml:para>`Get-ChildItem` doesn't display empty directories. When a `Get-ChildItem` command includes the **Depth** or **Recurse** parameters, empty directories aren't included in the output.</maml:para>
      <maml:para>The `Get-ChildItem` cmdlet is designed to work with the items exposed by any provider. For example, items can be a file system file or directory, registry hive, or a certificate store. To list the providers available in your session, use the `Get-PSProvider` command. Some parameters are only available for a specific provider. For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ChildItem</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Attributes</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>Gets files and folders with the specified attributes. This parameter supports all attributes and
lets you specify complex combinations of attributes.</maml:para>
            <maml:para>For example, to get non-system files (not directories) that are encrypted or compressed, type:</maml:para>
            <maml:para>`Get-ChildItem -Attributes !Directory+!System+Encrypted, !Directory+!System+Compressed`</maml:para>
            <maml:para>To find files and folders with commonly used attributes, use the **Attributes** parameter. Or, the
parameters **Directory**, **File**, **Hidden**, **ReadOnly**, and **System**.</maml:para>
            <maml:para>The **Attributes** parameter supports the following values:</maml:para>
            <maml:para>- `Archive`
- `Compressed`
- `Device`
- `Directory`
- `Encrypted`
- `Hidden`
- `IntegrityStream`
- `Normal`
- `NoScrubData`
- `NotContentIndexed`
- `Offline`
- `ReadOnly`
- `ReparsePoint`
- `SparseFile`
- `System`
- `Temporary`</maml:para>
            <maml:para>For a description of these attributes, see the [FileAttributes](xref:System.IO.FileAttributes)
enumeration.</maml:para>
            <maml:para>To combine attributes, use the following operators:</maml:para>
            <maml:para>- `!` (NOT)
- `+` (AND)
- `,` (OR)</maml:para>
            <maml:para>Don't use spaces between an operator and its attribute. Spaces are accepted after commas.</maml:para>
            <maml:para>For common attributes, use the following abbreviations:</maml:para>
            <maml:para>- `D` (Directory)
- `H` (Hidden)
- `R` (Read-only)
- `S` (System)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.FlagsExpression`1[System.IO.FileAttributes]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Code Signing` in their **EnhancedKeyUsageList** property
value, use the **CodeSigningCert** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Depth</maml:name>
          <maml:description>
            <maml:para>This parameter was added in PowerShell 5.0 and enables you to control the depth of recursion. By
default, `Get-ChildItem` displays the contents of the parent directory. The **Depth** parameter
determines the number of subdirectory levels that are included in the recursion and displays the
contents.</maml:para>
            <maml:para>For example, `-Depth 2` includes the **Path** parameter's directory, first level of subdirectories,
and second level of subdirectories. By default directory names and filenames are included in the
output.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; On a Windows computer from PowerShell or **cmd.exe**, you can display a graphical view of a
&gt; directory structure with the **tree.com** command.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.UInt32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Directory</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get a list of directories, use the **Directory** parameter or the **Attributes** parameter with
the **Directory** property. You can use the **Recurse** parameter with **Directory**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Document Encryption` in their **EnhancedKeyUsageList**
property value, use the **DocumentEncryptionCert** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is excluded from the output. Enter a path element or pattern, such as `*.txt` or `A*`.
Wildcard characters are accepted.</maml:para>
            <maml:para>A trailing asterisk (`*`) in the **Path** parameter is optional. For example, `-Path C:\Test\Logs`
or `-Path C:\Test\Logs\*`. If a trailing asterisk (`*`) is included, the command recurses into the
**Path** parameter's subdirectories. Without the asterisk (`*`), the contents of the **Path**
parameter are displayed. More details are included in Example 5 and the Notes section.</maml:para>
            <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>File</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get a list of files, use the **File** parameter. You can use the **Recurse** parameter with
**File**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FollowSymlink</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>By default, the `Get-ChildItem` cmdlet displays symbolic links to directories found during
recursion, but doesn't recurse into them. Use the **FollowSymlink** parameter to search the
directories that target those symbolic links. The **FollowSymlink** is a dynamic parameter and is
supported only in the **FileSystem** provider.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Hidden</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get only hidden items, use the **Hidden** parameter or the **Attributes** parameter with the
**Hidden** property. By default, `Get-ChildItem` doesn't display hidden items. Use the **Force**
parameter to get hidden items.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is included in the output. Enter a path element or pattern, such as `"*.txt"`.
Wildcard characters are permitted. The **Include** parameter is effective only when the command
includes the contents of an item, such as `C:\Windows\*`, where the wildcard character specifies the
contents of the `C:\Windows` directory.</maml:para>
            <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Gets only the names of the items in the location. The output is a string object that can be sent
down the pipeline to other commands. The names returned are relative to the value of the **Path**
parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. If not specified, the default location is the current
directory (`.`). Wildcards are accepted. Use care when using the **Path** parameter with the
**Recurse** parameter. For more information, see the [NOTES](#notes) section of this article.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReadOnly</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get only read-only items, use the **ReadOnly** parameter or the **Attributes** parameter
**ReadOnly** property.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Gets the items in the specified locations and in all child items of the locations.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Server Authentication` in their **EnhancedKeyUsageList**
property value, use the **SSLServerAuthentication** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>System</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>Gets only system files and directories. To get only system files and folders, use the **System**
parameter or **Attributes** parameter **System** property.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ChildItem</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Attributes</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>Gets files and folders with the specified attributes. This parameter supports all attributes and
lets you specify complex combinations of attributes.</maml:para>
            <maml:para>For example, to get non-system files (not directories) that are encrypted or compressed, type:</maml:para>
            <maml:para>`Get-ChildItem -Attributes !Directory+!System+Encrypted, !Directory+!System+Compressed`</maml:para>
            <maml:para>To find files and folders with commonly used attributes, use the **Attributes** parameter. Or, the
parameters **Directory**, **File**, **Hidden**, **ReadOnly**, and **System**.</maml:para>
            <maml:para>The **Attributes** parameter supports the following values:</maml:para>
            <maml:para>- `Archive`
- `Compressed`
- `Device`
- `Directory`
- `Encrypted`
- `Hidden`
- `IntegrityStream`
- `Normal`
- `NoScrubData`
- `NotContentIndexed`
- `Offline`
- `ReadOnly`
- `ReparsePoint`
- `SparseFile`
- `System`
- `Temporary`</maml:para>
            <maml:para>For a description of these attributes, see the [FileAttributes](xref:System.IO.FileAttributes)
enumeration.</maml:para>
            <maml:para>To combine attributes, use the following operators:</maml:para>
            <maml:para>- `!` (NOT)
- `+` (AND)
- `,` (OR)</maml:para>
            <maml:para>Don't use spaces between an operator and its attribute. Spaces are accepted after commas.</maml:para>
            <maml:para>For common attributes, use the following abbreviations:</maml:para>
            <maml:para>- `D` (Directory)
- `H` (Hidden)
- `R` (Read-only)
- `S` (System)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.FlagsExpression`1[System.IO.FileAttributes]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Code Signing` in their **EnhancedKeyUsageList** property
value, use the **CodeSigningCert** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Depth</maml:name>
          <maml:description>
            <maml:para>This parameter was added in PowerShell 5.0 and enables you to control the depth of recursion. By
default, `Get-ChildItem` displays the contents of the parent directory. The **Depth** parameter
determines the number of subdirectory levels that are included in the recursion and displays the
contents.</maml:para>
            <maml:para>For example, `-Depth 2` includes the **Path** parameter's directory, first level of subdirectories,
and second level of subdirectories. By default directory names and filenames are included in the
output.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; On a Windows computer from PowerShell or **cmd.exe**, you can display a graphical view of a
&gt; directory structure with the **tree.com** command.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.UInt32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Directory</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get a list of directories, use the **Directory** parameter or the **Attributes** parameter with
the **Directory** property. You can use the **Recurse** parameter with **Directory**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Document Encryption` in their **EnhancedKeyUsageList**
property value, use the **DocumentEncryptionCert** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is excluded from the output. Enter a path element or pattern, such as `*.txt` or `A*`.
Wildcard characters are accepted.</maml:para>
            <maml:para>A trailing asterisk (`*`) in the **Path** parameter is optional. For example, `-Path C:\Test\Logs`
or `-Path C:\Test\Logs\*`. If a trailing asterisk (`*`) is included, the command recurses into the
**Path** parameter's subdirectories. Without the asterisk (`*`), the contents of the **Path**
parameter are displayed. More details are included in Example 5 and the Notes section.</maml:para>
            <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>File</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get a list of files, use the **File** parameter. You can use the **Recurse** parameter with
**File**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FollowSymlink</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>By default, the `Get-ChildItem` cmdlet displays symbolic links to directories found during
recursion, but doesn't recurse into them. Use the **FollowSymlink** parameter to search the
directories that target those symbolic links. The **FollowSymlink** is a dynamic parameter and is
supported only in the **FileSystem** provider.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Hidden</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get only hidden items, use the **Hidden** parameter or the **Attributes** parameter with the
**Hidden** property. By default, `Get-ChildItem` doesn't display hidden items. Use the **Force**
parameter to get hidden items.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is included in the output. Enter a path element or pattern, such as `"*.txt"`.
Wildcard characters are permitted. The **Include** parameter is effective only when the command
includes the contents of an item, such as `C:\Windows\*`, where the wildcard character specifies the
contents of the `C:\Windows` directory.</maml:para>
            <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell to not interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Gets only the names of the items in the location. The output is a string object that can be sent
down the pipeline to other commands. The names returned are relative to the value of the **Path**
parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReadOnly</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>To get only read-only items, use the **ReadOnly** parameter or the **Attributes** parameter
**ReadOnly** property.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Gets the items in the specified locations and in all child items of the locations.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
            <maml:para>To get a list of certificates that have `Server Authentication` in their **EnhancedKeyUsageList**
property value, use the **SSLServerAuthentication** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>System</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
            <maml:para>Gets only system files and directories. To get only system files and folders, use the **System**
parameter or **Attributes** parameter **System** property.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Attributes</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>Gets files and folders with the specified attributes. This parameter supports all attributes and
lets you specify complex combinations of attributes.</maml:para>
          <maml:para>For example, to get non-system files (not directories) that are encrypted or compressed, type:</maml:para>
          <maml:para>`Get-ChildItem -Attributes !Directory+!System+Encrypted, !Directory+!System+Compressed`</maml:para>
          <maml:para>To find files and folders with commonly used attributes, use the **Attributes** parameter. Or, the
parameters **Directory**, **File**, **Hidden**, **ReadOnly**, and **System**.</maml:para>
          <maml:para>The **Attributes** parameter supports the following values:</maml:para>
          <maml:para>- `Archive`
- `Compressed`
- `Device`
- `Directory`
- `Encrypted`
- `Hidden`
- `IntegrityStream`
- `Normal`
- `NoScrubData`
- `NotContentIndexed`
- `Offline`
- `ReadOnly`
- `ReparsePoint`
- `SparseFile`
- `System`
- `Temporary`</maml:para>
          <maml:para>For a description of these attributes, see the [FileAttributes](xref:System.IO.FileAttributes)
enumeration.</maml:para>
          <maml:para>To combine attributes, use the following operators:</maml:para>
          <maml:para>- `!` (NOT)
- `+` (AND)
- `,` (OR)</maml:para>
          <maml:para>Don't use spaces between an operator and its attribute. Spaces are accepted after commas.</maml:para>
          <maml:para>For common attributes, use the following abbreviations:</maml:para>
          <maml:para>- `D` (Directory)
- `H` (Hidden)
- `R` (Read-only)
- `S` (System)</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.FlagsExpression`1[System.IO.FileAttributes]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>CodeSigningCert</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>To get a list of certificates that have `Code Signing` in their **EnhancedKeyUsageList** property
value, use the **CodeSigningCert** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Depth</maml:name>
        <maml:description>
          <maml:para>This parameter was added in PowerShell 5.0 and enables you to control the depth of recursion. By
default, `Get-ChildItem` displays the contents of the parent directory. The **Depth** parameter
determines the number of subdirectory levels that are included in the recursion and displays the
contents.</maml:para>
          <maml:para>For example, `-Depth 2` includes the **Path** parameter's directory, first level of subdirectories,
and second level of subdirectories. By default directory names and filenames are included in the
output.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; On a Windows computer from PowerShell or **cmd.exe**, you can display a graphical view of a
&gt; directory structure with the **tree.com** command.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.UInt32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Directory</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>To get a list of directories, use the **Directory** parameter or the **Attributes** parameter with
the **Directory** property. You can use the **Recurse** parameter with **Directory**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DnsName</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DocumentEncryptionCert</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>To get a list of certificates that have `Document Encryption` in their **EnhancedKeyUsageList**
property value, use the **DocumentEncryptionCert** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Eku</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is excluded from the output. Enter a path element or pattern, such as `*.txt` or `A*`.
Wildcard characters are accepted.</maml:para>
          <maml:para>A trailing asterisk (`*`) in the **Path** parameter is optional. For example, `-Path C:\Test\Logs`
or `-Path C:\Test\Logs\*`. If a trailing asterisk (`*`) is included, the command recurses into the
**Path** parameter's subdirectories. Without the asterisk (`*`), the contents of the **Path**
parameter are displayed. More details are included in Example 5 and the Notes section.</maml:para>
          <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ExpiringInDays</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>File</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>To get a list of files, use the **File** parameter. You can use the **Recurse** parameter with
**File**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>FollowSymlink</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>By default, the `Get-ChildItem` cmdlet displays symbolic links to directories found during
recursion, but doesn't recurse into them. Use the **FollowSymlink** parameter to search the
directories that target those symbolic links. The **FollowSymlink** is a dynamic parameter and is
supported only in the **FileSystem** provider.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Hidden</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>To get only hidden items, use the **Hidden** parameter or the **Attributes** parameter with the
**Hidden** property. By default, `Get-ChildItem` doesn't display hidden items. Use the **Force**
parameter to get hidden items.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies an array of one or more string patterns to be matched as the cmdlet gets child items. Any
matching item is included in the output. Enter a path element or pattern, such as `"*.txt"`.
Wildcard characters are permitted. The **Include** parameter is effective only when the command
includes the contents of an item, such as `C:\Windows\*`, where the wildcard character specifies the
contents of the `C:\Windows` directory.</maml:para>
          <maml:para>The **Include** and **Exclude** parameters can be used together. However, the exclusions are applied
after the inclusions, which can affect the final output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell to not interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Gets only the names of the items in the location. The output is a string object that can be sent
down the pipeline to other commands. The names returned are relative to the value of the **Path**
parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. If not specified, the default location is the current
directory (`.`). Wildcards are accepted. Use care when using the **Path** parameter with the
**Recurse** parameter. For more information, see the [NOTES](#notes) section of this article.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReadOnly</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>To get only read-only items, use the **ReadOnly** parameter or the **Attributes** parameter
**ReadOnly** property.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Recurse</maml:name>
        <maml:description>
          <maml:para>Gets the items in the specified locations and in all child items of the locations.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SSLServerAuthentication</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [Certificate](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md) provider.</maml:para>
          <maml:para>To get a list of certificates that have `Server Authentication` in their **EnhancedKeyUsageList**
property value, use the **SSLServerAuthentication** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>System</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is only available in the
&gt; [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider.</maml:para>
          <maml:para>Gets only system files and directories. To get only system files and folders, use the **System**
parameter or **Attributes** parameter **System** property.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.AliasInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Alias:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.X509StoreLocation</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Security.Cryptography.X509Certificates.X509Store</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Security.Cryptography.X509Certificates.X509Certificate2</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `Cert:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.DictionaryEntry</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Env:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.DirectoryInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.FileInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the FileSystem drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.FunctionInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.FilterInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `Function:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Win32.RegistryKey</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the Registry drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSVariable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Variable:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.WSMan.Management.WSManConfigContainerElement</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.WSMan.Management.WSManConfigLeafElement</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `WSMan:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **Name** parameter, this cmdlet returns the object names as strings.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-ChildItem`:

- All platforms:
  - `dir`, `gci`
- Windows:
  - `ls`

**Recursion behavior with the Path parameter:**

When you use `Get-ChildItem -Recurse` with the **Path** parameter, the cmdlet searches for the last
path component whether or not it's a wildcard pattern or a literal name.

- If the last path component matches an existing immediate subdirectory of the target directory, the
  cmdlet performs recursive enumeration on the matching directory.
- If the last path component doesn't match an existing immediate subdirectory of the target
  directory, the cmdlet recursively searches the target directory's hierarchy for items that match
  the last path component

When you use `Get-ChildItem -Recurse` with the **Path** and **Name** parameters, the behavior
changes. The command searches for the last path component among the immediate child items of the
target directory.

- If there is a match among the immediate child items, the cmdlet performs recursive enumeration on
  the matching items. Wildcard matching happens only once, at the top level of the target directory.
  The results are processed as if they had been individually passed to the **LiteralPath**
  parameter.
- If the last path component doesn't match any items at the top level, an error occurs.

You should avoid using the **Path** parameter with the **Recurse** parameter. For best results:

- Use **LiteralPath** to specify the target directory to avoid triggering a recursive search for the
  last path component.
- Use **Filter** or **Include** parameters to specify wildcard or literal patterns that should be
  searched for in every level of the target directory's hierarchy.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get child items from a file system directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the child items from a file system directory. The filenames and subdirectory
names are displayed. For empty locations, the command doesn't return any output and returns to the
PowerShell prompt.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify the directory `C:\Test`.
`Get-ChildItem` displays the files and directories in the PowerShell console.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Test
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   Directory: C:\Test</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/15/2019     08:29                Logs
-a----        2/13/2019     08:55             26 anotherfile.txt
-a----        2/12/2019     15:40         118014 Command.txt
-a----         2/1/2019     08:43            183 CreateTestFile.ps1
-ar---        2/12/2019     14:31             27 ReadOnlyFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>By default `Get-ChildItem` lists the mode (**Attributes**), **LastWriteTime**, file size
(**Length**), and the **Name** of the item. The letters in the **Mode** property can be interpreted
as follows:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- `l` (link)
- `d` (directory)
- `a` (archive)
- `r` (read-only)
- `h` (hidden)
- `s` (system)</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about the mode flags, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md#attributes-flagsexpression).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get child item names in a directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example lists only the names of items in a directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify the directory `C:\Test`. The
**Name** parameter returns only the file or directory names from the specified path. The names
returned are relative to the value of the **Path** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Test -Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Logs
anotherfile.txt
Command.txt
CreateTestFile.ps1
ReadOnlyFile.txt
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get child items in the current directory and subdirectories ---------</maml:title>
        <maml:introduction>
          <maml:para>This example displays `.txt` files that are located in the current directory and its
subdirectories.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path .\*.txt -Recurse -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Test\Logs\Adirectory</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/12/2019     16:16             20 Afile4.txt
-a-h--        2/12/2019     15:52             22 hiddenfile.txt
-a----        2/13/2019     13:26             20 LogFile4.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Test\Logs\Backup</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/12/2019     16:16             20 ATextFile.txt
-a----        2/12/2019     15:50             20 LogFile3.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Test\Logs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/12/2019     16:16             20 Afile.txt
-a-h--        2/12/2019     15:52             22 hiddenfile.txt
-a----        2/13/2019     13:26             20 LogFile1.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Test</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/13/2019     08:55             26 anotherfile.txt
-a----        2/12/2019     15:40         118014 Command.txt
-a-h--        2/12/2019     15:52             22 hiddenfile.txt
-ar---        2/12/2019     14:31             27 ReadOnlyFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify `C:\Test\*.txt`. **Path** uses the
asterisk (`*`) wildcard to specify all files with the filename extension `.txt`. The **Recurse**
parameter searches the **Path** directory and its subdirectories, as shown in the **Directory:**
headings. The **Force** parameter displays hidden files such as `hiddenfile.txt` that have a mode of
**h**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get child items using the Include parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example `Get-ChildItem` uses the **Include** parameter to find specific items from the
directory specified by the **Path** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# When using the -Include parameter, if you don't include an asterisk in the path
# the command returns no output.
Get-ChildItem -Path C:\Test\ -Include *.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Test\* -Include *.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Test</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/13/2019     08:55             26 anotherfile.txt
-a----        2/12/2019     15:40         118014 Command.txt
-ar---        2/12/2019     14:31             27 ReadOnlyFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify the directory `C:\Test`. The
**Path** parameter includes a trailing asterisk (`*`) wildcard to specify the directory's contents.
The **Include** parameter uses an asterisk (`*`) wildcard to specify all files with the file name
extension `.txt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When the **Include** parameter is used, the **Path** parameter needs a trailing asterisk (`*`)
wildcard to specify the directory's contents. For example, `-Path C:\Test\*`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- If the **Recurse** parameter is added to the command, the trailing asterisk (`*`) in the **Path**
  parameter is optional. The **Recurse** parameter gets items from the **Path** directory and its
  subdirectories. For example, `-Path C:\Test\ -Recurse -Include *.txt`
- If a trailing asterisk (`*`) isn't included in the **Path** parameter, the command doesn't return
  any output and returns to the PowerShell prompt. For example, `-Path C:\Test\`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Get child items using the Exclude parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>The example's output shows the contents of the directory `C:\Test\Logs`. The output is a reference
for the other commands that use the **Exclude** and **Recurse** parameters.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Test\Logs
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Test\Logs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/15/2019     13:21                Adirectory
d-----        2/15/2019     08:28                AnEmptyDirectory
d-----        2/15/2019     13:21                Backup
-a----        2/12/2019     16:16             20 Afile.txt
-a----        2/13/2019     13:26             20 LogFile1.txt
-a----        2/12/2019     16:24             23 systemlog1.log
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Test\Logs\* -Exclude A*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Test\Logs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/15/2019     13:21                Backup
-a----        2/13/2019     13:26             20 LogFile1.txt
-a----        2/12/2019     16:24             23 systemlog1.log
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify the directory `C:\Test\Logs`. The
**Exclude** parameter uses the asterisk (`*`) wildcard to specify any files or directories that
begin with `A` or `a` are excluded from the output.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When the **Exclude** parameter is used, a trailing asterisk (`*`) in the **Path** parameter is
optional. For example, `-Path C:\Test\Logs` or `-Path C:\Test\Logs\*`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- If a trailing asterisk (`*`) isn't included in the **Path** parameter, the contents of the
  **Path** parameter are displayed. The exceptions are filenames or subdirectory names that match
  the **Exclude** parameter's value.
- If a trailing asterisk (`*`) is included in the **Path** parameter, the command recurses into the
  **Path** parameter's subdirectories. The exceptions are filenames or subdirectory names that match
  the **Exclude** parameter's value.
- If the **Recurse** parameter is added to the command, the recursion output is the same whether or
  not the **Path** parameter includes a trailing asterisk (`*`).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Get the registry keys from a registry hive ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets all the registry keys from `HKEY_LOCAL_MACHINE\HARDWARE`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-ChildItem` uses the **Path** parameter to specify the registry key `HKLM:\HARDWARE`. The hive's
path and top level of registry keys are displayed in the PowerShell console.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information, see
[about_Registry_Provider](../Microsoft.PowerShell.Core/About/about_Registry_Provider.md).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path HKLM:\HARDWARE
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Hive: HKEY_LOCAL_MACHINE\HARDWARE</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name             Property
----             --------
ACPI
DESCRIPTION
DEVICEMAP
RESOURCEMAP
UEFI
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path HKLM:\HARDWARE -Exclude D*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   Hive: HKEY_LOCAL_MACHINE\HARDWARE</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name                           Property
----                           --------
ACPI
RESOURCEMAP
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command shows the contents of the `HKLM:\HARDWARE` registry key. The **Exclude** parameter
tells `Get-ChildItem` not to return any subkeys that start with `D*`. Currently, the **Exclude**
parameter only works on subkeys, not item properties.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Get all certificates with code-signing authority ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets each certificate in the PowerShell `Cert:` drive that has code-signing authority.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify the Certificate provider with the
`Cert:` drive. The **Recurse** parameter searches the directory specified by **Path** and its
subdirectories. The **CodeSigningCert** parameter gets only certificates that have code-signing
authority.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path Cert:\* -Recurse -CodeSigningCert
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about the Certificate provider and the `Cert:` drive, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Get items using the Depth parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>This example displays the items in a directory and its subdirectories. The **Depth** parameter
determines the number of subdirectory levels to include in the recursion. Empty directories are
excluded from the output.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Parent -Depth 2
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Parent</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/14/2019     10:24                SubDir_Level1
-a----        2/13/2019     08:55             26 file.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Parent\SubDir_Level1</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/14/2019     10:24                SubDir_Level2
-a----        2/13/2019     08:55             26 file.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Parent\SubDir_Level1\SubDir_Level2</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        2/14/2019     10:22                SubDir_Level3
-a----        2/13/2019     08:55             26 file.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to specify `C:\Parent`. The **Depth**
parameter specifies two levels of recursion. `Get-ChildItem` displays the contents of the directory
specified by the **Path** parameter and the two levels of subdirectories.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Getting hard link information ---------</maml:title>
        <maml:introduction>
          <maml:para>In PowerShell 6.2, an alternate view was added to get hard link information.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\PathContainingHardLink | Format-Table -View childrenWithHardLink
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 10: Output for Non-Windows Operating Systems ---------</maml:title>
        <maml:introduction>
          <maml:para>In PowerShell 7.1 on Unix systems, the `Get-ChildItem` provides Unix-like output:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Get-ChildItem /etc/r*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: /etc</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>UnixMode   User Group    LastWriteTime Size Name
--------   ---- -----    ------------- ---- ----
drwxr-xr-x root wheel  9/30/2019 19:19  128 racoon
-rw-r--r-- root wheel  9/26/2019 18:20 1560 rc.common
-rw-r--r-- root wheel  7/31/2017 17:30 1560 rc.common~previous
-rw-r--r-- root wheel  9/27/2019 20:34 5264 rc.netboot
lrwxr-xr-x root wheel  11/8/2019 15:35   22 resolv.conf -&gt; /private/var/run/resolv.conf
-rw-r--r-- root wheel 10/23/2019 17:41    0 rmtab
-rw-r--r-- root wheel 10/23/2019 17:41 1735 rpc
-rw-r--r-- root wheel  7/25/2017 18:37 1735 rpc~previous
-rw-r--r-- root wheel 10/23/2019 18:42  891 rtadvd.conf
-rw-r--r-- root wheel  8/24/2017 21:54  891 rtadvd.conf~previous
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The new properties that are now part of the output are:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- **UnixMode** is the file permissions as represented on a Unix system
- **User** is the file owner
- **Group** is the group owner
- **Size** is the size of the file or directory as represented on a Unix system</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This feature was moved from experimental to mainstream in PowerShell 7.1.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 11: Get the link target for a junction point ---------</maml:title>
        <maml:introduction>
          <maml:para>The `dir` command in the Windows Command Shell shows the target location of a filesystem junction
point. In PowerShell, this information is available from the **LinkTarget** property of the
filesystem object returned by `Get-ChildItem` and is displayed in the default output.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS D:\&gt; New-Item -ItemType Junction -Name tmp -Target $Env:TEMP
PS D:\&gt; Get-ChildItem | Select-Object Name, LinkTarget</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name     LinkTarget
----     ----------
tmp      C:\Users\user1\AppData\Local\Temp</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS D:\&gt; Get-ChildItem</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: D:\</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode          LastWriteTime    Length Name
----          -------------    ------ ----
l----   12/16/2021  9:29 AM           tmp -&gt; C:\Users\user1\AppData\Local\Temp
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 12: Get the link target for an AppX reparse point ---------</maml:title>
        <maml:introduction>
          <maml:para>This example attempts to get the target information for an AppX reparse point. Microsoft Store
applications create AppX reparse points in the user's AppData directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem ~\AppData\Local\Microsoft\WindowsApps\MicrosoftEdge.exe |
    Select-Object Mode, LinkTarget, LinkType, Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Mode  LinkTarget LinkType Name
----  ---------- -------- ----
la---                     MicrosoftEdge.exe
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>At this time, Windows doesn't provide a way to get the target information for an AppX reparse point.
The **LinkTarget** and **LinkType** properties of the filesystem object are empty.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Certificate_Provider</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Quoting_Rules</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Registry_Provider</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Registry_Provider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ForEach-Object</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/ForEach-Object.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Alias</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Utility/Get-Alias.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Location</maml:linkText>
        <command:uri>Get-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-Path</maml:linkText>
        <command:uri>Split-Path.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Clipboard</command:name>
      <maml:description>
        <maml:para>Gets the contents of the clipboard.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Clipboard</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-Clipboard` cmdlet gets the contents of the clipboard as text. Multiple lines of text are returned as an array of strings similar to `Get-Content`.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; On Linux, this cmdlet requires the `xclip` utility to be in the path. On macOS, this cmdlet uses &gt; the `pbpaste` utility.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Clipboard</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Raw</maml:name>
          <maml:description>
            <maml:para>Gets the entire contents of the clipboard. Multiline text is returned as a single multiline string
rather than an array of strings.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Raw</maml:name>
        <maml:description>
          <maml:para>Gets the entire contents of the clipboard. Multiline text is returned as a single multiline string
rather than an array of strings.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a string containing the contents of the clipboard.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Clipboard`:

- All platforms:
  - `gcb`

Support for this cmdlet on macOS was added in the PowerShell 7.0.0 release.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the content of the clipboard and display it to the command-line ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example we have copied the text "hello" into the clipboard.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
hello
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-clipboard?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Clipboard</maml:linkText>
        <command:uri>Set-Clipboard.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ComputerInfo</command:name>
      <maml:description>
        <maml:para>Gets a consolidated object of system and operating system properties.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ComputerInfo</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Get-ComputerInfo` cmdlet gets a consolidated object of system and operating system properties. This cmdlet was introduced in Windows PowerShell 5.1.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ComputerInfo</maml:name>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Property</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the computer properties in which this cmdlet displays.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Property</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the computer properties in which this cmdlet displays.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string containing the name of a property to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Management.ComputerInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a **ComputerInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-ComputerInfo`:

- Windows:
  - `gin`

This cmdlet is only available on Windows platforms.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get all computer properties ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets all system and operating system properties from the computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ComputerInfo
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get all computer version properties ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets all version properties from the computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ComputerInfo -Property "*version"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
WindowsCurrentVersion              : 6.3
WindowsVersion                     : 2009
BiosBIOSVersion                    : {LENOVO - 1380, N1FET64W (1.38 ), Lenovo - 1380}
BiosEmbeddedControllerMajorVersion : 1
BiosEmbeddedControllerMinorVersion : 17
BiosSMBIOSBIOSVersion              : N1FET64W (1.38 )
BiosSMBIOSMajorVersion             : 2
BiosSMBIOSMinorVersion             : 8
BiosSystemBiosMajorVersion         : 1
BiosSystemBiosMinorVersion         : 38
BiosVersion                        : LENOVO - 1380
OsVersion                          : 10.0.19043
OsCSDVersion                       :
OsServicePackMajorVersion          : 0
OsServicePackMinorVersion          : 0
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-computerinfo?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Content</command:name>
      <maml:description>
        <maml:para>Gets the content of the item at the specified location.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Content</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-Content` cmdlet gets the content of the item at the location specified by the path, such as the text in a file or the content of a function. For files, the content is read one line at a time and returns a collection of objects, each representing a line of content.</maml:para>
      <maml:para>Beginning in PowerShell 3.0, `Get-Content` can also get a specified number of lines from the beginning or end of an item.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>Specifies that the content should be read as a stream of bytes. The **AsByteStream** parameter was
introduced in Windows PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
            <maml:para>When reading from and writing to binary files, use the **AsByteStream** parameter and a value of 0
for the **ReadCount** parameter. A **ReadCount** value of 0 reads the entire file in a single read
operation. The default **ReadCount** value, 1, reads one byte in each read operation and converts
each byte into a separate object. Piping single-byte output to `Set-Content` causes errors unless
you use the **AsByteStream** parameter with `Set-Content`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delimiter</maml:name>
          <maml:description>
            <maml:para>Specifies the delimiter that `Get-Content` uses to divide the file into objects while it reads. The
default is `\n`, the end-of-line character. When reading a text file, `Get-Content` returns a
collection of string objects, each ending with an end-of-line character. When you enter a delimiter
that doesn't exist in the file, `Get-Content` returns the entire file as a single, undelimited
object.</maml:para>
            <maml:para>You can use this parameter to split a large file into smaller files by specifying a file separator,
as the delimiter. The delimiter is preserved (not discarded) and becomes the last item in each file
section.</maml:para>
            <maml:para>**Delimiter** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content`
cmdlet. This parameter works only in file system drives.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Currently, when the value of the **Delimiter** parameter is an empty string, `Get-Content` does
&gt; not return anything. This is a known issue. To force `Get-Content` to return the entire file as
&gt; a single, undelimited string. Enter a value that doesn't exist in the file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter is available only in file system drives.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation.
The value of this parameter qualifies the **Path** parameter.</maml:para>
            <maml:para>Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
            <maml:para>The **Exclude** parameter is effective only when the command includes the contents of an item,
such as `C:\Windows\*`, where the wildcard character specifies the contents of the `C:\Windows`
directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>**Force** can override a read-only attribute or create directories to complete a file path. The
**Force** parameter doesn't attempt to change file permissions or override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to an item where `Get-Content` gets the content. Wildcard characters are
permitted. The paths must be paths to items, not to containers. For example, you must specify a path
to one or more files, not a path to a directory.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Raw</maml:name>
          <maml:description>
            <maml:para>Ignores newline characters and returns the entire contents of a file in one string with the newlines
preserved. By default, newline characters in a file are used as delimiters to separate the input
into an array of strings. This parameter was introduced in PowerShell 3.0.</maml:para>
            <maml:para>**Raw** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet
This parameter works only in file system drives.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReadCount</maml:name>
          <maml:description>
            <maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value is 1.
A value of 0 (zero) or negative numbers sends all the content at one time.</maml:para>
            <maml:para>This parameter doesn't change the content displayed, but it does affect the time it takes to
display the content. As the value of **ReadCount** increases, the time it takes to return the first
line increases, but the total time for the operation decreases. This can make a perceptible
difference in large items.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
            <maml:para>Gets the contents of the specified alternate NTFS file stream from the file. Enter the stream name.
Wildcards aren't supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter works only in file system drives on Windows systems.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. In PowerShell 7.2, `Get-Content` can
retrieve the content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tail</maml:name>
          <maml:description>
            <maml:para>Specifies the number of lines from the end of a file or other item. You can use the **Tail**
parameter name or its alias, **Last**. A value of `0` returns no lines. Negative values cause an
error.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TotalCount</maml:name>
          <maml:description>
            <maml:para>Specifies the number of lines from the beginning of a file or other item. A value of `0` returns no
lines. Negative values cause an error.</maml:para>
            <maml:para>You can use the **TotalCount** parameter name or its aliases, **First** or **Head**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Wait</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to wait indefinitely, keeping the file open, until interrupted. While waiting,
`Get-Content` checks the file once per second and outputs new lines if present. When used with the
**TotalCount** parameter, `Get-Content` waits until the specified number of lines are available in
the specified file. For example, if you specify a **TotalCount** of 10 and the file already has 10
or more lines, `Get-Content` returns the 10 lines and exits. If the file has fewer than 10 lines,
`Get-Content` outputs each line as it arrives, but waits until the tenth line arrives before
exiting.</maml:para>
            <maml:para>You can interrupt **Wait** by pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Deleting the file causes a
non-terminating error that also interrupts the waiting.</maml:para>
            <maml:para>**Wait** is a dynamic parameter that the FileSystem provider adds to the `Get-Content` cmdlet. This
parameter works only in file system drives. **Wait** can't be combined with **Raw**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>Specifies that the content should be read as a stream of bytes. The **AsByteStream** parameter was
introduced in Windows PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
            <maml:para>When reading from and writing to binary files, use the **AsByteStream** parameter and a value of 0
for the **ReadCount** parameter. A **ReadCount** value of 0 reads the entire file in a single read
operation. The default **ReadCount** value, 1, reads one byte in each read operation and converts
each byte into a separate object. Piping single-byte output to `Set-Content` causes errors unless
you use the **AsByteStream** parameter with `Set-Content`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delimiter</maml:name>
          <maml:description>
            <maml:para>Specifies the delimiter that `Get-Content` uses to divide the file into objects while it reads. The
default is `\n`, the end-of-line character. When reading a text file, `Get-Content` returns a
collection of string objects, each ending with an end-of-line character. When you enter a delimiter
that doesn't exist in the file, `Get-Content` returns the entire file as a single, undelimited
object.</maml:para>
            <maml:para>You can use this parameter to split a large file into smaller files by specifying a file separator,
as the delimiter. The delimiter is preserved (not discarded) and becomes the last item in each file
section.</maml:para>
            <maml:para>**Delimiter** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content`
cmdlet. This parameter works only in file system drives.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Currently, when the value of the **Delimiter** parameter is an empty string, `Get-Content` does
&gt; not return anything. This is a known issue. To force `Get-Content` to return the entire file as
&gt; a single, undelimited string. Enter a value that doesn't exist in the file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter is available only in file system drives.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation.
The value of this parameter qualifies the **Path** parameter.</maml:para>
            <maml:para>Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
            <maml:para>The **Exclude** parameter is effective only when the command includes the contents of an item,
such as `C:\Windows\*`, where the wildcard character specifies the contents of the `C:\Windows`
directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>**Force** can override a read-only attribute or create directories to complete a file path. The
**Force** parameter doesn't attempt to change file permissions or override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Raw</maml:name>
          <maml:description>
            <maml:para>Ignores newline characters and returns the entire contents of a file in one string with the newlines
preserved. By default, newline characters in a file are used as delimiters to separate the input
into an array of strings. This parameter was introduced in PowerShell 3.0.</maml:para>
            <maml:para>**Raw** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet
This parameter works only in file system drives.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReadCount</maml:name>
          <maml:description>
            <maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value is 1.
A value of 0 (zero) or negative numbers sends all the content at one time.</maml:para>
            <maml:para>This parameter doesn't change the content displayed, but it does affect the time it takes to
display the content. As the value of **ReadCount** increases, the time it takes to return the first
line increases, but the total time for the operation decreases. This can make a perceptible
difference in large items.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
            <maml:para>Gets the contents of the specified alternate NTFS file stream from the file. Enter the stream name.
Wildcards aren't supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter works only in file system drives on Windows systems.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. In PowerShell 7.2, `Get-Content` can
retrieve the content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tail</maml:name>
          <maml:description>
            <maml:para>Specifies the number of lines from the end of a file or other item. You can use the **Tail**
parameter name or its alias, **Last**. A value of `0` returns no lines. Negative values cause an
error.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TotalCount</maml:name>
          <maml:description>
            <maml:para>Specifies the number of lines from the beginning of a file or other item. A value of `0` returns no
lines. Negative values cause an error.</maml:para>
            <maml:para>You can use the **TotalCount** parameter name or its aliases, **First** or **Head**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Wait</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to wait indefinitely, keeping the file open, until interrupted. While waiting,
`Get-Content` checks the file once per second and outputs new lines if present. When used with the
**TotalCount** parameter, `Get-Content` waits until the specified number of lines are available in
the specified file. For example, if you specify a **TotalCount** of 10 and the file already has 10
or more lines, `Get-Content` returns the 10 lines and exits. If the file has fewer than 10 lines,
`Get-Content` outputs each line as it arrives, but waits until the tenth line arrives before
exiting.</maml:para>
            <maml:para>You can interrupt **Wait** by pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Deleting the file causes a
non-terminating error that also interrupts the waiting.</maml:para>
            <maml:para>**Wait** is a dynamic parameter that the FileSystem provider adds to the `Get-Content` cmdlet. This
parameter works only in file system drives. **Wait** can't be combined with **Raw**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsByteStream</maml:name>
        <maml:description>
          <maml:para>Specifies that the content should be read as a stream of bytes. The **AsByteStream** parameter was
introduced in Windows PowerShell 6.0.</maml:para>
          <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.</maml:para>
          <maml:para>When reading from and writing to binary files, use the **AsByteStream** parameter and a value of 0
for the **ReadCount** parameter. A **ReadCount** value of 0 reads the entire file in a single read
operation. The default **ReadCount** value, 1, reads one byte in each read operation and converts
each byte into a separate object. Piping single-byte output to `Set-Content` causes errors unless
you use the **AsByteStream** parameter with `Set-Content`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Delimiter</maml:name>
        <maml:description>
          <maml:para>Specifies the delimiter that `Get-Content` uses to divide the file into objects while it reads. The
default is `\n`, the end-of-line character. When reading a text file, `Get-Content` returns a
collection of string objects, each ending with an end-of-line character. When you enter a delimiter
that doesn't exist in the file, `Get-Content` returns the entire file as a single, undelimited
object.</maml:para>
          <maml:para>You can use this parameter to split a large file into smaller files by specifying a file separator,
as the delimiter. The delimiter is preserved (not discarded) and becomes the last item in each file
section.</maml:para>
          <maml:para>**Delimiter** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content`
cmdlet. This parameter works only in file system drives.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; Currently, when the value of the **Delimiter** parameter is an empty string, `Get-Content` does
&gt; not return anything. This is a known issue. To force `Get-Content` to return the entire file as
&gt; a single, undelimited string. Enter a value that doesn't exist in the file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Encoding</maml:name>
        <maml:description>
          <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
          <maml:para>The acceptable values for this parameter are as follows:</maml:para>
          <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
          <maml:para>Encoding is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter is available only in file system drives.</maml:para>
          <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](xref:System.Text.Encoding.CodePage%2A).</maml:para>
          <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation.
The value of this parameter qualifies the **Path** parameter.</maml:para>
          <maml:para>Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          <maml:para>The **Exclude** parameter is effective only when the command includes the contents of an item,
such as `C:\Windows\*`, where the wildcard character specifies the contents of the `C:\Windows`
directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>**Force** can override a read-only attribute or create directories to complete a file path. The
**Force** parameter doesn't attempt to change file permissions or override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to an item where `Get-Content` gets the content. Wildcard characters are
permitted. The paths must be paths to items, not to containers. For example, you must specify a path
to one or more files, not a path to a directory.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Raw</maml:name>
        <maml:description>
          <maml:para>Ignores newline characters and returns the entire contents of a file in one string with the newlines
preserved. By default, newline characters in a file are used as delimiters to separate the input
into an array of strings. This parameter was introduced in PowerShell 3.0.</maml:para>
          <maml:para>**Raw** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet
This parameter works only in file system drives.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReadCount</maml:name>
        <maml:description>
          <maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value is 1.
A value of 0 (zero) or negative numbers sends all the content at one time.</maml:para>
          <maml:para>This parameter doesn't change the content displayed, but it does affect the time it takes to
display the content. As the value of **ReadCount** increases, the time it takes to return the first
line increases, but the total time for the operation decreases. This can make a perceptible
difference in large items.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This Parameter is only available on Windows.</maml:para>
          <maml:para>Gets the contents of the specified alternate NTFS file stream from the file. Enter the stream name.
Wildcards aren't supported.</maml:para>
          <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Content` cmdlet.
This parameter works only in file system drives on Windows systems.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0. In PowerShell 7.2, `Get-Content` can
retrieve the content of alternative data streams from directories as well as files.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tail</maml:name>
        <maml:description>
          <maml:para>Specifies the number of lines from the end of a file or other item. You can use the **Tail**
parameter name or its alias, **Last**. A value of `0` returns no lines. Negative values cause an
error.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>TotalCount</maml:name>
        <maml:description>
          <maml:para>Specifies the number of lines from the beginning of a file or other item. A value of `0` returns no
lines. Negative values cause an error.</maml:para>
          <maml:para>You can use the **TotalCount** parameter name or its aliases, **First** or **Head**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int64</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Wait</maml:name>
        <maml:description>
          <maml:para>Causes the cmdlet to wait indefinitely, keeping the file open, until interrupted. While waiting,
`Get-Content` checks the file once per second and outputs new lines if present. When used with the
**TotalCount** parameter, `Get-Content` waits until the specified number of lines are available in
the specified file. For example, if you specify a **TotalCount** of 10 and the file already has 10
or more lines, `Get-Content` returns the 10 lines and exits. If the file has fewer than 10 lines,
`Get-Content` outputs each line as it arrives, but waits until the tenth line arrives before
exiting.</maml:para>
          <maml:para>You can interrupt **Wait** by pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Deleting the file causes a
non-terminating error that also interrupts the waiting.</maml:para>
          <maml:para>**Wait** is a dynamic parameter that the FileSystem provider adds to the `Get-Content` cmdlet. This
parameter works only in file system drives. **Wait** can't be combined with **Raw**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Int64</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe the read count or total count to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe paths to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSCredential</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe credentials to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Byte</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **AsByteStream** parameter, this cmdlet returns the content as bytes.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns the content as an array of strings, one per line. When you use the
**Raw** parameter, it returns a single string containing every line in the file.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Content`:

- All platforms:
  - `gc`
  - `type`
- Windows:
  - `cat`

The `Get-Content` cmdlet is designed to work with the data exposed by any provider. To get the
providers in your session, use the `Get-PSProvider` cmdlet. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the content of a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the content of a file in the current directory. The `LineNumbers.txt` file
has 100 lines in the format, **This is Line X** and is used in several examples.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
1..100 | ForEach-Object {
    Add-Content -Path .\LineNumbers.txt -Value "This is line $_."
}
Get-Content -Path .\LineNumbers.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is Line 1
This is Line 2
...
This is line 99.
This is line 100.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The array values 1-100 are sent down the pipeline to the `ForEach-Object` cmdlet. `ForEach-Object`
uses a script block with the `Add-Content` cmdlet to create the `LineNumbers.txt` file. The variable
`$_` represents the array values as each object is sent down the pipeline. The `Get-Content` cmdlet
uses the **Path** parameter to specify the `LineNumbers.txt` file and displays the content in the
PowerShell console.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Limit the number of lines Get-Content returns ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the first five lines of a file. The **TotalCount** parameter gets the first five
lines of content. This example uses the `LineNumbers.txt` referenced in Example 1.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content -Path .\LineNumbers.txt -TotalCount 5
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is Line 1
This is Line 2
This is Line 3
This is Line 4
This is Line 5
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get a specific line of content from a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets a specific number of lines from a file and then displays only the last line of
that content. The **TotalCount** parameter gets the first 25 lines of content. This example uses the
`LineNumbers.txt` file referenced in Example 1.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
(Get-Content -Path .\LineNumbers.txt -TotalCount 25)[-1]
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is Line 25
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Content` command is wrapped in parentheses so that the command completes before going to
the next step. `Get-Content`returns an array of lines, this allows you to add the index notation
after the parenthesis to retrieve a specific line number. In this case, the `[-1]` index specifies
the last index in the returned array of 25 retrieved lines.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get the last line of a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the last line of content from a file. This example uses the `LineNumbers.txt` file
that was created in Example 1.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item -Path .\LineNumbers.txt | Get-Content -Tail 1
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is Line 100
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example uses the `Get-Item` cmdlet to demonstrate that you can pipe files to `Get-Content`. The
**Tail** parameter gets the last line of the file. This method is faster than retrieving all the
lines in a variable and using the `[-1]` index notation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Get the content of an alternate data stream ---------</maml:title>
        <maml:introduction>
          <maml:para>This example describes how to use the **Stream** parameter to get the content of an alternate data
stream for files stored on a Windows NTFS volume. In this example, the `Set-Content` cmdlet is used
to create sample content in a file named `Stream.txt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Content -Path .\Stream.txt -Value 'This is the content of the Stream.txt file'
# Specify a wildcard to the Stream parameter to display all streams of the recently
# created file.
Get-Item -Path .\Stream.txt -Stream *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
PSPath        : Microsoft.PowerShell.Core\FileSystem::C:\Test\Stream.txt::$DATA
PSParentPath  : Microsoft.PowerShell.Core\FileSystem::C:\Test
PSChildName   : Stream.txt::$DATA
PSDrive       : C
PSProvider    : Microsoft.PowerShell.Core\FileSystem
PSIsContainer : False
FileName      : C:\Test\Stream.txt
Stream        : :$DATA
Length        : 44
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Retrieve the content of the primary stream.
# Note the single quotes to prevent variable substitution.
Get-Content -Path .\Stream.txt -Stream ':$DATA'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is the content of the Stream.txt file
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Alternative way to get the same content.
Get-Content -Path .\Stream.txt -Stream ""
# The primary stream doesn't need to be specified to get the primary stream of the file.
# This gets the same data as the prior two examples.
Get-Content -Path .\Stream.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
This is the content of the Stream.txt file
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Use the Stream parameter of Add-Content to create a new Stream containing sample
# content.
$addContentSplat = @{
    Path = '.\Stream.txt'
    Stream = 'NewStream'
    Value = 'Added a stream named NewStream to Stream.txt'
}
Add-Content @addContentSplat</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Use Get-Item to verify the stream was created.
Get-Item -Path .\Stream.txt -Stream *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
PSPath        : Microsoft.PowerShell.Core\FileSystem::C:\Test\Stream.txt::$DATA
PSParentPath  : Microsoft.PowerShell.Core\FileSystem::C:\Test
PSChildName   : Stream.txt::$DATA
PSDrive       : C
PSProvider    : Microsoft.PowerShell.Core\FileSystem
PSIsContainer : False
FileName      : C:\Test\Stream.txt
Stream        : :$DATA
Length        : 44</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PSPath        : Microsoft.PowerShell.Core\FileSystem::C:\Test\Stream.txt:NewStream
PSParentPath  : Microsoft.PowerShell.Core\FileSystem::C:\Test
PSChildName   : Stream.txt:NewStream
PSDrive       : C
PSProvider    : Microsoft.PowerShell.Core\FileSystem
PSIsContainer : False
FileName      : C:\Test\Stream.txt
Stream        : NewStream
Length        : 46
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Retrieve the content of your newly created Stream.
Get-Content -Path .\Stream.txt -Stream NewStream
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Added a stream named NewStream to Stream.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Stream** parameter is a dynamic parameter of the
[FileSystem provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md#stream-string).
By default `Get-Content` only retrieves data from the default, or `:$DATA` stream. **Streams** can
be used to store hidden data such as attributes, security settings, or other data. They can also be
stored on directories without being child items.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Get raw content ---------</maml:title>
        <maml:introduction>
          <maml:para>The commands in this example get the contents of a file as one string, instead of an array of
strings. By default, without the **Raw** dynamic parameter, content is returned as an array of
newline-delimited strings. This example uses the `LineNumbers.txt` file referenced in Example 1.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$raw = Get-Content -Path .\LineNumbers.txt -Raw
$lines = Get-Content -Path .\LineNumbers.txt
Write-Host "Raw contains $($raw.Count) lines."
Write-Host "Lines contains $($lines.Count) lines."
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Raw contains 1 lines.
Lines contains 100 lines.
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Use Filters with Get-Content ---------</maml:title>
        <maml:introduction>
          <maml:para>You can specify a filter to the `Get-Content` cmdlet. When using filters to qualify the **Path**
parameter, you need to include a trailing asterisk (`*`) to indicate the contents of the
path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The following command gets the content of all `*.log` files in the `C:\Temp` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content -Path C:\Temp\* -Filter *.log
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Get file contents as a byte array ---------</maml:title>
        <maml:introduction>
          <maml:para>This example demonstrates how to get the contents of a file as a `[byte[]]` as a single object.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$byteArray = Get-Content -Path C:\temp\test.txt -AsByteStream -Raw
Get-Member -InputObject $byteArray
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   TypeName: System.Byte[]</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name           MemberType            Definition
----           ----------            ----------
Count          AliasProperty         Count = Length
Add            Method                int IList.Add(System.Object value)
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses the **AsByteStream** parameter to get the stream of bytes from the file. The
**Raw** parameter ensures that the bytes are returned as a `[System.Byte[]]`. If the **Raw**
parameter was absent, the return value is a stream of bytes, which is interpreted by PowerShell as
`[System.Object[]]`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-content?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Automatic_Variables</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-Content</maml:linkText>
        <command:uri>Add-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Content</maml:linkText>
        <command:uri>Clear-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ForEach-Object</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/ForEach-Object.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Content</maml:linkText>
        <command:uri>Set-Content.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-HotFix</command:name>
      <maml:description>
        <maml:para>Gets the hotfixes that are installed on local or remote computers.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>HotFix</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Get-HotFix` cmdlet uses the **Win32_QuickFixEngineering** WMI class to list hotfixes that are installed on the local computer or specified remote computers.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-HotFix</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies a remote computer. Type the NetBIOS name, an Internet Protocol (IP) address, or a fully
qualified domain name (FQDN) of a remote computer.</maml:para>
            <maml:para>When the **ComputerName** parameter isn't specified, `Get-HotFix` runs on the local computer.</maml:para>
            <maml:para>The **ComputerName** parameter doesn't rely on Windows PowerShell remoting. If your computer isn't
configured to run remote commands, use the **ComputerName** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to access the computer and run commands. The default is
the current user</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Filters the `Get-HotFix` results for specific hotfix Ids. Wildcards aren't accepted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-HotFix</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies a remote computer. Type the NetBIOS name, an Internet Protocol (IP) address, or a fully
qualified domain name (FQDN) of a remote computer.</maml:para>
            <maml:para>When the **ComputerName** parameter isn't specified, `Get-HotFix` runs on the local computer.</maml:para>
            <maml:para>The **ComputerName** parameter doesn't rely on Windows PowerShell remoting. If your computer isn't
configured to run remote commands, use the **ComputerName** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to access the computer and run commands. The default is
the current user</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Specifies a remote computer. Type the NetBIOS name, an Internet Protocol (IP) address, or a fully
qualified domain name (FQDN) of a remote computer.</maml:para>
          <maml:para>When the **ComputerName** parameter isn't specified, `Get-HotFix` runs on the local computer.</maml:para>
          <maml:para>The **ComputerName** parameter doesn't rely on Windows PowerShell remoting. If your computer isn't
configured to run remote commands, use the **ComputerName** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to access the computer and run commands. The default is
the current user</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>`Get-HotFix` uses the **Description** parameter to specify hotfix types. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Filters the `Get-HotFix` results for specific hotfix Ids. Wildcards aren't accepted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string containing a computer name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.ManagementObject#root\cimv2\Win32_QuickFixEngineering</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns objects representing the hotfixes on the computer.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

The **Win32_QuickFixEngineering** [WMI class](/windows/desktop/WmiSdk/retrieving-a-class) represents
a small system-wide update, commonly referred to as a quick-fix engineering (QFE) update, applied to
the current operating system. This class returns only the updates supplied by Component Based
Servicing (CBS). These updates aren't listed in the registry. Updates supplied by Microsoft Windows
Installer (MSI) or the [Windows Update](https://www.catalog.update.microsoft.com/) site aren't
returned by **Win32_QuickFixEngineering**. For more information, see
[Win32_QuickFixEngineering class](/windows/desktop/CIMWin32Prov/win32-quickfixengineering).

The `Get-HotFix` output might vary on different operating systems.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get all hotfixes on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>The `Get-HotFix` cmdlet gets all hotfixes installed on the local computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-HotFix
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Source         Description      HotFixID      InstalledBy          InstalledOn
------         -----------      --------      -----------          -----------
Server01       Update           KB4495590     NT AUTHORITY\SYSTEM  5/16/2019 00:00:00
Server01       Security Update  KB4470788     NT AUTHORITY\SYSTEM  1/22/2019 00:00:00
Server01       Update           KB4480056     NT AUTHORITY\SYSTEM  1/24/2019 00:00:00
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get hotfixes from multiple computers filtered by a string ---------</maml:title>
        <maml:introduction>
          <maml:para>The `Get-HotFix` command uses parameters to get hotfixes installed on remote computers. The results
are filtered by a specified description string.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$hotFixParams = @{
    Description = "Security*"
    ComputerName = "Server01, Server02"
    Credential = "Domain01\admin01"
}
Get-HotFix @hotFixParams
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-HotFix` filters the output with the **Description** parameter and the string **Security** that
includes the asterisk (`*`) wildcard. The **ComputerName** parameter includes a comma-separated
string of remote computer names. The **Credential** parameter specifies a user account that has
permission to access the remote computers and run commands.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Verify if an update is installed and write computer names to a file ---------</maml:title>
        <maml:introduction>
          <maml:para>The commands in this example verify whether a particular update installed. If the update isn't
installed, the computer name is written to a text file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$A = Get-Content -Path ./Servers.txt
$A | ForEach-Object { if (!(Get-HotFix -Id KB957095 -ComputerName $_))
    { Add-Content $_ -Path ./Missing-KB957095.txt }}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `$A` variable contains computer names that were obtained by `Get-Content` from a text file. The
objects in `$A` are sent down the pipeline to `ForEach-Object`. An `if` statement uses the
`Get-HotFix` cmdlet with the **Id** parameter and a specific Id number for each computer name. If a
computer doesn't have the specified hotfix Id installed, the `Add-Content` cmdlet writes the
computer name to a file.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get the most recent hotfix on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the most recent hotfix installed on a computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
(Get-HotFix | Sort-Object -Property InstalledOn)[-1]
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-HotFix` sends the objects down the pipeline to the `Sort-Object` cmdlet. `Sort-Object` sorts
objects by ascending order and uses the **Property** parameter to evaluate each **InstalledOn**
date. The array notation `[-1]` selects the most recent installed hotfix.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-hotfix?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Arrays</maml:linkText>
        <command:uri>/powershell/module/microsoft.powershell.core/About/about_Arrays</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-Content</maml:linkText>
        <command:uri>Add-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Credential</maml:linkText>
        <command:uri>xref:Microsoft.PowerShell.Security.Get-Credential</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Win32_QuickFixEngineering class</maml:linkText>
        <command:uri>/windows/desktop/CIMWin32Prov/win32-quickfixengineering</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Item</command:name>
      <maml:description>
        <maml:para>Gets the item at the specified location.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-Item` cmdlet gets the item at the specified location. It doesn't get the contents of the item at the location unless you use a wildcard character (`*`) to request all the contents of the item.</maml:para>
      <maml:para>This cmdlet is used by PowerShell providers to navigate through different types of data stores.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CodeSigningCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DnsName</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DocumentEncryptionCert</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Eku</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ExpiringInDays</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
            <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SSLServerAuthentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
            <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
            <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>CodeSigningCert</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>To get certificates that have `Code Signing` in their **EnhancedKeyUsageList** property value, use
the **CodeSigningCert** parameter.</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DnsName</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>Specifies a domain name or name pattern to match with the **DNSNameList** property of certificates
the cmdlet gets. The value of this parameter can either be `Unicode` or `ASCII`. Punycode values
are converted to Unicode. Wildcard characters (`*`) are permitted.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.DnsNameRepresentation</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DocumentEncryptionCert</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>To get certificates that have `Document Encryption` in their **EnhancedKeyUsageList** property
value, use the **DocumentEncryptionCert** parameter.</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Eku</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>Specifies text or a text pattern to match with the **EnhancedKeyUsageList** property of
certificates the cmdlet gets. Wildcard characters (`*`) are permitted. The **EnhancedKeyUsageList**
property contains the friendly name and the OID fields of the EKU.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ExpiringInDays</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>Specifies that the cmdlet should only return certificates that are expiring in or before the
specified number of days. A value of zero (`0`) gets certificates that have expired.</maml:para>
          <maml:para>This parameter was reintroduced in PowerShell 7.1</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports filters. Filters are more efficient than other
parameters. The provider applies filter when the cmdlet gets the objects rather than having
PowerShell filter the objects after they're retrieved. The filter string is passed to the .NET API
to enumerate files. The API only supports `*` and `?` wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to an item. This cmdlet gets the item at the specified location. Wildcard
characters are permitted. This parameter is required, but the parameter name **Path** is optional.</maml:para>
          <maml:para>Use a dot (`.`) to specify the current location. Use the wildcard character (`*`) to specify all the
items in the current location.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SSLServerAuthentication</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. This parameter and the
**Certificate** provider are only available on Windows.</maml:para>
          <maml:para>To get certificates that have `Server Authentication` in their **EnhancedKeyUsageList** property
value, use the **SSLServerAuthentication** parameter.</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows.</maml:para>
          <maml:para>Gets the specified alternative data stream from the file. Enter the stream name. Wildcards are
supported. To get all streams, use an asterisk (`*`). This parameter is valid on directories, but
note that directories do not have data streams by default.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0.  As of PowerShell 7.2, `Get-Item` can get
alternative data streams from directories as well as files.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.AliasInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Alias:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.X509StoreLocation</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Security.Cryptography.X509Certificates.X509Store</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Security.Cryptography.X509Certificates.X509Certificate2</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `Cert:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.DictionaryEntry</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Env:` drive.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.DirectoryInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.FileInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the FileSystem drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.FunctionInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.FilterInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `Function:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Win32.RegistryKey</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the Registry drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSVariable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs this type when accessing the `Variable:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.WSMan.Management.WSManConfigContainerElement</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.WSMan.Management.WSManConfigLeafElement</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet outputs these types when accessing the `WSMan:` drives.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Item`:

- All platforms:
  - `gi`

This cmdlet does not have a **Recurse** parameter, because it gets only an item, not its contents.
To get the contents of an item recursively, use `Get-ChildItem`.

To navigate through the registry, use this cmdlet to get registry keys and the `Get-ItemProperty`
to get registry values and data. The registry values are considered to be properties of the
registry key.

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the current directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the current directory. The dot ('.') represents the item at the current location
(not its contents).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item .
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Directory: C:\</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----         7/26/2006  10:01 AM            ps-test
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get all the items in the current directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets all the items in the current directory. The wildcard character (`*`) represents
all the contents of the current item.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Directory: C:\ps-test</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----         7/26/2006   9:29 AM            Logs
d----         7/26/2006   9:26 AM            Recs
-a---         7/26/2006   9:28 AM         80 date.csv
-a---         7/26/2006  10:01 AM         30 filenoext
-a---         7/26/2006   9:30 AM      11472 process.doc
-a---         7/14/2006  10:47 AM         30 test.txt
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get the current directory of a drive ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the current directory of the `C:` drive. The object that is retrieved represents
only the directory, not its contents.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item C:
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get items in the specified drive ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the items in the `C:` drive. The wildcard character (`*`) represents all the items
in the container, not just the container.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item C:\*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In PowerShell, use a single asterisk (`*`) to get contents, instead of the traditional `*.*`. The
format is interpreted literally, so `*.*` wouldn't retrieve directories or filenames without a dot.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Get a property in the specified directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the **LastAccessTime** property of the `C:\Windows` directory. **LastAccessTime**
is just one property of file system directories. To see all the properties of a directory, type
`(Get-Item &lt;directory-name&gt;) | Get-Member`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
(Get-Item C:\Windows).LastAccessTime
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Show the contents of a registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows the contents of the **Microsoft.PowerShell** registry key. You can use this
cmdlet with the PowerShell Registry provider to get registry keys and subkeys, but you must use the
`Get-ItemProperty` cmdlet to get the registry values and data.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item HKLM:\Software\Microsoft\PowerShell\1\Shellids\Microsoft.PowerShell\
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Get items in a directory that have an exclusion ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets items in the Windows directory with names that include a dot (`.`), but don't
begin with `w*`.This example works only when the path includes a wildcard character (`*`) to specify
the contents of the item.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item C:\Windows\*.* -Exclude "w*"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Getting hardlink information ---------</maml:title>
        <maml:introduction>
          <maml:para>In PowerShell 6.2, an alternate view was added to get hardlink information. To get the hardlink
information, pipe the output to `Format-Table -View childrenWithHardlink`</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item C:\Windows\System32\ntoskrnl.exe |
    Format-Table -View childrenWithHardLink
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\Windows\System32</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
la---           5/12/2021  7:40 AM       10848576 ntoskrnl.exe
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Mode` property identifies the hardlink by the `l` in `la---`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Output for Non-Windows Operating Systems ---------</maml:title>
        <maml:introduction>
          <maml:para>In PowerShell 7.1 on Unix systems, the `Get-Item` cmdlet provides Unix-like
output:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Get-Item /Users
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: /</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>UnixMode    User  Group   LastWriteTime      Size  Name
--------    ----  -----   -------------      ----  ----
drwxr-xr-x  root  admin   12/20/2019 11:46   192   Users
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The new properties that are now part of the output are:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>- **UnixMode** is the file permissions as represented on a Unix system
- **User** is the file owner
- **Group** is the group owner
- **Size** is the size of the file or directory as represented on a Unix system</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This feature was moved from experimental to mainstream in PowerShell 7.1.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ChildItem</maml:linkText>
        <command:uri>Get-ChildItem.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ItemProperty</command:name>
      <maml:description>
        <maml:para>Gets the properties of a specified item.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-ItemProperty` cmdlet gets the properties of the specified items. For example, you can use this cmdlet to get the value of the **LastAccessTime** property of a file object. You can also use this cmdlet to view registry entries and their values.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property or properties to retrieve. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the item or items. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property or properties to retrieve. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property or properties to retrieve. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the item or items. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Boolean</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.DateTime</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.FileInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.DirectoryInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns an object for each item property that it gets. The object type depends on
the object that is retrieved. For example, in a file system drive, it might return a file or folder.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-ItemProperty`:

- All platforms:
  - `gp`

The `Get-ItemProperty` cmdlet is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get information about a specific directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets information about the `C:\Windows` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemProperty C:\Windows
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get the properties of a specific file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the properties of the `C:\Test\Weather.xls` file. The result is piped to the
`Format-List` cmdlet to display the output as a list.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemProperty C:\Test\Weather.xls | Format-List
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get the value name and data of a registry entry in a registry subkey ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the value name and data of the `ProgramFilesDir` registry entry in the
`CurrentVersion` registry subkey. The **Path** specifies the subkey and the **Name** parameter
specifies the value name of the entry.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion -Name "ProgramFilesDir"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This command requires that there is a PowerShell drive named `HKLM:` that is mapped to the
&gt; `HKEY_LOCAL_MACHINE` hive of the registry.
&gt;
&gt; A drive with that name and mapping is available in PowerShell by default. Alternatively, the path
&gt; to this registry subkey can be specified by using the following alternative path that begins with
&gt; the provider name followed by two colons:
&gt;
&gt; `Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get the value names and data of registry entries in a registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the value names and data of the registry entries in the `PowerShellEngine`
registry key. The results are shown in the following sample output.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
ApplicationBase         : C:\Windows\system32\WindowsPowerShell\v1.0\
ConsoleHostAssemblyName : Microsoft.PowerShell.ConsoleHost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=msil
PowerShellVersion       : 2.0
RuntimeVersion          : v2.0.50727
CTPVersion              : 5
PSCompatibleVersion     : 1.0,2.0
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ItemPropertyValue</command:name>
      <maml:description>
        <maml:para>Gets the value for one or more properties of a specified item.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ItemPropertyValue</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-ItemPropertyValue` gets the current value for a property that you specify when you use the **Name** parameter, located in a path that you specify with either the **Path** or **LiteralPath** parameters.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ItemPropertyValue</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the item or items.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ItemPropertyValue</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more
efficient than other parameters, because the provider applies them when the cmdlet gets the objects
rather than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the item or items.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns an object for each item property value that it gets. The object type depends on
the property value that is retrieved.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-ItemPropertyValue`:

- All platforms:
  - `gpv`

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, run the `Get-PSProvider` cmdlet. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the value of the ProductID property ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the value of the **ProductID** property of the
`\SOFTWARE\Microsoft\Windows NT\CurrentVersion` object in the Windows Registry provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemPropertyValue 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name ProductID
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
94253-50000-11141-AA785
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get the last write time of a file or folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the value of the **LastWriteTime** property, or the last time a file or folder was
changed, from the `C:\Program Files\PowerShell` folder, working in the FileSystem
provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemPropertyValue -Path 'C:\Program Files\PowerShell' -Name LastWriteTime
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Wednesday, September 3, 2014 2:53:22 PM
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get multiple property values of a file or folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This command gets the values of the **LastWriteTime**, **CreationTime**, and **Root** properties of
a folder. The property values are returned in the order in which you specified the property names.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ItemPropertyValue -Path 'C:\Program Files\PowerShell' -Name LastWriteTime, CreationTime, Root
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Tuesday, March 23, 2021 6:53:13 AM
Monday, August 14, 2017 1:42:40 PM</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Parent              :
Root                : C:\
FullName            : C:\
Extension           :
Name                : C:\
Exists              : True
CreationTime        : 10/30/2015 1:28:30 AM
CreationTimeUtc     : 10/30/2015 6:28:30 AM
LastAccessTime      : 5/26/2021 9:22:24 AM
LastAccessTimeUtc   : 5/26/2021 2:22:24 PM
LastWriteTime       : 5/25/2021 7:25:08 AM
LastWriteTimeUtc    : 5/25/2021 12:25:08 PM
Attributes          : Hidden, System, Directory
Mode                : d--hs
ModeWithoutHardLink : d--hs
BaseName            : C:\
Target              :
LinkType            :
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-itempropertyvalue?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Location</command:name>
      <maml:description>
        <maml:para>Gets information about the current working location or a location stack.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Location</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-Location` cmdlet gets an object that represents the current directory, much like the print working directory (pwd) command.</maml:para>
      <maml:para>When you move between PowerShell drives, PowerShell retains your location in each drive. You can use this cmdlet to find your location in each drive.</maml:para>
      <maml:para>You can use this cmdlet to get the current directory at run time and use it in functions and scripts, such as in a function that displays the current directory in the PowerShell prompt.</maml:para>
      <maml:para>You can also use this cmdlet to display the locations in a location stack. For more information, see the Notes and the descriptions of the **Stack** and **StackName** parameters.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSDrive</maml:name>
          <maml:description>
            <maml:para>Gets the current location in the specified PowerShell drive.</maml:para>
            <maml:para>For instance, if you are in the `Cert:` drive, you can use this parameter to find your
current location in the `C:` drive.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Gets the current location in the drive supported by the specified PowerShell provider.
If the specified provider supports more than one drive, this cmdlet returns the location on the most
recently accessed drive.</maml:para>
            <maml:para>For example, if you are in the `C:` drive, you can use this parameter to find your current location
in the drives of the PowerShell **Registry** provider.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stack</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the locations added to the current location stack. You can add
locations to stacks by using the `Push-Location` cmdlet.</maml:para>
            <maml:para>To display the locations in a different location stack, use the **StackName** parameter. For
information about location stacks, see the [Notes](#notes).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StackName</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the named location stacks. Enter one or more location stack names.</maml:para>
            <maml:para>To display the locations in the current location stack, use the **Stack** parameter. To make a
location stack the current location stack, use the `Set-Location` cmdlet.</maml:para>
            <maml:para>This cmdlet cannot display the locations in the unnamed default stack unless it is the current
stack.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PSDrive</maml:name>
        <maml:description>
          <maml:para>Gets the current location in the specified PowerShell drive.</maml:para>
          <maml:para>For instance, if you are in the `Cert:` drive, you can use this parameter to find your
current location in the `C:` drive.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PSProvider</maml:name>
        <maml:description>
          <maml:para>Gets the current location in the drive supported by the specified PowerShell provider.
If the specified provider supports more than one drive, this cmdlet returns the location on the most
recently accessed drive.</maml:para>
          <maml:para>For example, if you are in the `C:` drive, you can use this parameter to find your current location
in the drives of the PowerShell **Registry** provider.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stack</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet displays the locations added to the current location stack. You can add
locations to stacks by using the `Push-Location` cmdlet.</maml:para>
          <maml:para>To display the locations in a different location stack, use the **StackName** parameter. For
information about location stacks, see the [Notes](#notes).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StackName</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the named location stacks. Enter one or more location stack names.</maml:para>
          <maml:para>To display the locations in the current location stack, use the **Stack** parameter. To make a
location stack the current location stack, use the `Set-Location` cmdlet.</maml:para>
          <maml:para>This cmdlet cannot display the locations in the unnamed default stack unless it is the current
stack.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns a **PathInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfoStack</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **Stack** or **StackName** parameters, this cmdlet returns a **PathInfoStack**
object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Location`:

- All Platforms:

  - `gl`
  - `pwd`

PowerShell supports multiple runspaces per process. Each runspace has its own _current directory_.
This is not the same as `[System.Environment]::CurrentDirectory`. This behavior can be an issue
when calling .NET APIs or running native applications without providing explicit directory paths.
The `Get-Location` cmdlet returns the current directory of the current PowerShell runspace.

This cmdlet is designed to work with the data exposed by any provider. To list the providers in your
session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

The ways that the **PSProvider**, **PSDrive**, **Stack**, and **StackName** parameters interact
depends on the provider. Some combinations will result in errors, such as specifying both a drive
and a provider that does not expose that drive. If no parameters are specified, this cmdlet returns
the **PathInfo** object for the provider that contains the current working location.

A stack is a last-in, first-out list in which only the most recently added item is accessible. You
add items to a stack in the order that you use them, and then retrieve them for use in the reverse
order. PowerShell lets you store provider locations in location stacks. PowerShell creates an
unnamed default location stack and you can create multiple named location stacks. If you do not
specify a stack name, PowerShell uses the current location stack. By default, the unnamed default
location is the current location stack, but you can use the `Set-Location` cmdlet to change the
current location stack.

To manage location stacks, use the PowerShell `*-Location` cmdlets, as follows.

- To add a location to a location stack, use the `Push-Location` cmdlet.

- To get a location from a location stack, use the `Pop-Location` cmdlet.

- To display the locations in the current location stack, use the **Stack** parameter of the
  `Get-Location` cmdlet. To display the locations in a named location stack, use the **StackName**
  parameter of the `Get-Location` cmdlet.

- To create a new location stack, use the **StackName** parameter of the `Push-Location` cmdlet.
  If you specify a stack that does not exist, `Push-Location` creates the stack.

- To make a location stack the current location stack, use the **StackName** parameter of the
  `Set-Location` cmdlet.

The unnamed default location stack is fully accessible only when it is the current location stack.
If you make a named location stack the current location stack, you can no longer use the
`Push-Location` or `Pop-Location` cmdlets to add or get items from the default stack or use this
cmdlet to display the locations in the unnamed stack. To make the unnamed stack the current stack,
use the **StackName** parameter of the `Set-Location` cmdlet with a value of `$null` or an empty
string (`""`).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Display your current drive location ---------</maml:title>
        <maml:introduction>
          <maml:para>This command displays your location in the current PowerShell drive.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\Windows&gt; Get-Location
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
C:\Windows
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For instance, if you are in the `Windows` directory of the `C:` drive, it displays the path to that
directory.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display your current location for different drives ---------</maml:title>
        <maml:introduction>
          <maml:para>This example demonstrates the use of `Get-Location` to display your current location in different
PowerShell drives. `Set-Location` is used to change the location to several different paths on
different PSDrives.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Set-Location C:\Windows
PS C:\Windows&gt; Set-Location HKLM:\Software\Microsoft
PS HKLM:\Software\Microsoft&gt; Set-Location "HKCU:\Control Panel\Input Method"
PS HKCU:\Control Panel\Input Method&gt; Get-Location -PSDrive C</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
C:\Windows</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS HKCU:\Control Panel\Input Method&gt; Get-Location -PSDrive HKLM</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
HKLM:\Software\Microsoft</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS HKCU:\Control Panel\Input Method&gt; Set-Location C:
PS C:\Windows&gt; Get-Location -PSProvider Registry</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
HKCU:\Control Panel\Input Method
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get locations using stacks ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to use the **Stack** and **StackName** parameters of `Get-Location` to list
the locations in the current location stack and alternate location stacks.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Push-Location` cmdlet is used to change into three different locations. The third push uses a
different stack name. The **Stack** parameter of `Get-Location` displays the contents of the default
stack. The **StackName** parameter of `Get-Location` displays the contents of the stack named
`Stack2`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Push-Location C:\Windows
PS C:\Windows&gt;Push-Location System32
PS C:\Windows\System32&gt;Push-Location WindowsPowerShell -StackName Stack2
C:\Windows\System32\WindowsPowerShell&gt;Get-Location -Stack</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
C:\Windows
C:\</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>C:\Windows\System32\WindowsPowerShell&gt;Get-Location -StackName Stack2</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
C:\Windows\System32
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Customize the PowerShell prompt ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to customize the PowerShell prompt.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt;
function prompt { 'PowerShell: ' + (Get-Location) + '&gt; '}
PowerShell: C:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The function that defines the prompt includes a `Get-Location` command, which is run whenever the
prompt appears in the console.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The format of the default PowerShell prompt is defined by a special function named `prompt`. You can
change the prompt in your console by creating a new function named `prompt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To see the current prompt function, type the following command: `Get-Content Function:\prompt`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-location?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Pop-Location</maml:linkText>
        <command:uri>Pop-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Push-Location</maml:linkText>
        <command:uri>Push-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Location</maml:linkText>
        <command:uri>Set-Location.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Process</command:name>
      <maml:description>
        <maml:para>Gets the processes that are running on the local computer.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Process</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-Process` cmdlet gets the processes on a local computer.</maml:para>
      <maml:para>Without parameters, this cmdlet gets all processes on the local computer. You can also specify a specific process by process name or process ID (PID), or by piping a **System.Diagnostics.Process** object to this cmdlet.</maml:para>
      <maml:para>By default, this cmdlet returns a **Process** object that has detailed information about the process and supports methods that let you control it. With parameters, you can change the type of information returned by this cmdlet.</maml:para>
      <maml:para>- **Module**: Retrieve information for each module loaded into the process. - **FileVersionInfo**: Retrieve file version information for the main module of the process.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; A module is an executable file or a dynamic link library (DLL) loaded into a process. A process &gt; has one or more modules. The main module is the module used to initially start the process. For &gt; more information, see [ProcessModule Class](/dotnet/api/system.diagnostics.processmodule).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FileVersionInfo</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the file version information for the program that runs in the
process.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **MainModule.FileVersionInfo** property of each
**Process** object. When you use this parameter, `Get-Process` returns a **FileVersionInfo**
object, not a **Process** object. You can't pipe output produced using this parameter to a cmdlet
that expects a **Process** object, such as `Stop-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Module</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the modules that the process has loaded.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **Modules** property of each **Process** object.
When you use this parameter, `Get-Process` returns a **ProcessModule** object, not a **Process**
object. You can't pipe output produced using this parameter to a cmdlet that expects a **Process**
object, such as `Stop-Process`.</maml:para>
            <maml:para>When you use both the **Module** and **FileVersionInfo** parameters together, this cmdlet returns a
**FileVersionInfo** object with information about the file version of all modules.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies one or more processes by process name. You can specify multiple process names separated by
commas and use wildcard characters. Using the `-Name` parameter is optional.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeUserName</maml:name>
          <maml:description>
            <maml:para>Indicates that this command adds a **UserName** property to each returned **Process** object.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies one or more processes by process name. You can specify multiple process names separated by
commas and use wildcard characters. Using the `-Name` parameter is optional.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FileVersionInfo</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the file version information for the program that runs in the
process.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **MainModule.FileVersionInfo** property of each
**Process** object. When you use this parameter, `Get-Process` returns a **FileVersionInfo**
object, not a **Process** object. You can't pipe output produced using this parameter to a cmdlet
that expects a **Process** object, such as `Stop-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies one or more processes by process ID (PID). You can specify multiple IDs separated by
commas. To get the PID of a process, use `Get-Process`. To get the PID of the current PowerShell
session, use `$PID`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Module</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the modules that the process has loaded.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **Modules** property of each **Process** object.
When you use this parameter, `Get-Process` returns a **ProcessModule** object, not a **Process**
object. You can't pipe output produced using this parameter to a cmdlet that expects a **Process**
object, such as `Stop-Process`.</maml:para>
            <maml:para>When you use both the **Module** and **FileVersionInfo** parameters together, this cmdlet returns a
**FileVersionInfo** object with information about the file version of all modules.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies one or more processes by process ID (PID). You can specify multiple IDs separated by
commas. To get the PID of a process, use `Get-Process`. To get the PID of the current PowerShell
session, use `$PID`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeUserName</maml:name>
          <maml:description>
            <maml:para>Indicates that this command adds a **UserName** property to each returned **Process** object.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>FileVersionInfo</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the file version information for the program that runs in the
process.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **MainModule.FileVersionInfo** property of each
**Process** object. When you use this parameter, `Get-Process` returns a **FileVersionInfo**
object, not a **Process** object. You can't pipe output produced using this parameter to a cmdlet
that expects a **Process** object, such as `Stop-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies one or more **Process** objects. Use a variable that contains the objects, or a command
or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Module</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets the modules that the process has loaded.</maml:para>
            <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
            <maml:para>Using this parameter is the same as accessing the **Modules** property of each **Process** object.
When you use this parameter, `Get-Process` returns a **ProcessModule** object, not a **Process**
object. You can't pipe output produced using this parameter to a cmdlet that expects a **Process**
object, such as `Stop-Process`.</maml:para>
            <maml:para>When you use both the **Module** and **FileVersionInfo** parameters together, this cmdlet returns a
**FileVersionInfo** object with information about the file version of all modules.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Process</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeUserName</maml:name>
          <maml:description>
            <maml:para>Indicates that this command adds a **UserName** property to each returned **Process** object.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies one or more **Process** objects. Use a variable that contains the objects, or a command
or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>FileVersionInfo</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets the file version information for the program that runs in the
process.</maml:para>
          <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
          <maml:para>Using this parameter is the same as accessing the **MainModule.FileVersionInfo** property of each
**Process** object. When you use this parameter, `Get-Process` returns a **FileVersionInfo**
object, not a **Process** object. You can't pipe output produced using this parameter to a cmdlet
that expects a **Process** object, such as `Stop-Process`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies one or more processes by process ID (PID). You can specify multiple IDs separated by
commas. To get the PID of a process, use `Get-Process`. To get the PID of the current PowerShell
session, use `$PID`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeUserName</maml:name>
        <maml:description>
          <maml:para>Indicates that this command adds a **UserName** property to each returned **Process** object.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies one or more **Process** objects. Use a variable that contains the objects, or a command
or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Module</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets the modules that the process has loaded.</maml:para>
          <maml:para>On Windows Vista and later versions of Windows, you must run PowerShell with elevated user rights
(**Run as administrator**) to use this parameter on processes that you don't own.</maml:para>
          <maml:para>Using this parameter is the same as accessing the **Modules** property of each **Process** object.
When you use this parameter, `Get-Process` returns a **ProcessModule** object, not a **Process**
object. You can't pipe output produced using this parameter to a cmdlet that expects a **Process**
object, such as `Stop-Process`.</maml:para>
          <maml:para>When you use both the **Module** and **FileVersionInfo** parameters together, this cmdlet returns a
**FileVersionInfo** object with information about the file version of all modules.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies one or more processes by process name. You can specify multiple process names separated by
commas and use wildcard characters. Using the `-Name` parameter is optional.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe **Process** objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns a **System.Diagnostics.Process** object.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.FileVersionInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>If you use the **FileVersionInfo** parameter, this cmdlet returns a
**System.Diagnostics.FileVersionInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.ProcessModule</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>If you use the **Module** parameter, without the **FileVersionInfo** parameter, this cmdlet returns
a **System.Diagnostics.ProcessModule** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Process`:

- All platforms:
  - `gps`
- Windows:
  - `ps`

On computers running 64-bit Windows, the 64-bit version of PowerShell gets the main module and
64-bit process modules. The 32-bit version of PowerShell gets only 32-bit process modules.

&gt; [!WARNING]
&gt; When you use `Get-Process` to get a 64-bit process in the 32-bit version of PowerShell, properties
&gt; such as `Path` and `MainModule` of the returned **Process** object are `$null`. You must use
&gt; either the 64-bit version of PowerShell or the
&gt; [Win32_Process](/windows/desktop/CIMWin32Prov/win32-process) class.

To get process information from a remote computer, use the `Invoke-Command` cmdlet. For more
information, see [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).

On Windows, you can use the Windows Management Instrumentation (WMI)
[Win32_Process](/windows/desktop/CIMWin32Prov/win32-process) class in PowerShell as an alternative
to `Get-Process`. For more information, see:

- [Example 8: Find the owner of a process](#example-8-find-the-owner-of-a-process)
- [Get-CimInstance](../CimCmdlets/Get-CimInstance.md)

The default display of a **Process** object is a table view that includes the following columns.

- **NPM(K)**: The amount of non-paged memory that the process is using, in kilobytes.
- **PM(M)**: The amount of pageable memory that the process is using, in megabytes.
- **WS(M)**: The size of the working set of the process, in megabytes. The working set consists of
  the pages of memory that were recently referenced by the process.
- **CPU(s)**: The amount of processor time that the process has used on all processors, in seconds.
- **Id**: The process ID (PID) of the process.
- **SI**: The session ID of the process.
- **ProcessName**: The name of the process.

You can use the built-in alternate views for **Process** objects available with `Format-Table`, such
as **StartTime** and **Priority**. You can also design your own views.

For a description of all available **Process** object members, see
[Process Properties](xref:System.Diagnostics.Process#properties) and
[Process Methods](xref:System.Diagnostics.Process#methods).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get a list of all running processes on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets a list of all running processes on the local computer. For a definition of each
display column, see the [NOTES](#notes) section.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To see all properties of a **Process** object, use `Get-Process | Get-Member`. By default,
PowerShell displays certain property values using units such as kilobytes (K) and megabytes (M). The
actual values when accessed with the member-access operator (`.`) are in bytes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display detailed information about one or more processes ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process winword, explorer | Format-List *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This pipeline displays detailed information about the `winword` and `explorer` processes on the
computer. It uses the **Name** parameter to specify the processes, but it omits the optional
parameter name. The pipeline operator (`|`) pipes **Process** objects to the `Format-List`
cmdlet, which displays all available properties (`*`) and their values for each object.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You can also identify the processes by their process IDs. For instance, `Get-Process -Id 664, 2060`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get all processes with a working set greater than a specified size ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process | Where-Object { $_.WorkingSet -gt 20971520 }
Get-Process | Where-Object WorkingSet -GT 20MB
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Process` cmdlet returns the running processes. The output is piped to the `Where-Object`
cmdlet, which selects the objects with a **WorkingSet** value greater than 20,971,520 bytes.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In the first example, `Where-Object` uses a scriptblock to compare the **WorkingSet** property of
each **Process** object. In the second example, the `Where-Object` cmdlet uses the simplified syntax
to compare the **WorkingSet** property. In this case, `-GT` is a parameter, not a comparison
operator. The second example also uses a
[numeric literal suffix](../Microsoft.PowerShell.Core/About/about_Numeric_Literals.md) as a concise
alternative to `20971520`. In PowerShell, `MB` represents a mebibyte (MiB) multiplier. `20MB` is
equal to 20,971,520 bytes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Display processes on the computer in groups based on priority ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$processes = Get-Process
$processes | Sort-Object { $_.PriorityClass } | Format-Table -View Priority
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands display processes on the computer in groups based on their
[priority class](/dotnet/api/system.diagnostics.processpriorityclass). The first command gets all
processes on the computer and stores them in the `$processes` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command pipes the **Process** objects stored in the `$processes` variable to the
`Sort-Object` cmdlet, then to the `Format-Table` cmdlet, which formats the processes using the
**Priority** view.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Add a property to the default `Get-Process` output display ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process -Name pwsh | Format-Table -Property @(
    @{ Name = 'NPM(K)'; Expression = { [int] ($_.NPM / 1KB) } }
    @{ Name = 'PM(M)';  Expression = { [int] ($_.PM / 1MB) } }
    @{ Name = 'WS(M)';  Expression = { [int] ($_.WS / 1MB) } }
    @{ Name = 'CPU(s)'; Expression = { if ($_.CPU) { $_.CPU.ToString('N') } } }
    'Id'
    @{ Name = 'SI'; Expression = 'SessionId' }
    'ProcessName'
    'StartTime'
) -AutoSize
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
NPM(K) PM(M) WS(M) CPU(s)   Id SI ProcessName StartTime
------ ----- ----- ------   -- -- ----------- ---------
    84    46    79 18.297 3188  1 pwsh        4/14/2025 10:40:10 AM
    66    30    90 4.328  4640  1 pwsh        4/13/2025 3:33:50 PM
    66    30    90 4.516  9204  1 pwsh        4/14/2025 9:54:27 AM
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example retrieves processes from the local computer and pipes each **Process** object to the
`Format-Table` cmdlet. `Format-Table` recreates the default output display of a **Process** object
using a mixture of property names and
[calculated properties](../Microsoft.PowerShell.Core/About/about_Calculated_Properties.md). The
display includes an additional **StartTime** property not present in the default display.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Get version information for a process ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process -Name pwsh -FileVersionInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
ProductVersion   FileVersion      FileName
--------------   -----------      --------
7.5.0 SHA: 99da… 7.5.0.500        C:\Program Files\PowerShell\7\pwsh.exe
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses the **FileVersionInfo** parameter to get file version information for the main
module of the `pwsh` process. The main module is the file used to start the process, which
in this case is `pwsh.exe`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To use this command with processes that you don't own on Windows Vista and later versions of
Windows, you must run PowerShell with elevated user rights (**Run as administrator**).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Get modules loaded with the specified process ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process -Name SQL* -Module
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses the **Module** parameter to get the modules loaded by all processes with a name
beginning with `SQL`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To use this command with processes that you don't own on Windows Vista and later versions of
Windows, you must run PowerShell with elevated user rights (**Run as administrator**).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Find the owner of a process ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process -Name pwsh -IncludeUserName
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
WS(M)   CPU(s)      Id UserName                       ProcessName
-----   ------      -- --------                       -----------
46.53    21.70    3188 DOMAIN01\user01                pwsh
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-CimInstance -ClassName Win32_Process -Filter "name='pwsh.exe'" |
    Invoke-CimMethod -MethodName GetOwner
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Domain   ReturnValue User   PSComputerName
------   ----------- ----   --------------
DOMAIN01           0 user01
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command shows how to get the owner of a process. The output reveals that the owner is
`DOMAIN01\user01`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second pipeline shows a different way to get the owner of a process using `Get-CimInstance` and
`Invoke-CimMethod`. The **Win32_Process** class with a filter retrieves `pwsh` processes and the
invoked `GetOwner()` method returns information on the process's **Domain** and **User**. This
method is only available on Windows and doesn't require elevated user rights.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Use an automatic variable to identify the process hosting the current session ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process -Name pwsh
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
------    -----      -----     ------      --  -- -----------
    83    96.21     105.95       4.33    1192  10 pwsh
    79    83.81     117.61       2.16   10580  10 pwsh
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Process -Id $PID
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
------    -----      -----     ------      --  -- -----------
    83    96.21      77.53       4.39    1192  10 pwsh
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands show how to use the `$PID` automatic variable to identify the process that's hosting
the current PowerShell session. You can use this method to distinguish the host process from other
`pwsh` processes that you might want to control.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command gets all `pwsh` processes running. The second command gets the `pwsh` process
that's hosting the current session.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 10: Get all processes that have a main window title and display them in a table ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Process |
    Where-Object -Property MainWindowTitle |
    Format-Table -Property Id, Name, MainWindowTitle -AutoSize
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This pipeline gets all processes that have a main window title, and displays them in a table with
the process ID and name.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>**MainWindowTitle** is one of many useful properties of the **Diagnostics.Process** object type that
`Get-Process` returns. To view all properties, use `Get-Process | Get-Member`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-process?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Debug-Process</maml:linkText>
        <command:uri>Debug-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Process</maml:linkText>
        <command:uri>Start-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Process</maml:linkText>
        <command:uri>Stop-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Wait-Process</maml:linkText>
        <command:uri>Wait-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Where-Object</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/Where-Object.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-PSDrive</command:name>
      <maml:description>
        <maml:para>Gets drives in the current session.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>PSDrive</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-PSDrive` cmdlet gets the drives in the current session. You can get a particular drive or all drives in the session.</maml:para>
      <maml:para>This cmdlet gets the following types of drives:</maml:para>
      <maml:para>- Windows logical drives on the computer, including drives mapped to network shares. - Drives exposed by PowerShell providers (such as the Certificate:, Function:, and Alias:   drives) and the HKLM: and HKCU: drives that are exposed by the Windows PowerShell Registry   provider. - Session-specified temporary drives and persistent mapped network drives that you create by using   the New-PSDrive cmdlet.</maml:para>
      <maml:para>Beginning in Windows PowerShell 3.0, the **Persist** parameter of the `New-PSDrive` cmdlet can create mapped network drives that are saved on the local computer and are available in other sessions. For more information, see New-PSDrive.</maml:para>
      <maml:para>Also, beginning in Windows PowerShell 3.0, when an external drive is connected to the computer, Windows PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not need to restart Windows PowerShell. Similarly, when an external drive is disconnected from the computer, Windows PowerShell automatically deletes the PSDrive that represents the removed drive.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-PSDrive</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the name or name of drives that this cmdlet gets in the operation.
Type the drive name or letter without a colon (`:`).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the Windows PowerShell provider. This cmdlet gets only the drives
supported by this provider. Type the name of a provider, such as FileSystem, Registry, or
Certificate.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specifies the scope in which this cmdlet gets the drives.</maml:para>
            <maml:para>The acceptable values for this parameter are:</maml:para>
            <maml:para>- Global
- Local
- Script
- a number relative to the current scope (0 through the number of scopes, where 0 is the current
  scope and 1 is its parent). "Local" is the default.</maml:para>
            <maml:para>For more information, see [about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-PSDrive</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>LiteralName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the drive.</maml:para>
            <maml:para>The value of **LiteralName** is used exactly as it is typed. No characters are interpreted as
wildcards. If the name includes escape characters, enclose it in single quotation marks. Single
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the Windows PowerShell provider. This cmdlet gets only the drives
supported by this provider. Type the name of a provider, such as FileSystem, Registry, or
Certificate.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specifies the scope in which this cmdlet gets the drives.</maml:para>
            <maml:para>The acceptable values for this parameter are:</maml:para>
            <maml:para>- Global
- Local
- Script
- a number relative to the current scope (0 through the number of scopes, where 0 is the current
  scope and 1 is its parent). "Local" is the default.</maml:para>
            <maml:para>For more information, see [about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>LiteralName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the drive.</maml:para>
          <maml:para>The value of **LiteralName** is used exactly as it is typed. No characters are interpreted as
wildcards. If the name includes escape characters, enclose it in single quotation marks. Single
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the name or name of drives that this cmdlet gets in the operation.
Type the drive name or letter without a colon (`:`).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PSProvider</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the Windows PowerShell provider. This cmdlet gets only the drives
supported by this provider. Type the name of a provider, such as FileSystem, Registry, or
Certificate.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specifies the scope in which this cmdlet gets the drives.</maml:para>
          <maml:para>The acceptable values for this parameter are:</maml:para>
          <maml:para>- Global
- Local
- Script
- a number relative to the current scope (0 through the number of scopes, where 0 is the current
  scope and 1 is its parent). "Local" is the default.</maml:para>
          <maml:para>For more information, see [about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSDriveInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns objects representing the drives in the session.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-PSDrive`:

- All platforms:
  - `gdr`

- This cmdlet is designed to work with the data exposed by any provider. To list the providers
  available in your session, use the `Get-PSProvider` cmdlet. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
- Mapped network drives that are created by using the **Persist** parameter of the New-PSDrive
  cmdlet are specific to a user account. Mapped network drives that you create in sessions that are
  started with the Run as administrator option or with the credentials of another user are not
  visible in sessions that are started without explicit credentials or with the credentials of the
  current user.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get drives in the current session ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Get-PSDrive</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name           Used (GB)     Free (GB) Provider      Root
----           ---------     --------- --------      ----
Alias                                  Alias
C                 202.06      23718.91 FileSystem    C:\
Cert                                   Certificate   \
D                1211.06     123642.32 FileSystem    D:\
Env                                    Environment
Function                               Function
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
Variable                               Variable
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the drives in the current session.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The output shows the hard drive (C:), CD-ROM drive (D:), and the drives exposed by the Windows
PowerShell providers (Alias:, Cert:, Env:, Function:, HKCU:, HKLM:, and Variable:).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get a drive on the computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\foo&gt; Get-PSDrive D</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name           Used (GB)     Free (GB) Provider      Root
----           ---------     --------- --------      ----
D                1211.06     123642.32 FileSystem    D:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the D: drive on the computer. Note that the drive letter in the command is not
followed by a colon.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get all the drives that are supported by the Windows PowerShell FileSystem provider ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Get-PSDrive -PSProvider FileSystem
Name           Used (GB)     Free (GB) Provider      Root
----           ---------     --------- --------      ----
A                                                    A:\
C                 202.06      23718.91 FileSystem    C:\
D                1211.06     123642.32 FileSystem    D:\
G                 202.06        710.91 FileSystem    \\Music\GratefulDead
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets all of the drives that are supported by the Windows PowerShell FileSystem
provider. This includes fixed drives, logical partitions, mapped network drives, and temporary
drives that you create by using the New-PSDrive cmdlet.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Check to see if a drive is in use as a Windows PowerShell drive name ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
if (Get-PSDrive X -ErrorAction SilentlyContinue) {
    Write-Host 'The X: drive is already in use.'
} else {
    New-PSDrive -Name X -PSProvider Registry -Root HKLM:\SOFTWARE
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command checks to see whether the X drive is already in use as a Windows PowerShell drive name.
If it is not, the command uses the `New-PSDrive` cmdlet to create a temporary drive that is mapped
to the HKLM:\SOFTWARE registry key.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Compare the types of files system drives ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Get-PSDrive -PSProvider FileSystem
Name           Used (GB)     Free (GB) Provider      Root
----           ---------     --------- --------      ----
A                                                    A:\
C                 202.06      23718.91 FileSystem    C:\
D                1211.06     123642.32 FileSystem    D:\
G                 202.06        710.91 FileSystem    \\Music\GratefulDead
X                                      Registry      HKLM:\Network</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\&gt; net use
New connections will be remembered.
Status       Local     Remote                    Network
-------------------------------------------------------------------------------
OK           G:        \\Server01\Public         Microsoft Windows Network</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\&gt; [System.IO.DriveInfo]::GetDrives() | Format-Table
Name DriveType DriveFormat IsReady AvailableFreeSpace TotalFreeSpace TotalSize     RootDirectory VolumeLabel
---- --------- ----------- ------- ------------------ -------------- ---------     ------------- -----------
A:\    Network               False                                                 A:\
C:\      Fixed NTFS          True  771920580608       771920580608   988877418496  C:\           Windows
D:\      Fixed NTFS          True  689684144128       689684144128   1990045179904 D:\           Big Drive
E:\      CDRom               False                                                 E:\
G:\    Network NTFS          True      69120000           69120000       104853504 G:\           GratefulDead</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS N:\&gt; Get-CimInstance -Class Win32_LogicalDisk</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>DeviceID DriveType ProviderName   VolumeName         Size          FreeSpace
-------- --------- ------------   ----------         ----          ---------
A:       4
C:       3                        Windows            988877418496  771926069248
D:       3                        Big!              1990045179904  689684144128
E:       5
G:       4         \\Music\GratefulDead              988877418496  771926069248</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS C:\&gt; Get-CimInstance -Class Win32_NetworkConnection
LocalName RemoteName            ConnectionState Status
--------- ----------            --------------- ------
G:        \\Music\GratefulDead  Connected       OK
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example compares the types of file system drives that are displayed by `Get-PSDrive` to those
displayed by using other methods. This example demonstrates different ways to display drives in
Windows PowerShell, and it shows that session-specific drives created by using the New-PSDrive
cmdlet are accessible only in Windows PowerShell.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses `Get-PSDrive` to get all of the file system drives in the session. This
includes the fixed drives (C: and D:), a mapped network drive (G:) that was created by using the
**Persist** parameter of `New-PSDrive`, and a PowerShell drive (T:) that was created by using
`New-PSDrive` without the **Persist** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **net use** command displays Windows mapped network drives, in this case it displays only the G
drive. It does not display the X: drive that was created by `New-PSDrive`. It shows that the G:
drive is also mapped to \\\\Music\\GratefulDead.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The third command uses the **GetDrives** method of the Microsoft .NET Framework
**System.IO.DriveInfo** class. This command gets the Windows file system drives, including drive G:,
but it does not get the drives created by `New-PSDrive`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The fourth command uses the `Get-CimInstance` cmdlet to get the instances of the
**Win32_LogicalDisk** class. It returns the A:, C:, D:, E:, and G: drives, but not the drives
created by `New-PSDrive`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The last command uses the `Get-CimInstance` cmdlet to display the instances of the
**Win32_NetworkConnection** class. Like **net use**, it returns only the persistent G: drive created
by `New-PSDrive`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-psdrive?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-PSDrive</maml:linkText>
        <command:uri>New-PSDrive.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSDrive</maml:linkText>
        <command:uri>Remove-PSDrive.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-PSProvider</command:name>
      <maml:description>
        <maml:para>Gets information about the specified PowerShell provider.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>PSProvider</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-PSProvider` cmdlet gets the PowerShell providers in the current session. You can get a particular drive or all drives in the session.</maml:para>
      <maml:para>PowerShell providers let you access a variety of data stores as though they were file system drives. For information about PowerShell providers, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-PSProvider</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies the name or names of the PowerShell providers about which this cmdlet gets information.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>PSProvider</maml:name>
        <maml:description>
          <maml:para>Specifies the name or names of the PowerShell providers about which this cmdlet gets information.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe one or more provider name strings to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.ProviderInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns objects that represent the PowerShell providers in the session.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Display a list of all available providers ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-PSProvider
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays a list of all available PowerShell providers.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display a list of all PowerShell providers that begin with specified letters ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-PSProvider F*, R* | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays a list of all PowerShell providers with names that begin with the letter `F`
or `R`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Find snap-ins or module that added providers to your session ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-PSProvider | Format-Table Name, Module, PSSnapIn -AutoSize
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name        Module                        PSSnapIn
----        ------                        --------
Registry                                  Microsoft.PowerShell.Core
Alias                                     Microsoft.PowerShell.Core
Environment                               Microsoft.PowerShell.Core
FileSystem                                Microsoft.PowerShell.Core
Function                                  Microsoft.PowerShell.Core
Variable                                  Microsoft.PowerShell.Core
Certificate Microsoft.PowerShell.Security
WSMan       Microsoft.WSMan.Management
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-PSProvider | where {$_.ModuleName -eq "Microsoft.PowerShell.Security"}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name            Capabilities      Drives
----            ------------      ------
Certificate     ShouldProcess     {cert}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands find the PowerShell snap-ins or modules that added providers to your session.
All PowerShell elements, including providers, originate in a snap-in or in a module.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands use the PSSnapin and Module properties of the **ProviderInfo** object that
`Get-PSProvider` returns. The values of these properties contain the name of the snap-in or module
that adds the provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command gets all of the providers in the session and formats them in a table with the
values of their Name, Module, and PSSnapin properties.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses the `Where-Object` cmdlet to get the providers that come from the
**Microsoft.PowerShell.Security** snap-in.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Resolve the path of the Home property of the FileSystem provider ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
C:\&gt; Resolve-Path ~
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
C:\Users\User01
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; (Get-PSProvider FileSystem).Home
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
C:\Users\User01
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example shows that the tilde symbol (`~`) represents the value of the **Home** property of the
FileSystem provider. The **Home** property value is optional, but for the **FileSystem** provider,
it is defined as `$Env:HOMEDRIVE\$Env:HOMEPATH` or `$HOME`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-psprovider?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-Service</command:name>
      <maml:description>
        <maml:para>Gets the services on the computer.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Get-Service` cmdlet gets objects that represent the services on a computer, including running and stopped services. By default, when `Get-Service` is run without parameters, all the local computer's services are returned.</maml:para>
      <maml:para>You can direct this cmdlet to get only particular services by specifying the service name or the display name of the services, or you can pipe service objects to this cmdlet.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DependentServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that depend upon the specified service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet excludes from the operation.
The value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such
as `s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet includes in the operation. The
value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such as
`s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of services to be retrieved. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>RequiredServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that this service requires. This parameter gets
the value of the **ServicesDependedOn** property of the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DependentServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that depend upon the specified service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the display names of services to be retrieved. Wildcards are
permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet excludes from the operation.
The value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such
as `s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet includes in the operation. The
value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such as
`s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>RequiredServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that this service requires. This parameter gets
the value of the **ServicesDependedOn** property of the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DependentServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that depend upon the specified service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet excludes from the operation.
The value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such
as `s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, a service or services that this cmdlet includes in the operation. The
value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such as
`s*`. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects representing the services to be retrieved. Enter a variable
that contains the objects, or type a command or expression that gets the objects. You can pipe a
service object to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>RequiredServices</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets only the services that this service requires. This parameter gets
the value of the **ServicesDependedOn** property of the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DependentServices</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets only the services that depend upon the specified service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the display names of services to be retrieved. Wildcards are
permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, a service or services that this cmdlet excludes from the operation.
The value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such
as `s*`. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, a service or services that this cmdlet includes in the operation. The
value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such as
`s*`. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects representing the services to be retrieved. Enter a variable
that contains the objects, or type a command or expression that gets the objects. You can pipe a
service object to this cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of services to be retrieved. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>RequiredServices</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets only the services that this service requires. This parameter gets
the value of the **ServicesDependedOn** property of the service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns objects that represent the services on the computer.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-Service`:

- Windows:
  - `gsv`

This cmdlet is only available on Windows platforms.

Beginning in PowerShell 6.0, the following properties are added to the **ServiceController**
objects: **UserName**, **Description**, **DelayedAutoStart**, **BinaryPathName**, and
**StartupType** .

This cmdlet can display services only when the current user has permission to see them. If this
cmdlet does not display services, you might not have permission to see them.

To find the service name and display name of each service on your system, type `Get-Service`. The
service names appear in the **Name** column, and the display names appear in the **DisplayName**
column.

&gt; [!NOTE]
&gt; Typically, `Get-Service` returns information about services and not driver. However, if you
&gt; specify the name of a driver, `Get-Service` returns information about the driver.
&gt;
&gt; - Enumeration doesn't include device driver services
&gt; - When a wildcard is specified, the cmdlet only returns Windows services
&gt; - If you specify the **Name** or **DisplayName** that is an exact match to a device service name,
&gt;   then the device instance is returned

When you sort in ascending order by status value, `Stopped` services appear before `Running`
services. The **Status** property of a service is an enumerated value in which the names of the
statuses represent integer values. The sort is based on the integer value, not the name. `Running`
appears before `Stopped` because `Stopped` has a value of `1`, and `Running` has a value of `4`. For
more information, see [ServiceControllerStatus](xref:System.ServiceProcess.ServiceControllerStatus).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get all services on the computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets all of the services on the computer. It behaves as though you typed
`Get-Service *`. The default display shows the status, service name, and display name of each
service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get services that begin with a search string ---------</maml:title>
        <maml:introduction>
          <maml:para>This example retrieves services with service names that begin with `WMI` (Windows Management
Instrumentation).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service "wmi*"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Display services that include a search string ---------</maml:title>
        <maml:introduction>
          <maml:para>This example displays services with a display name that includes the word `network`. Searching the
display name finds network-related services even when the service name doesn't include `Net`, such
as xmlprov, the Network Provisioning Service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service -DisplayName "*network*"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get services that begin with a search string and an exclusion ---------</maml:title>
        <maml:introduction>
          <maml:para>This example only gets the services with service names that begin with `win`, except for the WinRM
service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service -Name "win*" -Exclude "WinRM"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Display services that are currently active ---------</maml:title>
        <maml:introduction>
          <maml:para>This example displays only the services with a status of `Running`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service | Where-Object {$_.Status -eq "Running"}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Service` gets all the services on the computer and sends the objects down the pipeline. The
`Where-Object` cmdlet, selects only the services with a **Status** property that equals `Running`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Status is only one property of service objects. To see all of the properties, type
`Get-Service | Get-Member`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: List the services on the computer that have dependent services ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets services that have dependent services.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service | Where-Object {$_.DependentServices} |
    Format-List -Property Name, DependentServices, @{
        Label="NoOfDependentServices"
        Expression={$_.DependentServices.Count}
    }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name                  : AudioEndpointBuilder
DependentServices     : {AudioSrv}
NoOfDependentServices : 1</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name                  : Dhcp
DependentServices     : {WinHttpAutoProxySvc}
NoOfDependentServices : 1
...
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Service` cmdlet gets all the services on the computer and sends the objects down the
pipeline. The `Where-Object` cmdlet selects the services whose **DependentServices** property isn't
null.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The results are sent down the pipeline to the `Format-List` cmdlet. The **Property** parameter
displays the name of the service, the name of the dependent services, and a calculated property that
displays the number of dependent services for each service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Sort services by property value ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows that when you sort services in ascending order by the value of their **Status**
property, stopped services appear before running services. This happens because the value of
**Status** is an enumeration, in which `Stopped` has a value of `1`, and `Running` has a value of
`4`. For more information, see
[ServiceControllerStatus](xref:System.ServiceProcess.ServiceControllerStatus).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To list running services first, use the **Descending** parameter of the `Sort-Object` cmdlet.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service "s*" | Sort-Object Status
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Status   Name               DisplayName
------   ----               -----------
Stopped  stisvc             Windows Image Acquisition (WIA)
Stopped  SwPrv              MS Software Shadow Copy Provider
Stopped  SysmonLog          Performance Logs and Alerts
Running  Spooler            Print Spooler
Running  srservice          System Restore Service
Running  SSDPSRV            SSDP Discovery Service
Running  ShellHWDetection   Shell Hardware Detection
Running  Schedule           Task Scheduler
Running  SCardSvr           Smart Card
Running  SamSs              Security Accounts Manager
Running  SharedAccess       Windows Firewall/Internet Connectio...
Running  SENS               System Event Notification
Running  seclogon           Secondary Logon
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Get the dependent services of a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the services that the WinRM service requires. The value of the service's
**ServicesDependedOn** property is returned.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service "WinRM" -RequiredServices
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Get a service through the pipeline operator ---------</maml:title>
        <maml:introduction>
          <maml:para>This example gets the WinRM service on the local computer. The service name string, enclosed in
quotation marks, is sent down the pipeline to `Get-Service`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
"WinRM" | Get-Service
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-TimeZone</command:name>
      <maml:description>
        <maml:para>Gets the current time zone or a list of available time zones.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>TimeZone</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Get-TimeZone` cmdlet gets the current time zone or a list of available time zones.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-TimeZone</maml:name>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the name or names of the time zones that this cmdlet gets.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-TimeZone</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the ID or IDs of the time zones that this cmdlet gets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-TimeZone</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ListAvailable</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet gets all available time zones.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the ID or IDs of the time zones that this cmdlet gets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ListAvailable</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet gets all available time zones.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the name or names of the time zones that this cmdlet gets.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.TimeZoneInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-TimeZone`:

- All platforms:
  - `gtz`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the current time zone ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-TimeZone
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the current time zone.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get time zones that match a specified string ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-TimeZone -Name "*pac*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Pacific Standard Time (Mexico)</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>(UTC-08:00) Pacific Time (US &amp;amp; Canada)</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Pacific Standard Time</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>SA Pacific Standard Time</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Pacific SA Standard Time</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>West Pacific Standard Time</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Central Pacific Standard Time
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets all time zones that match the specified wildcard.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get all available time zones ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-TimeZone -ListAvailable
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets all available time zones.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/get-timezone?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-TimeZone</maml:linkText>
        <command:uri>Set-TimeZone.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Invoke-Item</command:name>
      <maml:description>
        <maml:para>Performs the default action on the specified item.</maml:para>
      </maml:description>
      <command:verb>Invoke</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Invoke-Item` cmdlet performs the default action on the specified item. For example, it runs an executable file or opens a document file in the application associated with the document file type. The default action depends on the type of item and is determined by the PowerShell provider that provides access to the data.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Invoke-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the selected item.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Invoke-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the selected item.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output of its own, but the items it invokes may return their own output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Invoke-Item`:

- `ii`

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Open a file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command opens the file `aliasApr04.doc` in Microsoft Office Word. In this case, opening in Word
is the default action for `.doc` files.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Invoke-Item "C:\Test\aliasApr04.doc"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Open all files of a specific type ---------</maml:title>
        <maml:introduction>
          <maml:para>This command opens all of the Microsoft Office Excel spreadsheets in the `C:\Users\User1\Documents`
folder. Each spreadsheet is opened in a new instance of Excel. In this case, opening in Excel is the
default action for `.xls` files.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Invoke-Item "C:\Users\User1\Documents\*.xls"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/invoke-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Join-Path</command:name>
      <maml:description>
        <maml:para>Combines a path and a child path into a single path.</maml:para>
      </maml:description>
      <command:verb>Join</command:verb>
      <command:noun>Path</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Join-Path` cmdlet combines a path and child-path into a single path. The provider supplies the path delimiters.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Join-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>AdditionalChildPath</maml:name>
          <maml:description>
            <maml:para>Specifies additional elements to append to the value of the **Path** parameter. The **ChildPath**
parameter is still mandatory and must be specified as well. This parameter is specified with the
`ValueFromRemainingArguments` property, which enables joining an indefinite number of paths.</maml:para>
            <maml:para>This parameter was added in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>ChildPath</maml:name>
          <maml:description>
            <maml:para>Specifies the elements to append to the value of the `Path` parameter. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the main path (or paths) to which the child-path is appended. The value of **Path**
determines which provider joins the paths and adds the path delimiters. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet should attempt to resolve the joined path from the current provider.</maml:para>
            <maml:para>- If you use wildcards, the cmdlet returns all paths that match the joined path.
- If you don't use wildcards, the cmdlet returns an error if the path doesn't exist.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>AdditionalChildPath</maml:name>
        <maml:description>
          <maml:para>Specifies additional elements to append to the value of the **Path** parameter. The **ChildPath**
parameter is still mandatory and must be specified as well. This parameter is specified with the
`ValueFromRemainingArguments` property, which enables joining an indefinite number of paths.</maml:para>
          <maml:para>This parameter was added in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>ChildPath</maml:name>
        <maml:description>
          <maml:para>Specifies the elements to append to the value of the `Path` parameter. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the main path (or paths) to which the child-path is appended. The value of **Path**
determines which provider joins the paths and adds the path delimiters. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Resolve</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet should attempt to resolve the joined path from the current provider.</maml:para>
          <maml:para>- If you use wildcards, the cmdlet returns all paths that match the joined path.
- If you don't use wildcards, the cmdlet returns an error if the path doesn't exist.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a string that contains the resulting path.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>The cmdlets that contain the Path noun manipulate path names and return the names in a concise
format that all PowerShell providers can interpret. They're designed to be used where you want to
display all or part of a path in a particular format. Use them like you would use `Dirname`,
`Normpath`, `Realpath`, `Join`, or other path manipulators.

You can use the path cmdlets with several providers, including the `FileSystem`, `Registry`, and
`Certificate` providers.

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Combine a path with a child path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Join-Path -Path "path" -ChildPath "childpath"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
path\childpath
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses `Join-Path` to combine a path with a childpath.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Since the command is executed from the **FileSystem** provider, it provides the `\` delimiter to
join the paths.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Combine paths that already contain directory separators ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Join-Path -Path "path\" -ChildPath "\childpath"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
path\childpath
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Existing directory separators `\` are handled so there is only one separator between **Path** and
**ChildPath**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Display files and folders by joining a path with a child path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Join-Path "C:\win*" "System*" -Resolve
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays the files and folders that are referenced by joining the `C:\Win\*` path and
the `System\*` child path. It displays the same files and folders as `Get-ChildItem`, but it
displays the fully qualified path to each item. In this command, the **Path** and **ChildPath**
optional parameter names are omitted.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Use Join-Path with the PowerShell Registry provider ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS HKLM:\&gt; Join-Path -Path System -ChildPath *ControlSet* -Resolve
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
HKLM:\System\ControlSet001
HKLM:\System\CurrentControlSet
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays the registry keys in the `HKLM\System` registry subkey that include
`ControlSet`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Resolve** parameter, attempts to resolve the joined path, including wildcards from the current
provider path `HKLM:\`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Combine multiple path roots with a child path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Join-Path -Path C:, D:, E:, F: -ChildPath New
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
C:\New
D:\New
E:\New
F:\New
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses `Join-Path` to combine multiple path roots with a child path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; The Drives specified by **Path** must exist or the join of that entry will fail.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Combine the roots of a file system drive with a child path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-PSDrive -PSProvider FileSystem |
    ForEach-Object {$_.Root} |
    Join-Path -ChildPath "Subdir"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
C:\Subdir
D:\Subdir
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command combines the roots of each PowerShell file system drive in the console with the
`Subdir` child path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command uses the `Get-PSDrive` cmdlet to get the PowerShell drives supported by the FileSystem
provider. The `ForEach-Object` statement selects only the **Root** property of the **PSDriveInfo**
objects and combines it with the specified child path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The output shows that the PowerShell drives on the computer included a drive mapped to the
`C:\Program Files` directory.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Combine an indefinite number of paths ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Join-Path a b c d e f g
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
a\b\c\d\e\f\g
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **AdditionalChildPath** parameter allows the joining of an unlimited number of paths.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, no parameter names are used, thus "a" binds to **Path**, "b" to **ChildPath** and
"c-g" to **AdditionalChildPath**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/join-path?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Convert-Path</maml:linkText>
        <command:uri>Convert-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resolve-Path</maml:linkText>
        <command:uri>Resolve-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-Path</maml:linkText>
        <command:uri>Split-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Path</maml:linkText>
        <command:uri>Test-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSProvider</maml:linkText>
        <command:uri>Get-PSProvider.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ChildItem</maml:linkText>
        <command:uri>Get-ChildItem.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSDrive</maml:linkText>
        <command:uri>Get-PSDrive.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Move-Item</command:name>
      <maml:description>
        <maml:para>Moves an item from one location to another.</maml:para>
      </maml:description>
      <command:verb>Move</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Move-Item` cmdlet moves an item, including its properties, contents, and child items, from one location to another location. The locations must be supported by the same provider.</maml:para>
      <maml:para>For example, it can move a file or subdirectory from one directory to another or move a registry subkey from one key to another. When you move an item, it is added to the new location and deleted from its original location.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Move-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location where the items are being moved. The default is the current
directory. Wildcards aren't permitted.</maml:para>
            <maml:para>To rename the item being moved, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the moved item. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the current location of the items. The default is the current directory.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Move-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location where the items are being moved. The default is the current
directory. Wildcards aren't permitted.</maml:para>
            <maml:para>To rename the item being moved, specify a new name in the value of the **Destination** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret any
characters as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the moved item. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location where the items are being moved. The default is the current
directory. Wildcards aren't permitted.</maml:para>
          <maml:para>To rename the item being moved, specify a new name in the value of the **Destination** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret any
characters as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the moved item. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the current location of the items. The default is the current directory.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns an object representing the moved item.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Move-Item`:

- All platforms:
  - `mi`
  - `move`
- Windows:
  - `mv`

- This cmdlet will move files between drives that are supported by the same provider, but it will
  move directories only within the same drive.
- Because a `Move-Item` command moves the properties, contents, and child items of an item, all
  moves are recursive by default.
- This cmdlet is designed to work with the data exposed by any provider. To list the providers
  available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Move a file to another directory and rename it ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves the `Test.txt` file from the `C:` drive to the `E:\Temp` directory and renames it
from `test.txt` to `tst.txt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Move-Item -Path C:\test.txt -Destination E:\Temp\tst.txt
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Move a directory and its contents to another directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves the `C:\Temp` directory and its contents to the `C:\Logs` directory.
The `Temp` directory, and all of its subdirectories and files, then appear in the `Logs` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Move-Item -Path C:\Temp -Destination C:\Logs
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Move all files of a specified extension from the current directory to another directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves all of the text files (`*.txt`) in the current directory (represented by a dot
(`.`)) to the `C:\Logs` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Move-Item -Path .\*.txt -Destination C:\Logs
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Recursively move all files of a specified extension from the current directory to another directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves all of the text files from the current directory and all subdirectories,
recursively, to the `C:\TextFiles` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path ".\*.txt" -Recurse | Move-Item -Destination "C:\TextFiles"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command uses the `Get-ChildItem` cmdlet to get all of the child items in the current directory
(represented by the dot (`.`)) and its subdirectories that have a `*.txt` file name extension. It
uses the **Recurse** parameter to make the retrieval recursive and the **Include** parameter to
limit the retrieval to `*.txt` files.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The pipeline operator (`|`) sends the results of this command to `Move-Item`, which moves the text
files to the `TextFiles` directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If files that are to be moved to `C:\Textfiles` have the same name, `Move-Item` displays an error
and continues, but it moves only one file with each name to `C:\Textfiles`. The other files remain
in their original directories.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If the `Textfiles` directory (or any other element of the destination path) does not exist, the
command fails. The missing directory is not created for you, even if you use the **Force**
parameter. `Move-Item` moves the first item to a file called `Textfiles` and then displays an error
explaining that the file already exists.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Also, by default, `Get-ChildItem` does not move hidden files. To move hidden files, use the
**Force** parameter with `Get-ChildItem`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; In Windows PowerShell 2.0, when using the **Recurse** parameter of the `Get-ChildItem` cmdlet, the
&gt; value of the **Path** parameter must be a container. Use the **Include** parameter to specify the
&gt; `*.txt` file name extension filter
&gt; (`Get-ChildItem -Path .\* -Include *.txt -Recurse | Move-Item -Destination C:\TextFiles`).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Move registry keys and values to another key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves the registry keys and values within the `MyCompany` registry key in
`HKLM\Software` to the `MyNewCompany` key. The wildcard character (`*`) indicates that the contents
of the `MyCompany` key should be moved, not the key itself. In this command, the optional **Path**
and **Destination** parameter names are omitted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Move-Item "HKLM:\software\mycompany\*" "HKLM:\software\mynewcompany"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Move a directory and its contents to a subdirectory of the specified directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves the ``Logs[Sept`06]`` directory (and its contents) into the `Logs[2006]`
directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Move-Item -LiteralPath 'Logs[Sept`06]' -Destination 'Logs[2006]'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **LiteralPath** parameter is used instead of **Path**, because the original directory name
includes left bracket and right bracket characters (`[` and `]`). The path is also enclosed in
single quotation marks (`'`), so that the backtick symbol (`` ` ``) is not misinterpreted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Destination** parameter must also be enclosed in single quotation marks because it includes
brackets that can be misinterpreted.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/move-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Move-ItemProperty</command:name>
      <maml:description>
        <maml:para>Moves a property from one location to another.</maml:para>
      </maml:description>
      <command:verb>Move</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Move-ItemProperty` cmdlet moves a property of an item from one item to another item. For instance, it can move a registry entry from one registry key to another registry key. When you move an item property, it is added to the new location and deleted from its original location.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Move-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the destination location.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be moved.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the current location of the property.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Move-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the destination location.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the property to be moved.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the destination location.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation. Implementation varies from provider
to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property to be moved.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you are working.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the current location of the property.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PSCustomObject** representing the
moved item property.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Move-ItemProperty`:

- All platforms:
  - `mp`

This cmdlet is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Move a registry value and its data to another key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command moves the Version registry value, and its data, from the "MyApp" subkey to the NewApp
subkey of the `HKLM\Software\MyCompany` registry key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$moveParams = @{
    Path        = "HKLM:\Software\MyCompany\MyApp"
    Name        = "Version"
    Destination = "HKLM:\Software\MyCompany\NewApp"
}
Move-ItemProperty @moveParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/move-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-Item</command:name>
      <maml:description>
        <maml:para>Creates a new item.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `New-Item` cmdlet creates a new item and sets its value. The types of items that can be created depend on the location of the item. For example, in the file system, `New-Item` creates files and folders. In the registry, `New-Item` creates registry keys and entries.</maml:para>
      <maml:para>`New-Item` can also set the value of the items that it creates. For example, when it creates a new file, `New-Item` can add initial content to the file.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Authentication</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CertificateThumbprint</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
            <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ItemType</maml:name>
          <maml:description>
            <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
            <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
            <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
            <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
            <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
            <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OptionSet</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Port</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SessionOption</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
            <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
            <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ApplicationName</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the application name in the connection. The default value of the **ApplicationName**
parameter is **WSMAN**.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Authentication</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the authentication mechanism to be used at the server.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.AuthenticationMechanism</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>CertificateThumbprint</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the digital public key certificate (X509) of a user account that has permission to perform
this WSMan action. Enter the certificate thumbprint of the certificate.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ConnectionURI</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the connection endpoint for WSMan.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Uri</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user or elevate your credentials when running this cmdlet, use `Invoke-Command`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
security restrictions.</maml:para>
          <maml:para>Beginning in PowerShell 7.4, this parameter also allows you to overwrite an existing Junction.
Previously, this would fail with a "cannot be removed because it is not empty" error.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ItemType</maml:name>
        <maml:description>
          <maml:para>Specifies the provider-specified type of the new item. The available values of this parameter depend
on the current provider you are using.</maml:para>
          <maml:para>If your location is in a `FileSystem` drive, the following values are allowed:</maml:para>
          <maml:para>- `File`
- `Directory`
- `SymbolicLink`
- `Junction`
- `HardLink`</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
&gt; (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
&gt; links.</maml:para>
          <maml:para>In a `Certificate` drive, these are the values you can specify:</maml:para>
          <maml:para>- `Certificate Provider`
- `Certificate`
- `Store`
- `StoreLocation`</maml:para>
          <maml:para>For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the new item. You can specify the name of the new item in the **Name** or
**Path** parameter value, and you can specify the path of the new item in **Name** or **Path**
value. Items names passed using the **Name** parameter are created relative to the value of the
**Path** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Options</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Alias** provider. For more information, see
[New-Alias](../Microsoft.PowerShell.Utility/New-Alias.md).</maml:para>
          <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
          <maml:para>Valid values are:</maml:para>
          <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>OptionSet</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Passes a set of switches to a service to modify or refine the nature of the request.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the location of the new item. The default is the current location when
**Path** is omitted. You can specify the name of the new item in **Name**, or include it in
**Path**. Items names passed using the **Name** parameter are created relative to the value of the
**Path** parameter.</maml:para>
          <maml:para>For this cmdlet, the **Path** parameter works like the **LiteralPath** parameter of other cmdlets.
Wildcard characters are not interpreted. All characters are passed to the location's provider. The
provider may not support all characters. For example, you can't create a filename that contains an
asterisk (`*`) character.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Port</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the port to use when the client connects to the WinRM service.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SessionOption</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Defines a set of extended options for the WS-Management session.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.WSMan.Management.SessionOption</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>UseSSL</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies that the Secure Sockets Layer (SSL) protocol should be used to establish a connection to
the remote computer. By default, SSL isn't used.</maml:para>
          <maml:para>For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the new item. You can also pipe a value to `New-Item`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a value for the new item to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.DictionaryEntry</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **DictionaryEntry** object when creating a new environment variable.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.DirectoryInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **DirectoryInfo** object when creating a new directory in the filesystem.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.IO.FileInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **FileInfo** object when creating a new file in the filesystem.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.AliasInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns an **AliasInfo** object when creating a new alias.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.FunctionInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **FunctionInfo** object when creating a new function.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSVariable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **PSVariable** object when creating a new variable.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `New-Item`:

- All platforms:
  - `ni`

`New-Item` is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Create a file in the current directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command creates a text file that is named "testfile1.txt" in the current directory. The dot
('.') in the value of the **Path** parameter indicates the current directory. The quoted text that
follows the **Value** parameter is added to the file as content.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -Path . -Name "testfile1.txt" -ItemType "File" -Value "This is a text string."
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Create a directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This command creates a directory named "Logfiles" in the `C:` drive. The **ItemType** parameter
specifies that the new item is a directory, not a file or other file system object.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -Path "C:\" -Name "Logfiles" -ItemType "Directory"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Create a profile ---------</maml:title>
        <maml:introduction>
          <maml:para>This command creates a PowerShell profile in the path that is specified by the `$PROFILE` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You can use profiles to customize PowerShell. `$PROFILE` is an automatic (built-in) variable that
stores the path and file name of the "CurrentUser/CurrentHost" profile. By default, the profile does
not exist, even though PowerShell stores a path and file name for it.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this command, the `$PROFILE` variable represents the path of the file. **ItemType** parameter
specifies that the command creates a file. The **Force** parameter lets you create a file in the
profile path, even when the directories in the path do not exist.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>After you create a profile, you can enter aliases, functions, and scripts in the profile to
customize your shell.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information, see
[about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md)
and [about_Profiles](../Microsoft.PowerShell.Core/About/about_Profiles.md).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -Path $PROFILE -ItemType "File" -Force
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Create a directory in a different directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a new Scripts directory in the "C:\PS-Test" directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The name of the new directory item, "Scripts", is included in the value of **Path** parameter,
instead of being specified in the value of **Name**. As indicated by the syntax, either command form
is valid.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -ItemType "Directory" -Path "C:\ps-test\scripts"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Create multiple files ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates files in two different directories. Because **Path** takes multiple strings,
you can use it to create multiple items.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -ItemType "File" -Path "C:\ps-test\test.txt", "C:\ps-test\Logs\test.log"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Use wildcards to create files in multiple directories ---------</maml:title>
        <maml:introduction>
          <maml:para>The `New-Item` cmdlet supports wildcards in the **Path** parameter. The following command creates a
`temp.txt` file in all of the directories specified by the wildcards in the **Path** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path C:\Temp\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory:  C:\Temp</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d-----        5/15/2019   6:45 AM        1   One
d-----        5/15/2019   6:45 AM        1   Two
d-----        5/15/2019   6:45 AM        1   Three
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-Item -Path C:\Temp\* -Name temp.txt -ItemType File | Select-Object FullName
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
FullName
--------
C:\Temp\One\temp.txt
C:\Temp\Three\temp.txt
C:\Temp\Two\temp.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet shows three directories under the `C:\Temp` directory. Using wildcards
the `New-Item` cmdlet creates a `temp.txt` file in all of the directories under the current
directory. The `New-Item` cmdlet outputs the items you created, which is piped to `Select-Object`
to verify the paths of the newly created files.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Create a symbolic link to a file or folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a symbolic link to the Notice.txt file in the current folder.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$link = New-Item -ItemType SymbolicLink -Path .\link -Target .\Notice.txt
$link | Select-Object LinkType, Target
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
LinkType     Target
--------     ------
SymbolicLink {.\Notice.txt}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, **Target** is an alias for the **Value** parameter. The target of the symbolic link
can be a relative path. Prior to PowerShell v6.2, the target must be a fully-qualified path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Beginning in PowerShell 7.1, you can now create to a **SymbolicLink** to a folder on Windows using a
relative path.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Use the -Force parameter to attempt to recreate folders ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a folder with a file inside. Then, attempts to create the same folder using
`-Force`. It will not overwrite the folder but simply return the existing folder object with the
file created intact.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; New-Item -Path .\TestFolder -ItemType Directory
PS&gt; New-Item -Path .\TestFolder\TestFile.txt -ItemType File</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; New-Item -Path .\TestFolder -ItemType Directory -Force</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----         5/1/2020   8:03 AM                TestFolder</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Get-ChildItem .\TestFolder\</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\TestFolder
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         5/1/2020   8:03 AM              0 TestFile.txt
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Use the Force parameter to overwrite existing files ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a file with a value and then recreates the file using the **Force** parameter.
This overwrites the existing file, as you can see by the **Length** property.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; New-Item ./TestFile.txt -ItemType File -Value 'This is just a test file'</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Source\Test
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         5/1/2020   8:32 AM             24 TestFile.txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>New-Item ./TestFile.txt -ItemType File -Force</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: C:\Source\Test
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         5/1/2020   8:32 AM              0 TestFile.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; When using `New-Item` with the **Force** parameter to create registry keys, the command behaves
&gt; the same as when overwriting a file. If the registry key already exists, the key and all
&gt; properties and values are overwritten with an empty registry key.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/new-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ItemProperty</command:name>
      <maml:description>
        <maml:para>Creates a new property for an item and sets its value.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `New-ItemProperty` cmdlet creates a new property for a specified item and sets its value. Typically, this cmdlet is used to create new registry values, because registry values are properties of a registry key item.</maml:para>
      <maml:para>This cmdlet does not add properties to an object.</maml:para>
      <maml:para>- To add a property to an instance of an object, use the `Add-Member` cmdlet. - To add a property to all objects of a particular type, modify the Types.ps1xml file.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action.
The default is the current user.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such as
one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a
password.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to create a property on an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies a name for the new property.
If the property is a registry entry, this parameter specifies the name of the entry.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the item.
Wildcard characters are permitted.
This parameter identifies the item to which this cmdlet adds the new property.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PropertyType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of property that this cmdlet adds.
The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the property value.
If the property is a registry entry, this parameter specifies the value of the entry.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action.
The default is the current user.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such as
one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a
password.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to create a property on an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret any
characters as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies a name for the new property.
If the property is a registry entry, this parameter specifies the name of the entry.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PropertyType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of property that this cmdlet adds.
The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the property value.
If the property is a registry entry, this parameter specifies the value of the entry.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to perform this action.
The default is the current user.</maml:para>
          <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such as
one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a
password.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to create a property on an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret any
characters as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies a name for the new property.
If the property is a registry entry, this parameter specifies the name of the entry.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the item.
Wildcard characters are permitted.
This parameter identifies the item to which this cmdlet adds the new property.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PropertyType</maml:name>
        <maml:description>
          <maml:para>Specifies the type of property that this cmdlet adds.
The acceptable values for this parameter are:</maml:para>
          <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies the property value.
If the property is a registry entry, this parameter specifies the value of the entry.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a custom object representing the new property.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>`New-ItemProperty` is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Add a registry entry ---------</maml:title>
        <maml:introduction>
          <maml:para>This command adds a new registry entry, `NoOfEmployees`, to the `MyCompany` key of the
`HKLM:\Software hive`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses the **Path** parameter to specify the path of the `MyCompany` registry key.
It uses the **Name** parameter to specify a name for the entry and the **Value** parameter to
specify its value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses the `Get-ItemProperty` cmdlet to see the new registry entry.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-ItemProperty -Path "HKLM:\Software\MyCompany" -Name "NoOfEmployees" -Value 822
Get-ItemProperty "HKLM:\Software\MyCompany"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software\mycompany
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software
PSChildName   : mycompany
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
NoOfLocations : 2
NoOfEmployees : 822
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Add a registry entry to a key ---------</maml:title>
        <maml:introduction>
          <maml:para>This command adds a new registry entry to a registry key. To specify the key, it uses a pipeline
operator (`|`) to send an object that represents the key to `New-ItemProperty`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first part of the command uses the `Get-Item` cmdlet to get the `MyCompany` registry key. The
pipeline operator sends the results of the command to `New-ItemProperty`, which adds the new
registry entry (`NoOfLocations`), and its value (`3`), to the `MyCompany` key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item -Path "HKLM:\Software\MyCompany" | New-ItemProperty -Name NoOfLocations -Value 3
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command works because the parameter-binding feature of PowerShell associates the path of the
**RegistryKey** object that `Get-Item` returns with the **LiteralPath** parameter of
`New-ItemProperty`. For more information, see
[about_Pipelines](../Microsoft.PowerShell.Core/About/about_pipelines.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Create a MultiString value in the registry using a Here-String ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a `MultiString` value using a Here-String.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$newValue = New-ItemProperty -Path "HKLM:\SOFTWARE\ContosoCompany\" -Name 'HereString' -PropertyType MultiString -Value @"
This is text which contains newlines
It can also contain "quoted" strings
"@
$newValue.HereString
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
This is text which contains newlines
It can also contain "quoted" strings
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Create a MultiString value in the registry using an array ---------</maml:title>
        <maml:introduction>
          <maml:para>The example shows how to use an array of values to create the `MultiString` value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$newValue = New-ItemProperty -Path "HKLM:\SOFTWARE\ContosoCompany\" -Name 'MultiString' -PropertyType MultiString -Value ('a','b','c')
$newValue.MultiString[0]
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
a
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/new-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-PSDrive</command:name>
      <maml:description>
        <maml:para>Creates temporary and persistent drives that are associated with a location in an item data store.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>PSDrive</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `New-PSDrive` cmdlet creates temporary and persistent drives that are mapped to or associated with a location in a data store, such as a network drive, a directory on the local computer, or a registry key, and persistent Windows mapped network drives that are associated with a file system location on a remote computer.</maml:para>
      <maml:para>Temporary drives exist only in the current PowerShell session and in sessions that you create in the current session. They can have any name that is valid in PowerShell and can be mapped to any local or remote resource. You can use temporary PowerShell drives to access data in the associated data store, just as you would do with any mapped network drive. You can change locations into the drive, by using `Set-Location`, and access the contents of the drive by using `Get-Item` or `Get-ChildItem`.</maml:para>
      <maml:para>Because temporary drives are known only to PowerShell, you can't access them by using File Explorer, Windows Management Instrumentation (WMI), Component Object Model (COM), Microsoft .NET Framework, or with tools such as `net use`.</maml:para>
      <maml:para>The following features were added to `New-PSDrive` in PowerShell 3.0:</maml:para>
      <maml:para>- Mapped network drives. You can use the **Persist** parameter of `New-PSDrive` to create Windows   mapped network drives. Unlike temporary PowerShell drives, Windows mapped network drives aren't   session-specific. They're saved in Windows and they can be managed by using standard Windows   tools, such as File Explorer and **net use**. Mapped network drives must have a drive-letter name   and be connected to a remote file system location. When your command is scoped locally, no   dot-sourcing, the **Persist** parameter doesn't persist the creation of a **PSDrive** beyond the   scope in which the command is running. If you're running `New-PSDrive` inside a script, and you   want the drive to persist indefinitely, you must dot-source the script. For best results, to force   a new drive to persist indefinitely, add the **Scope** parameter to your command, and set its   value to **Global**. For more information about dot-sourcing, see   [about_Scripts](../Microsoft.PowerShell.Core/About/about_Scripts.md#script-scope-and-dot-sourcing). - External drives. When an external drive is connected to the computer, PowerShell automatically   adds a **PSDrive** to the file system that represents the new drive. You don't have to restart   PowerShell. Similarly, when an external drive is disconnected from the computer, PowerShell   automatically deletes the **PSDrive** that represents the removed drive. - Credentials for Universal Naming Convention (UNC) paths.</maml:para>
      <maml:para>When the value of the **Root** parameter is a UNC path, such as `\\Server\Share`, the credential specified in the value of the **Credential** parameter is used to create the **PSDrive**. Otherwise, **Credential** isn't effective when you're creating new file system drives.</maml:para>
      <maml:para>Some code samples use splatting to reduce the line length and improve readability. For more information, see [about_Splatting](../Microsoft.PowerShell.Core/About/about_Splatting.md).</maml:para>
      <maml:para>&gt; [!NOTE] &gt; Unless you use the **Scope** parameter, PSDrives are created in the scope in which the &gt; `New-PSDrive` command is run.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-PSDrive</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
            <maml:para>Since PowerShell 3.0, when the value of the **Root** parameter is a UNC path, you can use
credentials to create file system drives.</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies a brief text description of the drive. Type any string.</maml:para>
            <maml:para>To see the descriptions of all the session's drives, `Get-PSDrive | Format-Table Name, Description`.</maml:para>
            <maml:para>To see the description of a particular drive, type `(Get-PSDrive &lt;DriveName&gt;).Description`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies a name for the new drive. For persistent mapped network drives, use a drive letter. For
temporary PowerShell drives, you aren't limited to drive letters, use any valid string.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Persist</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet creates a Windows mapped network drive. The **Persist** parameter is only
available on Windows.</maml:para>
            <maml:para>Mapped network drives are saved in Windows on the local computer. They're persistent, not
session-specific, and can be viewed and managed in File Explorer and other tools.</maml:para>
            <maml:para>When you scope the command locally, without dot-sourcing, the **Persist** parameter doesn't persist
the creation of a **PSDrive** beyond the scope in which you run the command. If you run
`New-PSDrive` inside a script, and you want the new drive to persist indefinitely, you must
dot-source the script. For best results, to force a new drive to persist, specify **Global** as the
value of the **Scope** parameter and include **Persist** in your command.</maml:para>
            <maml:para>The name of the drive must be a letter, such as `D` or `E`. The value of **Root** parameter must be
a UNC path of a different computer. The **PSProvider** parameter's value must be `FileSystem`.</maml:para>
            <maml:para>To disconnect a Windows mapped network drive, use the `Remove-PSDrive` cmdlet. When you disconnect a
Windows mapped network drive, the mapping is permanently deleted from the computer, not just deleted
from the current session.</maml:para>
            <maml:para>Mapped network drives are specific to a user account. Mapped drives created in elevated sessions or
sessions using the credential of another user aren't visible in sessions started using different
credentials.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies the PowerShell provider that supports drives of this kind.</maml:para>
            <maml:para>For example, if the drive is associated with a network share or file system directory, the
PowerShell provider is `FileSystem`. If the drive is associated with a registry key, the provider is
`Registry`.</maml:para>
            <maml:para>Temporary PowerShell drives can be associated with any PowerShell provider. Mapped network drives
can be associated only with the `FileSystem` provider.</maml:para>
            <maml:para>To see a list of the providers in your PowerShell session, use the `Get-PSProvider` cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Root</maml:name>
          <maml:description>
            <maml:para>Specifies the data store location to which a PowerShell drive is mapped.</maml:para>
            <maml:para>For example, specify a network share, such as `\\Server01\Public`, a local directory, such as
`C:\Program Files`, or a registry key, such as `HKLM:\Software\Microsoft`.</maml:para>
            <maml:para>Temporary PowerShell drives can be associated with a local or remote location on any supported
provider drive. Mapped network drives can be associated only with a file system location on a remote
computer.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specifies a scope for the drive. The acceptable values for this parameter are: **Global**,
**Local**, and **Script**, or a number relative to the current scope. Scopes number 0 through the
number of scopes. The current scope number is 0 and its parent is 1. For more information, see
[about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
          <maml:para>Since PowerShell 3.0, when the value of the **Root** parameter is a UNC path, you can use
credentials to create file system drives.</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies a brief text description of the drive. Type any string.</maml:para>
          <maml:para>To see the descriptions of all the session's drives, `Get-PSDrive | Format-Table Name, Description`.</maml:para>
          <maml:para>To see the description of a particular drive, type `(Get-PSDrive &lt;DriveName&gt;).Description`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies a name for the new drive. For persistent mapped network drives, use a drive letter. For
temporary PowerShell drives, you aren't limited to drive letters, use any valid string.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Persist</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet creates a Windows mapped network drive. The **Persist** parameter is only
available on Windows.</maml:para>
          <maml:para>Mapped network drives are saved in Windows on the local computer. They're persistent, not
session-specific, and can be viewed and managed in File Explorer and other tools.</maml:para>
          <maml:para>When you scope the command locally, without dot-sourcing, the **Persist** parameter doesn't persist
the creation of a **PSDrive** beyond the scope in which you run the command. If you run
`New-PSDrive` inside a script, and you want the new drive to persist indefinitely, you must
dot-source the script. For best results, to force a new drive to persist, specify **Global** as the
value of the **Scope** parameter and include **Persist** in your command.</maml:para>
          <maml:para>The name of the drive must be a letter, such as `D` or `E`. The value of **Root** parameter must be
a UNC path of a different computer. The **PSProvider** parameter's value must be `FileSystem`.</maml:para>
          <maml:para>To disconnect a Windows mapped network drive, use the `Remove-PSDrive` cmdlet. When you disconnect a
Windows mapped network drive, the mapping is permanently deleted from the computer, not just deleted
from the current session.</maml:para>
          <maml:para>Mapped network drives are specific to a user account. Mapped drives created in elevated sessions or
sessions using the credential of another user aren't visible in sessions started using different
credentials.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>PSProvider</maml:name>
        <maml:description>
          <maml:para>Specifies the PowerShell provider that supports drives of this kind.</maml:para>
          <maml:para>For example, if the drive is associated with a network share or file system directory, the
PowerShell provider is `FileSystem`. If the drive is associated with a registry key, the provider is
`Registry`.</maml:para>
          <maml:para>Temporary PowerShell drives can be associated with any PowerShell provider. Mapped network drives
can be associated only with the `FileSystem` provider.</maml:para>
          <maml:para>To see a list of the providers in your PowerShell session, use the `Get-PSProvider` cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Root</maml:name>
        <maml:description>
          <maml:para>Specifies the data store location to which a PowerShell drive is mapped.</maml:para>
          <maml:para>For example, specify a network share, such as `\\Server01\Public`, a local directory, such as
`C:\Program Files`, or a registry key, such as `HKLM:\Software\Microsoft`.</maml:para>
          <maml:para>Temporary PowerShell drives can be associated with a local or remote location on any supported
provider drive. Mapped network drives can be associated only with a file system location on a remote
computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specifies a scope for the drive. The acceptable values for this parameter are: **Global**,
**Local**, and **Script**, or a number relative to the current scope. Scopes number 0 through the
number of scopes. The current scope number is 0 and its parent is 1. For more information, see
[about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSDriveInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a **PSDriveInfo** object representing the created drive.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Get-PSDrive`:

- All platforms:
  - `ndr`
- Windows:
  - `mount`

`New-PSDrive` is designed to work with the data exposed by any provider. To list the providers
available in your session, use `Get-PSProvider`. For more information about providers, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

Mapped network drives are specific to a user account. Mapped drives created in elevated sessions or
sessions using the credential of another user aren't visible in sessions started using different
credentials.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Create a temporary drive mapped to a network share ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a temporary PowerShell drive that's mapped to a network share.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-PSDrive -Name "Public" -PSProvider "FileSystem" -Root "\\Server01\Public"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name       Provider      Root
----       --------      ----
Public     FileSystem    \\Server01\Public
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`New-PSDrive` uses the **Name** parameter to specify PowerShell drive named `Public` and the
**PSProvider** parameter to specify the PowerShell `FileSystem` provider. The **Root** parameter
specifies the network share's UNC path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To view the contents from a PowerShell session: `Get-ChildItem -Path Public:`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Create a temporary drive mapped to a local directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a temporary PowerShell drive that provides access to a directory on the local
computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$parameters = @{
    Name = "MyDocs"
    PSProvider = "FileSystem"
    Root = "C:\Users\User01\Documents"
    Description = "Maps to my My Documents folder."
}
New-PSDrive @parameters
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name        Provider      Root
----        --------      ----
MyDocs      FileSystem    C:\Users\User01\Documents
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Splatting creates the parameter keys and values. The **Name** parameter specifies the drive name,
**MyDocs**. The **PSProvider** parameter specifies the PowerShell `FileSystem` provider. **Root**
specifies the local computer's directory. The **Description** parameter describes the drive's
purpose. `New-PSDrive` uses the splatted parameters to create the `MyDocs` drive.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To view the contents from a PowerShell session: `Get-ChildItem -Path MyDocs:`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Create a temporary drive for a registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a temporary PowerShell drive that provides access to a registry key. It creates
a drive named MyCompany that is mapped to the `HKLM:\Software\MyCompany` registry key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-PSDrive -Name "MyCompany" -PSProvider "Registry" -Root "HKLM:\Software\MyCompany"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name           Provider      Root
----           --------      ----
MyCompany      Registry      HKLM:\Software\MyCompany
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`New-PSDrive` uses the **Name** parameter to specify PowerShell drive named `MyCompany` and the
**PSProvider** parameter to specify the PowerShell `Registry` provider. The **Root** parameter
specifies the registry location.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To view the contents from a PowerShell session: `Get-ChildItem -Path MyCompany:`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Create a persistent mapped network drive using credentials ---------</maml:title>
        <maml:introduction>
          <maml:para>This example maps a network drive that's authenticated with a domain service account's credentials.
For more information about the **PSCredential** object that stores credentials and how passwords are
stored as a **SecureString**, see the **Credential** parameter's description.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$cred = Get-Credential -Credential Contoso\ServiceAccount
New-PSDrive -Name "S" -Root "\\Server01\Scripts" -Persist -PSProvider "FileSystem" -Credential $cred
Net Use
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Status       Local     Remote                    Network
---------------------------------------------------------
OK           S:        \\Server01\Scripts        Microsoft Windows Network
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; Remember, if you use the above snippet in a script, set the **Scope** parameter value to
&gt; "Global" to ensure the drive persists outside the current scope.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `$cred` variable stores a **PSCredential** object that contains the service account's
credentials. `Get-Credential` prompts you to enter the password that's stored in a **SecureString**.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`New-PSDrive` creates the mapped network drive by using several parameters. **Name** specifies the
`S` drive letter that Windows accepts. and **Root** defines `\\Server01\Scripts` as the location on
a remote computer. **Persist** creates a Windows mapped network drive that's saved on the local
computer. **PSProvider** specifies the `FileSystem` provider. **Credential** uses the `$cred`
variable to get the service account credentials for authentication.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The mapped drive can be viewed on the local computer in PowerShell sessions, File Explorer, and with
tools such as **net use**. To view the contents from a PowerShell session: `Get-ChildItem -Path S:`</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Create persistent and temporary drives ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows the difference between a persistent mapped network drive and a temporary
PowerShell drive that is mapped to the same network share.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If you close the PowerShell session and then open a new session, the temporary `PSDrive:` isn't
available, but the persistent `X:` drive is available. When deciding which method to use to map
network drives, consider how you'll use the drive. For example, whether it has to be persistent, and
whether the drive has to be visible to other Windows features.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Create a temporary PowerShell drive called PSDrive:
# that's mapped to the \\Server01\Public network share.
New-PSDrive -Name "PSDrive" -PSProvider "FileSystem" -Root "\\Server01\Public"</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Use the Persist parameter of New-PSDrive to create the X: mapped network drive,
# which is also mapped to the \\Server01\Public network share.
New-PSDrive -Persist -Name "X" -PSProvider "FileSystem" -Root "\\Server01\Public"</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Now, you can use the Get-PSDrive drive cmdlet to examine the two drives.
# The drives appear to be the same, although the network share name appears only
# in the root of the PSDrive: drive.
Get-PSDrive -Name "PSDrive", "X"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name       Provider      Root
----       --------      ----</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PSDrive    FileSystem    \\Server01\public
X          FileSystem    X:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Get-Member cmdlet shows that the drives have the same object type,
# System.Management.Automation.PSDriveInfo.
Get-PSDrive "PSDrive", "x" | Get-Member
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
TypeName: System.Management.Automation.PSDriveInfo</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name                MemberType   Definition
----                ----------   ----------
CompareTo           Method       System.Int32 CompareTo(PSDriveInfo drive),
Equals              Method       System.Boolean Equals(Object obj),
GetHashCode         Method       System.Int32 GetHashCode()
...
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Net Use and Get-CimInstance for the Win32_LogicalDisk class,
# and Win32_NetworkConnection class find only the persistent X: drive.
# PowerShell temporary drives are known only to PowerShell.
Net Use
Get-CimInstance Win32_LogicalDisk | Format-Table -Property DeviceID
Get-CimInstance Win32_NetworkConnection
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Status       Local     Remote                    Network
--------------------------------------------------------
OK           X:        \\contoso-pc\data         Microsoft Windows Network</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>deviceid
--------
C:
D:
X:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>LocalName    RemoteName              ConnectionState          Status
---------    ----------              ---------------          ------
X:           \\products\public       Disconnected             Unavailable
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Create persistent drive in a script ---------</maml:title>
        <maml:introduction>
          <maml:para>PSDrives are created in the scope in which the `New-PSDrive` command is run. When the command is run
within a script, the drive mapping is local to the script. When the script exits, the drive is no
longer available.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
New-PSDrive -Persist -Name "X" -PSProvider "FileSystem" -Root "\\Server01\Public" -Scope Global
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To ensure that the drive is available outside of the script you must use the **Scope** parameter to
create the drive in the **Global** scope.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/new-psdrive?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Credential</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Security/Get-Credential.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSDrive</maml:linkText>
        <command:uri>Get-PSDrive.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSDrive</maml:linkText>
        <command:uri>Remove-PSDrive.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-Service</command:name>
      <maml:description>
        <maml:para>Creates a new Windows service.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `New-Service` cmdlet creates a new entry for a Windows service in the registry and in the service database. A new service requires an executable file that runs during the service.</maml:para>
      <maml:para>The parameters of this cmdlet let you set the display name, description, startup type, and dependencies of the service.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-Service</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>BinaryPathName</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the executable file for the service. This parameter is required.</maml:para>
            <maml:para>The fully qualified path to the service binary file. If the path contains a space, it must be quoted
so that it is correctly interpreted. For example, `D:\my share\myservice.exe` should be specified as
`'"D:\my share\myservice.exe"'`.</maml:para>
            <maml:para>The path can also include arguments for an auto-start service. For example,
`'"D:\my share\myservice.exe" arg1 arg2'`. These arguments are passed to the service entry point.</maml:para>
            <maml:para>For more information, see the **lpBinaryPathName** parameter of
[CreateServiceW](/windows/win32/api/winsvc/nf-winsvc-createservicew) API.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies the account used by the service as the
[Service Logon Account](/windows/desktop/ad/about-service-logon-accounts).</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object,
such as one generated by the `Get-Credential` cmdlet. If you type a user name, this cmdlet prompts
you for a password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DependsOn</maml:name>
          <maml:description>
            <maml:para>Specifies the names of other services upon which the new service depends. To enter multiple service
names, use a comma to separate the names.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies a description of the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies a display name for the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the service. This parameter is required.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SecurityDescriptorSddl</maml:name>
          <maml:description>
            <maml:para>Specifies the **SecurityDescriptor** for the service in **Sddl** format.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StartupType</maml:name>
          <maml:description>
            <maml:para>Sets the startup type of the service. The acceptable values for this parameter are:</maml:para>
            <maml:para>- **Automatic** - The service is started or was started by the operating system, at system start-up.
  If an automatically started service depends on a manually started service, the manually started
  service is also started automatically at system startup.
- **AutomaticDelayedStart** - Starts shortly after the system boots.
- **Disabled** - The service is disabled and cannot be started by a user or application.
- **InvalidValue** - This value is not supported. Using this value results in an error.
- **Manual** - The service is started only manually, by a user, using the Service Control Manager,
  or by an application.</maml:para>
            <maml:para>The default value is **Automatic**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.ServiceStartupType</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>BinaryPathName</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the executable file for the service. This parameter is required.</maml:para>
          <maml:para>The fully qualified path to the service binary file. If the path contains a space, it must be quoted
so that it is correctly interpreted. For example, `D:\my share\myservice.exe` should be specified as
`'"D:\my share\myservice.exe"'`.</maml:para>
          <maml:para>The path can also include arguments for an auto-start service. For example,
`'"D:\my share\myservice.exe" arg1 arg2'`. These arguments are passed to the service entry point.</maml:para>
          <maml:para>For more information, see the **lpBinaryPathName** parameter of
[CreateServiceW](/windows/win32/api/winsvc/nf-winsvc-createservicew) API.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies the account used by the service as the
[Service Logon Account](/windows/desktop/ad/about-service-logon-accounts).</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object,
such as one generated by the `Get-Credential` cmdlet. If you type a user name, this cmdlet prompts
you for a password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DependsOn</maml:name>
        <maml:description>
          <maml:para>Specifies the names of other services upon which the new service depends. To enter multiple service
names, use a comma to separate the names.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies a description of the service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies a display name for the service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the service. This parameter is required.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SecurityDescriptorSddl</maml:name>
        <maml:description>
          <maml:para>Specifies the **SecurityDescriptor** for the service in **Sddl** format.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StartupType</maml:name>
        <maml:description>
          <maml:para>Sets the startup type of the service. The acceptable values for this parameter are:</maml:para>
          <maml:para>- **Automatic** - The service is started or was started by the operating system, at system start-up.
  If an automatically started service depends on a manually started service, the manually started
  service is also started automatically at system startup.
- **AutomaticDelayedStart** - Starts shortly after the system boots.
- **Disabled** - The service is disabled and cannot be started by a user or application.
- **InvalidValue** - This value is not supported. Using this value results in an error.
- **Manual** - The service is started only manually, by a user, using the Service Control Manager,
  or by an application.</maml:para>
          <maml:para>The default value is **Automatic**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.ServiceStartupType</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns an object representing the new service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

To run this cmdlet, start PowerShell by using the **Run as administrator** option.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Create a service ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-Service -Name "TestService" -BinaryPathName 'C:\WINDOWS\System32\svchost.exe -k netsvcs'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command creates a service named TestService.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Create a service that includes description, startup type, and display name ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$params = @{
  Name = "TestService"
  BinaryPathName = 'C:\WINDOWS\System32\svchost.exe -k netsvcs'
  DependsOn = "NetLogon"
  DisplayName = "Test Service"
  StartupType = "Manual"
  Description = "This is a test service."
}
New-Service @params
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command creates a service named TestService. It uses the parameters of `New-Service` to specify
a description, startup type, and display name for the new service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: View the new service ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-CimInstance -ClassName Win32_Service -Filter "Name='testservice'"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
ExitCode  : 0
Name      : testservice
ProcessId : 0
StartMode : Auto
State     : Stopped
Status    : OK
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses `Get-CimInstance` to get the **Win32_Service** object for the new service. This
object includes the start mode and the service description.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Set the SecurityDescriptor of a service when creating. ---------</maml:title>
        <maml:introduction>
          <maml:para>This example adds the **SecurityDescriptor** of the service being created.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$SDDL = "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;SU)"
$params = @{
  BinaryPathName = 'C:\WINDOWS\System32\svchost.exe -k netsvcs'
  DependsOn = "NetLogon"
  DisplayName = "Test Service"
  StartupType = "Manual"
  Description = "This is a test service."
  SecurityDescriptorSddl = $SDDL
}
New-Service @params
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **SecurityDescriptor** is stored in the `$SDDLToSet` variable. The **SecurityDescriptorSddl**
parameter uses `$SDDL` to set the **SecurityDescriptor** of the new service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/new-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Pop-Location</command:name>
      <maml:description>
        <maml:para>Changes the current location to the location most recently pushed onto the stack.</maml:para>
      </maml:description>
      <command:verb>Pop</command:verb>
      <command:noun>Location</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Pop-Location` cmdlet changes the current location to the location most recently pushed onto the stack by using the `Push-Location` cmdlet. You can pop a location from the default stack or from a stack that you create by using a `Push-Location` command.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Pop-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the location to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StackName</maml:name>
          <maml:description>
            <maml:para>Specifies the location stack from which the location is popped. Enter a location stack name.</maml:para>
            <maml:para>Without this parameter, `Pop-Location` pops a location from the current location stack. By
default, the current location stack is the unnamed default location stack that PowerShell
creates. To make a location stack the current location stack, use the **StackName** parameter
of the `Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).</maml:para>
            <maml:para>`Pop-Location` cannot pop a location from the unnamed default stack unless it is the current
location stack.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Passes an object that represents the location to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StackName</maml:name>
        <maml:description>
          <maml:para>Specifies the location stack from which the location is popped. Enter a location stack name.</maml:para>
          <maml:para>Without this parameter, `Pop-Location` pops a location from the current location stack. By
default, the current location stack is the unnamed default location stack that PowerShell
creates. To make a location stack the current location stack, use the **StackName** parameter
of the `Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).</maml:para>
          <maml:para>`Pop-Location` cannot pop a location from the unnamed default stack unless it is the current
location stack.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PathInfo** object representing the
current path after the cmdlet's operation.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Pop-Location`:

- All Platforms:
  - `popd`

PowerShell supports multiple runspaces per process. Each runspace has its own _current directory_.
This is not the same as `[System.Environment]::CurrentDirectory`. This behavior can be an issue
when calling .NET APIs or running native applications without providing explicit directory paths.

Even if the location cmdlets did set the process-wide current directory, you can't depend on it
because another runspace might change it at any time. You should use the location cmdlets to perform
path-based operations using the current working directory specific to the current runspace.

A stack is a last-in, first-out list in which only the most recently added item can be accessed. You
add items to a stack in the order that you use them, and then retrieve them for use in the reverse
order. PowerShell lets you store provider locations in location stacks.

PowerShell creates an unnamed default location stack and you can create multiple named location
stacks. If you do not specify a stack name, PowerShell uses the current location stack. By
default, the unnamed default location is the current location stack, but you can use the
`Set-Location` cmdlet to change the current location stack.

To manage location stacks, use the PowerShell `*-Location` cmdlets, as follows:

- To add a location to a location stack, use the `Push-Location` cmdlet.

- To get a location from a location stack, use the `Pop-Location` cmdlet.

- To display the locations in the current location stack, use the **Stack** parameter of the
  `Get-Location` cmdlet.

- To display the locations in a named location stack, use the **StackName** parameter of the
  `Get-Location` cmdlet.

- To create a new location stack, use the **StackName** parameter of the `Push-Location` cmdlet. If
  you specify a stack that does not exist, `Push-Location` creates the stack.

- To make a location stack the current location stack, use the **StackName** parameter of the
  `Set-Location` cmdlet.

The unnamed default location stack is fully accessible only when it is the current location stack.
If you make a named location stack the current location stack, you can no longer use the
`Push-Location` or `Pop-Location` cmdlets to add or get items from the default stack or use the
`Get-Location` cmdlet to display the locations in the unnamed stack. To make the unnamed stack
the current stack, use the **StackName** parameter of the `Set-Location` cmdlet with a value of
`$null` or an empty string (`""`).

You can also refer to `Pop-Location` by its built-in alias, `popd`. For more information, see
[about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).

`Pop-Location` is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Change to most recent location ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Pop-Location
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command changes your location to the location most recently added to the current stack.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Change to most recent location in a named stack ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Pop-Location -StackName "Stack2"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command changes your location to the location most recently added to the Stack2 location stack.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about location stacks, see the [Notes](#notes).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Move between locations for different providers ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; pushd HKLM:\Software\Microsoft\PowerShell
PS HKLM:\Software\Microsoft\PowerShell&gt; pushd Cert:\LocalMachine\TrustedPublisher
PS Cert:\LocalMachine\TrustedPublisher&gt; popd
PS HKLM:\Software\Microsoft\PowerShell&gt; popd
PS C:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands use the `Push-Location` and `Pop-Location` cmdlets to move between locations
supported by different PowerShell providers. The commands use the `pushd` alias for `Push-Location`
and the `popd` alias for `Pop-Location`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command pushes the current file system location onto the stack and moves to the HKLM drive
supported by the PowerShell Registry provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command pushes the registry location onto the stack and moves to a location supported by
the PowerShell Certificate provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The last two commands pop those locations off the stack. The first `popd` command returns to the
Registry drive, and the second command returns to the file system drive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/pop-location?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Location</maml:linkText>
        <command:uri>Get-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Push-Location</maml:linkText>
        <command:uri>Push-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Location</maml:linkText>
        <command:uri>Set-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Aliases</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Aliases.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Push-Location</command:name>
      <maml:description>
        <maml:para>Adds the current location to the top of a location stack.</maml:para>
      </maml:description>
      <command:verb>Push</command:verb>
      <command:noun>Location</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Push-Location` cmdlet adds ("pushes") the current location onto a location stack. If you specify a path, `Push-Location` pushes the current location onto a location stack and then changes the current location to the location specified by the path. You can use the `Pop-Location` cmdlet to get locations from the location stack.</maml:para>
      <maml:para>By default, the `Push-Location` cmdlet pushes the current location onto the current location stack, but you can use the **StackName** parameter to specify an alternate location stack. If the stack does not exist, `Push-Location` creates it.</maml:para>
      <maml:para>For more information about location stacks, see the [Notes](#notes).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Push-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object representing the location to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Changes your location to the location specified by this path after it adds (pushes) the current
location onto the top of the stack. Enter a path to any location whose provider supports this
cmdlet. Wildcards are permitted. The parameter name is optional.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StackName</maml:name>
          <maml:description>
            <maml:para>Specifies the location stack to which the current location is added. Enter a location stack name.
If the stack does not exist, `Push-Location` creates it.</maml:para>
            <maml:para>Without this parameter, `Push-Location` adds the location to the current location stack. By
default, the current location stack is the unnamed default location stack that PowerShell creates.
To make a location stack the current location stack, use the **StackName** parameter of the
`Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; `Push-Location` cannot add a location to the unnamed default stack unless it is the current
&gt; location stack.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Push-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the new location. Unlike the **Path** parameter, the value of the
**LiteralPath** parameter is used exactly as it is typed. No characters are interpreted as
wildcards. If the path includes escape characters, enclose it in single quotation marks. Single
quotation marks tell PowerShell not to interpret any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object representing the location to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StackName</maml:name>
          <maml:description>
            <maml:para>Specifies the location stack to which the current location is added. Enter a location stack name.
If the stack does not exist, `Push-Location` creates it.</maml:para>
            <maml:para>Without this parameter, `Push-Location` adds the location to the current location stack. By
default, the current location stack is the unnamed default location stack that PowerShell creates.
To make a location stack the current location stack, use the **StackName** parameter of the
`Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; `Push-Location` cannot add a location to the unnamed default stack unless it is the current
&gt; location stack.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the new location. Unlike the **Path** parameter, the value of the
**LiteralPath** parameter is used exactly as it is typed. No characters are interpreted as
wildcards. If the path includes escape characters, enclose it in single quotation marks. Single
quotation marks tell PowerShell not to interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Passes an object representing the location to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Changes your location to the location specified by this path after it adds (pushes) the current
location onto the top of the stack. Enter a path to any location whose provider supports this
cmdlet. Wildcards are permitted. The parameter name is optional.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StackName</maml:name>
        <maml:description>
          <maml:para>Specifies the location stack to which the current location is added. Enter a location stack name.
If the stack does not exist, `Push-Location` creates it.</maml:para>
          <maml:para>Without this parameter, `Push-Location` adds the location to the current location stack. By
default, the current location stack is the unnamed default location stack that PowerShell creates.
To make a location stack the current location stack, use the **StackName** parameter of the
`Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; `Push-Location` cannot add a location to the unnamed default stack unless it is the current
&gt; location stack.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path (but not a literal path) to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PathInfo** object representing the
current path after the cmdlet's operation.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Push-Location`:

- All Platforms:
  - `pushd`

PowerShell supports multiple runspaces per process. Each runspace has its own _current directory_.
This is not the same as `[System.Environment]::CurrentDirectory`. This behavior can be an issue
when calling .NET APIs or running native applications without providing explicit directory paths.

Even if the location cmdlets did set the process-wide current directory, you can't depend on it
because another runspace might change it at any time. You should use the location cmdlets to perform
path-based operations using the current working directory specific to the current runspace.

A stack is a last-in, first-out list in which only the most recently added item is accessible.
You add items to a stack in the order that you use them, and then retrieve them for use in the
reverse order. PowerShell lets you store provider locations in location stacks.

PowerShell creates an unnamed default location stack and you can create multiple named location
stacks. If you do not specify a stack name, PowerShell uses the current location stack. By
default, the unnamed default location is the current location stack, but you can use the
`Set-Location` cmdlet to change the current location stack.

To manage location stacks, use the PowerShell Location cmdlets, as follows.

- To add a location to a location stack, use the `Push-Location` cmdlet.

- To get a location from a location stack, use the `Pop-Location` cmdlet.

- To display the locations in the current location stack, use the **Stack** parameter of the
  `Get-Location` cmdlet.

- To display the locations in a named location stack, use the **StackName** parameter of the
  `Get-Location` cmdlet.

- To create a new location stack, use the StackName parameter of the `Push-Location` cmdlet. If you
  specify a stack that does not exist, `Push-Location` creates the stack.

- To make a location stack the current location stack, use the StackName parameter of the
  `Set-Location` cmdlet.

The unnamed default location stack is fully accessible only when it is the current location stack.
If you make a named location stack the current location stack, you can no longer use the
`Push-Location` or `Pop-Location` cmdlets to add or get items from the default stack or use the
`Get-Location` cmdlet to display the locations in the unnamed stack. To make the unnamed stack
the current stack, use the **StackName** parameter of the `Set-Location` cmdlet with a value of
`$null` or an empty string (`""`).

You can also refer to `Push-Location` by its built-in alias, `pushd`. For more information, see
[about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).

The `Push-Location` cmdlet is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>This example pushes the current location onto the default location stack and then changes the
location to `C:\Windows`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
PS C:\&gt; Push-Location C:\Windows
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>This example pushes the current location onto the RegFunction stack and changes the current location
to the `HKLM:\Software\Policies` location.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
PS C:\&gt; Push-Location HKLM:\Software\Policies -StackName RegFunction
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You can use the Location cmdlets in any PowerShell drive (PSDrive).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>This command pushes the current location onto the default stack. It does not change the location.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
PS C:\&gt; Push-Location
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4 - Create and use a named stack ---------</maml:title>
        <maml:introduction>
          <maml:para>These commands show how to create and use a named location stack.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```
PS C:\&gt; Push-Location ~ -StackName Stack2
PS C:\Users\User01&gt; Pop-Location -StackName Stack2
PS C:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command pushes the current location onto a new stack named Stack2, and then changes the
current location to the home directory, represented in the command by the tilde symbol (`~`),
which when used on a FileSystem provider drives is equivalent to `$HOME`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If Stack2 does not already exist in the session, `Push-Location` creates it. The second command uses
the `Pop-Location` cmdlet to pop the original location (`C:\`) from the Stack2 stack. Without the
**StackName** parameter, `Pop-Location` would pop the location from the unnamed default stack.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about location stacks, see the [Notes](#notes).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/push-location?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Location</maml:linkText>
        <command:uri>Get-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Pop-Location</maml:linkText>
        <command:uri>Pop-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Location</maml:linkText>
        <command:uri>Set-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Aliases</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Aliases.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-Item</command:name>
      <maml:description>
        <maml:para>Deletes the specified items.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-Item` cmdlet deletes one or more items. Because it's supported by many providers, it can delete many different types of items, including files, folders, registry keys, variables, aliases, and functions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
            <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DeleteKey</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
            <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
            <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
            <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
            <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
            <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet. For more information, see the following
articles:</maml:para>
          <maml:para>- [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference)
- [about_Functions_CmdletBindingAttribute](../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact)</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DeleteKey</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Certificate** provider. The **Certificate**
provider and this parameter are only available on Windows platforms.</maml:para>
          <maml:para>When provided, the cmdlet deletes the private key when the certificate is deleted.</maml:para>
          <maml:para>For more information, see
[about_Certificate_Provider](../Microsoft.PowerShell.Security/About/about_Certificate_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          <maml:para>When using **Recurse** with **Exclude**, **Exclude** only filters results of the current directory.
If there are files that match the **Exclude** pattern in subfolders, those files are removed along
with its parent directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they're retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to remove items that can't otherwise be changed, such as hidden or read-only
files or read-only aliases or variables. The cmdlet can't remove constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
parameter, the cmdlet can't override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies a path of the items being removed.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Recurse</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet deletes the items in the specified locations and in all child items of
the locations.</maml:para>
          <maml:para>The **Recurse** parameter might not delete all subfolders or all child items. This is a known issue.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and newer.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This parameter is only
available on Windows. This parameter can't be used in combination with the **Recurse** parameter.</maml:para>
          <maml:para>You can use `Remove-Item` to delete an alternative data stream, such as `Zone.Identifier`.
However, it isn't the recommended way to eliminate security checks that block files that are
downloaded from the Internet. If you verify that a downloaded file is safe, use the `Unblock-File`
cmdlet.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0. As of Windows PowerShell 7.2, `Remove-Item`
can remove alternative data streams from directories as well as files.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Remove-Item`:

- All platforms:
  - `del`
  - `erase`
  - `rd`
  - `ri`
- Windows:
  - `rm`
  - `rmdir`

The `Remove-Item` cmdlet is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

When you try to delete a folder that contains items without using the **Recurse** parameter, the
cmdlet prompts for confirmation. Using `-Confirm:$false` doesn't suppress the prompt. This is by
design.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Delete files that have any file extension ---------</maml:title>
        <maml:introduction>
          <maml:para>This example deletes all files with names that include a dot (`.`) from the `C:\Test` folder.
Because the command specifies a dot, the command doesn't delete folders or files that have no
file extension.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Item C:\Test\*.*
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Delete document files in a folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This example deletes from the current folder all files that have a `.doc` file extension and a
name that doesn't include `*1*`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Item * -Include *.doc -Exclude *1*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>It uses the wildcard character (`*`) to specify the contents of the current folder. It uses the
**Include** and **Exclude** parameters to specify the files to delete.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Delete hidden, read-only files ---------</maml:title>
        <maml:introduction>
          <maml:para>This command deletes a file that's both _hidden_ and _read-only_.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Item -Path C:\Test\hidden-RO-file.txt -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>It uses the **Path** parameter to specify the file. It uses the **Force**
parameter to delete it. Without **Force**, you can't delete _read-only_ or
_hidden_ files.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Delete files in subfolders recursively ---------</maml:title>
        <maml:introduction>
          <maml:para>This command deletes all the CSV files in the current folder and all subfolders recursively.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Because the **Recurse** parameter in `Remove-Item` has a known issue, the command in this example
uses `Get-ChildItem` to get the desired files, and then uses the pipeline operator to pass them to
`Remove-Item`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem * -Include *.csv -Recurse | Remove-Item
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In the `Get-ChildItem` command, **Path** has a value of (`*`), which represents the contents of the
current folder. It uses **Include** to specify the CSV file type, and it uses **Recurse** to make
the retrieval recursive. If you try to specify the file type in the path, such as `-Path *.csv`, the
cmdlet interprets the subject of the search to be a file that has no child items, and **Recurse**
fails.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This behavior was fixed in Windows versions 1909 and up.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Delete subkeys recursively ---------</maml:title>
        <maml:introduction>
          <maml:para>This command deletes the "OldApp" registry key and all its subkeys and values. It uses `Remove-Item`
to remove the key. The path is specified, but the optional parameter name (**Path**) is omitted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Recurse** parameter deletes all of the contents of the "OldApp" key recursively. If the key
contains subkeys and you omit the **Recurse** parameter, you are prompted to confirm that you want
to delete the contents of the key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Item HKLM:\Software\MyCompany\OldApp -Recurse
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Deleting files with special characters ---------</maml:title>
        <maml:introduction>
          <maml:para>The following example shows how to delete files that contain special characters like brackets or
parentheses.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\temp\Downloads</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a---          6/1/2018  12:19 PM           1362 myFile.txt
-a---          6/1/2018  12:30 PM           1132 myFile[1].txt
-a---          6/1/2018  12:19 PM           1283 myFile[2].txt
-a---          6/1/2018  12:19 PM           1432 myFile[3].txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem | Where-Object Name -Like '*`[*'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\temp\Downloads</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a---          6/1/2018  12:30 PM           1132 myFile[1].txt
-a---          6/1/2018  12:19 PM           1283 myFile[2].txt
-a---          6/1/2018  12:19 PM           1432 myFile[3].txt</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem | Where-Object Name -Like '*`[*' | ForEach-Object { Remove-Item -LiteralPath $_.Name }
Get-ChildItem
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\temp\Downloads</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a---          6/1/2018  12:19 PM           1362 myFile.txt
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Remove an alternate data stream ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to use the **Stream** dynamic parameter of the `Remove-Item` cmdlet to delete
an alternate data stream. The stream parameter is introduced in Windows PowerShell 3.0.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   FileName: \\C:\Test\Copy-Script.ps1</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Stream                   Length
------                   ------
Zone.Identifier              26</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
Get-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Get-Item : Could not open alternate data stream 'Zone.Identifier' of file 'C:\Test\Copy-Script.ps1'.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Stream** parameter `Get-Item` gets the `Zone.Identifier` stream of the `Copy-Script.ps1`
file. `Remove-Item` uses the **Stream** parameter to remove the `Zone.Identifier` stream of the
file. Finally, the `Get-Item` cmdlet shows that the `Zone.Identifier` stream was deleted.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/remove-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Preference_Variables</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Preference_Variables.md#confirmpreference</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Functions_CmdletBindingAttribute</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Functions_CmdletBindingAttribute.md#confirmimpact</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-ItemProperty</command:name>
      <maml:description>
        <maml:para>Deletes the property and its value from an item.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-ItemProperty` cmdlet deletes a property and its value from an item. You can use it to delete registry values and the data that they store.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the properties to remove.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the item whose properties are being removed.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to remove a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the properties to remove.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to remove a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the names of the properties to remove.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the item whose properties are being removed.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Remove-ItemProperty`:

- All platforms:
  - `rp`

- In the PowerShell Registry provider, registry values are considered to be properties of a registry
  key or subkey. You can use the **ItemProperty** cmdlets to manage these values.
- `Remove-ItemProperty` is designed to work with the data exposed by any provider. To list the
  providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Delete a registry value ---------</maml:title>
        <maml:introduction>
          <maml:para>This command deletes the "SmpProperty" registry value, and its data, from the "SmpApplication"
subkey of the `HKEY_LOCAL_MACHINE\Software` registry key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-ItemProperty -Path "HKLM:\Software\SmpApplication" -Name "SmpProperty"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Because the command is issued from a file system drive (`PS C:\&gt;`), it includes the fully qualified
path of the "SmpApplication" subkey, including the drive, `HKLM:`, and the "Software" key.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Delete a registry value from the HKCU location ---------</maml:title>
        <maml:introduction>
          <maml:para>These commands delete the "Options" registry value, and its data, from the "MyApp" subkey of
"HKEY_CURRENT_USER\Software\MyCompany".</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Set-Location HKCU:\Software\MyCompany\MyApp
PS HKCU:\Software\MyCompany\MyApp&gt; Remove-ItemProperty -Path . -Name "Options" -Confirm
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses the `Set-Location` cmdlet to change the current location to the
**HKEY_CURRENT_USER** drive (`HKCU:`) and the `Software\MyCompany\MyApp` subkey.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses `Remove-ItemProperty` to remove the "Options" registry value, and its data,
from the "MyApp" subkey. Because **Path** is required, the command uses a dot (`.`) to indicate the
current location. The **Confirm** parameter requests a user prompt before deleting the value.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Remove a registry value by using the pipeline ---------</maml:title>
        <maml:introduction>
          <maml:para>This command deletes the "NoOfEmployees" registry value, and its data, from the
`HKLM\Software\MyCompany` registry key.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Item -Path HKLM:\Software\MyCompany | Remove-ItemProperty -Name NoOfEmployees
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command uses the `Get-Item` cmdlet to get an item that represents the registry key.
It uses a pipeline operator (`|`) to send the object to `Remove-ItemProperty`.
Then, it uses the **Name** parameter of `Remove-ItemProperty` to specify the name of the registry
value.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/remove-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Location</maml:linkText>
        <command:uri>Set-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-PSDrive</command:name>
      <maml:description>
        <maml:para>Deletes temporary PowerShell drives and disconnects mapped network drives.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>PSDrive</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-PSDrive` cmdlet deletes temporary PowerShell drives that were created by using the `New-PSDrive` cmdlet.</maml:para>
      <maml:para>Beginning in Windows PowerShell 3.0, `Remove-PSDrive` also disconnects mapped network drives, including, but not limited to, drives created by using the **Persist** parameter of `New-PSDrive`.</maml:para>
      <maml:para>`Remove-PSDrive` cannot delete Windows physical or logical drives.</maml:para>
      <maml:para>Beginning in Windows PowerShell 3.0, when an external drive is connected to the computer, PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not need to restart PowerShell. Similarly, when an external drive is disconnected from the computer, PowerShell automatically deletes the PSDrive that represents the removed drive.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-PSDrive</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Removes the current PowerShell drive.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the drives to remove. Do not type a colon (`:`) after the drive name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies an array of **PSProvider** objects. This cmdlet removes and disconnects all of the drives
associated with the specified PowerShell provider.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specifies a scope for the drive. The acceptable values for this parameter are: `Global`, `Local`,
and `Script`, or a number relative to the current scope. Scopes number `0` through the number of
scopes. The current scope number is `0` and its parent is `1`. For more information, see
[about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-PSDrive</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Removes the current PowerShell drive.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>LiteralName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the drive.</maml:para>
            <maml:para>The value of **LiteralName** is used exactly as typed. No characters are interpreted as wildcards.
If the name includes escape characters, enclose it in single quotation marks (`'`). Single quotation
marks instruct PowerShell not to interpret any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PSProvider</maml:name>
          <maml:description>
            <maml:para>Specifies an array of **PSProvider** objects. This cmdlet removes and disconnects all of the drives
associated with the specified PowerShell provider.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specifies a scope for the drive. The acceptable values for this parameter are: `Global`, `Local`,
and `Script`, or a number relative to the current scope. Scopes number `0` through the number of
scopes. The current scope number is `0` and its parent is `1`. For more information, see
[about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Removes the current PowerShell drive.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>LiteralName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the drive.</maml:para>
          <maml:para>The value of **LiteralName** is used exactly as typed. No characters are interpreted as wildcards.
If the name includes escape characters, enclose it in single quotation marks (`'`). Single quotation
marks instruct PowerShell not to interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the names of the drives to remove. Do not type a colon (`:`) after the drive name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PSProvider</maml:name>
        <maml:description>
          <maml:para>Specifies an array of **PSProvider** objects. This cmdlet removes and disconnects all of the drives
associated with the specified PowerShell provider.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specifies a scope for the drive. The acceptable values for this parameter are: `Global`, `Local`,
and `Script`, or a number relative to the current scope. Scopes number `0` through the number of
scopes. The current scope number is `0` and its parent is `1`. For more information, see
[about_Scopes](../Microsoft.PowerShell.Core/About/about_Scopes.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSDriveInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a drive object, such as from the `Get-PSDrive` cmdlet, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Remove-PSDrive`:

- All platforms:
  - `rdr`

- The `Remove-PSDrive` cmdlet is designed to work with the data exposed by any PowerShell provider.
  To list the providers in your session, use the `Get-PSProvider` cmdlet. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Remove a file system drive ---------</maml:title>
        <maml:introduction>
          <maml:para>This command removes a temporary file system drive named `smp`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-PSDrive -Name smp
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Remove mapped network drives ---------</maml:title>
        <maml:introduction>
          <maml:para>This command uses `Remove-PSDrive` to disconnect the `X:` and `S:` mapped network drives.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-PSDrive X, S | Remove-PSDrive
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/remove-psdrive?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSDrive</maml:linkText>
        <command:uri>Get-PSDrive.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-PSDrive</maml:linkText>
        <command:uri>New-PSDrive.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-Service</command:name>
      <maml:description>
        <maml:para>Removes a Windows service.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-Service` cmdlet removes a Windows service in the registry and in the service database.</maml:para>
      <maml:para>The `Remove-Service` cmdlet was introduced in PowerShell 6.0.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of the services to remove. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects that represent the services to remove. Enter a variable that
contains the objects, or type a command or expression that gets the objects.</maml:para>
            <maml:para>The **InputObject** parameter doesn't enumerate collections. If a collection is passed, an error is
thrown. When working with collections, pipe the input to enumerate the values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.ServiceProcess.ServiceController</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects that represent the services to remove. Enter a variable that
contains the objects, or type a command or expression that gets the objects.</maml:para>
          <maml:para>The **InputObject** parameter doesn't enumerate collections. If a collection is passed, an error is
thrown. When working with collections, pipe the input to enumerate the values.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.ServiceProcess.ServiceController</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of the services to remove. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains the name of a service to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

To run this cmdlet, start PowerShell by using the **Run as administrator** option.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Remove a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This removes a service named TestService.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Remove-Service -Name "TestService"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Remove a service using the display name ---------</maml:title>
        <maml:introduction>
          <maml:para>This example removes a service named TestService. The command uses `Get-Service` to get an object
that represents the TestService service using the display name. The pipeline operator (`|`) pipes
the object to `Remove-Service`, which removes the service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service -DisplayName "Test Service" | Remove-Service
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/remove-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Rename-Computer</command:name>
      <maml:description>
        <maml:para>Renames a computer.</maml:para>
      </maml:description>
      <command:verb>Rename</command:verb>
      <command:noun>Computer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Rename-Computer` cmdlet renames the local computer or a remote computer. It renames one computer in each command.</maml:para>
      <maml:para>This cmdlet was introduced in Windows PowerShell 3.0.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Rename-Computer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Renames the specified remote computer.
The default is the local computer.</maml:para>
            <maml:para>Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.
To specify the local computer, type the computer name, a dot (`.`), or `localhost`.</maml:para>
            <maml:para>This parameter does not rely on PowerShell remoting.
You can use the **ComputerName** parameter of `Rename-Computer` even if your computer is not
configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DomainCredential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to connect to the domain.
Explicit credentials are required to rename a computer that is joined to a domain.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such
as one generated by the `Get-Credential` cmdlet.</maml:para>
            <maml:para>If you type a user name, this cmdlet prompts you for a password.</maml:para>
            <maml:para>To specify a user account that has permission to connect to the computer that is specified by the
**ComputerName** parameter, use the **LocalCredential** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LocalCredential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to connect to the computer specified by the
**ComputerName** parameter. The default is the current user.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such as
one generated by the `Get-Credential` cmdlet.</maml:para>
            <maml:para>If you type a user name, this cmdlet prompts you for a password.</maml:para>
            <maml:para>To specify a user account that has permission to connect to the domain, use the **DomainCredential**
parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>NewName</maml:name>
          <maml:description>
            <maml:para>Specifies a new name for the computer.
This parameter is required.</maml:para>
            <maml:para>Standard names may contain letters (`a-z`), (`A-Z`), numbers (`0-9`), and hyphens (`-`), but no
spaces or periods (`.`). The name may not consist entirely of digits, and may not be longer than
63 characters</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the results of the command.
Otherwise, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Restart</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet restarts the computer that was renamed.
A restart is often required to make the change effective.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WsmanAuthentication</maml:name>
          <maml:description>
            <maml:para>Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the
WSMan protocol. The acceptable values for this parameter are:</maml:para>
            <maml:para>- **Basic**
- **CredSSP**
- **Default**
- **Digest**
- **Kerberos**
- **Negotiate**</maml:para>
            <maml:para>The default value is **Default**.</maml:para>
            <maml:para>For more information about the values of this parameter, see
[AuthenticationMechanism Enumeration](xref:System.Management.Automation.Runspaces.AuthenticationMechanism).</maml:para>
            <maml:para>&gt; [!WARNING]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user
&gt; credentials are passed to a remote computer to be authenticated, is designed for commands that
&gt; require authentication on more than one resource, such as accessing a remote network share.
&gt; This mechanism increases the security risk of the remote operation.
&gt; If the remote computer is compromised, the credentials that are passed to it can be used to
&gt; control &gt; the network session.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Renames the specified remote computer.
The default is the local computer.</maml:para>
          <maml:para>Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.
To specify the local computer, type the computer name, a dot (`.`), or `localhost`.</maml:para>
          <maml:para>This parameter does not rely on PowerShell remoting.
You can use the **ComputerName** parameter of `Rename-Computer` even if your computer is not
configured to run remote commands.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DomainCredential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to connect to the domain.
Explicit credentials are required to rename a computer that is joined to a domain.</maml:para>
          <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such
as one generated by the `Get-Credential` cmdlet.</maml:para>
          <maml:para>If you type a user name, this cmdlet prompts you for a password.</maml:para>
          <maml:para>To specify a user account that has permission to connect to the computer that is specified by the
**ComputerName** parameter, use the **LocalCredential** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LocalCredential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to connect to the computer specified by the
**ComputerName** parameter. The default is the current user.</maml:para>
          <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or enter a **PSCredential** object, such as
one generated by the `Get-Credential` cmdlet.</maml:para>
          <maml:para>If you type a user name, this cmdlet prompts you for a password.</maml:para>
          <maml:para>To specify a user account that has permission to connect to the domain, use the **DomainCredential**
parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>NewName</maml:name>
        <maml:description>
          <maml:para>Specifies a new name for the computer.
This parameter is required.</maml:para>
          <maml:para>Standard names may contain letters (`a-z`), (`A-Z`), numbers (`0-9`), and hyphens (`-`), but no
spaces or periods (`.`). The name may not consist entirely of digits, and may not be longer than
63 characters</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns the results of the command.
Otherwise, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Restart</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet restarts the computer that was renamed.
A restart is often required to make the change effective.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WsmanAuthentication</maml:name>
        <maml:description>
          <maml:para>Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the
WSMan protocol. The acceptable values for this parameter are:</maml:para>
          <maml:para>- **Basic**
- **CredSSP**
- **Default**
- **Digest**
- **Kerberos**
- **Negotiate**</maml:para>
          <maml:para>The default value is **Default**.</maml:para>
          <maml:para>For more information about the values of this parameter, see
[AuthenticationMechanism Enumeration](xref:System.Management.Automation.Runspaces.AuthenticationMechanism).</maml:para>
          <maml:para>&gt; [!WARNING]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user
&gt; credentials are passed to a remote computer to be authenticated, is designed for commands that
&gt; require authentication on more than one resource, such as accessing a remote network share.
&gt; This mechanism increases the security risk of the remote operation.
&gt; If the remote computer is compromised, the credentials that are passed to it can be used to
&gt; control &gt; the network session.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet has no parameters that take input by value. However, you can pipe the values of
the **ComputerName** and **NewName** properties of objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet doesn't return any output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.RenameComputerChangeInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **RenameComputerChangeInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Rename the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This command renames the local computer to `Server044` and then restarts it to make the change
effective.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Rename-Computer -NewName "Server044" -DomainCredential Domain01\Admin01 -Restart
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Rename a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This command renames the `Srv01` computer to `Server001`. The computer is not restarted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **DomainCredential** parameter specifies the credentials of a user who has permission to rename
computers in the domain.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **Force** parameter suppresses the confirmation prompt.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$renameParams = @{
    ComputerName = "Srv01"
    NewName = "Server001"
    DomainCredential = "Domain01\Admin01"
    Force = $true
}
Rename-Computer @renameParams
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/rename-computer?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Computer</maml:linkText>
        <command:uri>Restart-Computer.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Computer</maml:linkText>
        <command:uri>Stop-Computer.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Rename-Item</command:name>
      <maml:description>
        <maml:para>Renames an item in a PowerShell provider namespace.</maml:para>
      </maml:description>
      <command:verb>Rename</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Rename-Item` cmdlet changes the name of a specified item. This cmdlet does not affect the content of the item being renamed.</maml:para>
      <maml:para>You can't use `Rename-Item` to move an item, such as by specifying a path together with the new name. To move and rename an item, use the `Move-Item` cmdlet.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Rename-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to rename items that can't otherwise be changed, such as hidden or read-only files
or read-only aliases or variables. The cmdlet can't change constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>Even using the **Force** parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>NewName</maml:name>
          <maml:description>
            <maml:para>Specifies the new name of the item. Enter only a name, not a path and name. If you enter a path that
differs from the path that is specified in the **Path** parameter, `Rename-Item` generates an error.
To rename and move an item, use `Move-Item`.</maml:para>
            <maml:para>You can't use wildcard characters in the value of the **NewName** parameter. To specify a name for
multiple files, use the `-replace` operator in a regular expression. For more information about the
`-replace` operator, see
[about_Comparison_Operators](../Microsoft.PowerShell.Core/About/about_Comparison_Operators.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the item to rename.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Rename-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to rename items that can't otherwise be changed, such as hidden or read-only files
or read-only aliases or variables. The cmdlet can't change constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>Even using the **Force** parameter, the cmdlet can't override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>NewName</maml:name>
          <maml:description>
            <maml:para>Specifies the new name of the item. Enter only a name, not a path and name. If you enter a path that
differs from the path that is specified in the **Path** parameter, `Rename-Item` generates an error.
To rename and move an item, use `Move-Item`.</maml:para>
            <maml:para>You can't use wildcard characters in the value of the **NewName** parameter. To specify a name for
multiple files, use the `-replace` operator in a regular expression. For more information about the
`-replace` operator, see
[about_Comparison_Operators](../Microsoft.PowerShell.Core/About/about_Comparison_Operators.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to rename items that can't otherwise be changed, such as hidden or read-only files
or read-only aliases or variables. The cmdlet can't change constant aliases or variables.
Implementation varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          <maml:para>Even using the **Force** parameter, the cmdlet can't override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>NewName</maml:name>
        <maml:description>
          <maml:para>Specifies the new name of the item. Enter only a name, not a path and name. If you enter a path that
differs from the path that is specified in the **Path** parameter, `Rename-Item` generates an error.
To rename and move an item, use `Move-Item`.</maml:para>
          <maml:para>You can't use wildcard characters in the value of the **NewName** parameter. To specify a name for
multiple files, use the `-replace` operator in a regular expression. For more information about the
`-replace` operator, see
[about_Comparison_Operators](../Microsoft.PowerShell.Core/About/about_Comparison_Operators.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the item to the pipeline. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the item to rename.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns an object representing the renamed
item.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Rename-Item`:

- All platforms:
  - `ren`
  - `rni`

`Rename-Item` is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Rename a file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command renames the file `daily_file.txt` to `monday_file.txt`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Rename-Item -Path "C:\logfiles\daily_file.txt" -NewName "monday_file.txt"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Rename and move an item ---------</maml:title>
        <maml:introduction>
          <maml:para>You can't use `Rename-Item` to both rename and move an item. Specifically, you can't supply a path
for the value of the **NewName** parameter, unless the path is identical to the path specified in
the **Path** parameter. Otherwise, only a new name is permitted.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Rename-Item -Path "project.txt" -NewName "D:\archive\old-project.txt"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Rename-Item : can't rename because the target specified represents a path or device name.
At line:1 char:12
+ Rename-Item &lt;&lt;&lt;&lt;  -Path project.txt -NewName D:\archive\old-project.txt
+ CategoryInfo          : InvalidArgument: (:) [Rename-Item], PS&gt;  Move-Item -Path "project.txt" -De
stination "D:\archive\old-project.txt"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example attempts to rename the `project.txt` file in the current directory to `old-project.txt`
in the `D:\Archive` directory. The result is the error shown in the output.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Use the `Move-Item` cmdlet, instead.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Rename a registry key ---------</maml:title>
        <maml:introduction>
          <maml:para>This example renames a registry key from **Advertising** to **Marketing**. When the command is
complete, the key is renamed, but the registry entries in the key are unchanged.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Rename-Item -Path "HKLM:\Software\MyCompany\Advertising" -NewName "Marketing"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Rename multiple files ---------</maml:title>
        <maml:introduction>
          <maml:para>This example renames all the `*.txt` files in the current directory to `*.log`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem *.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\temp\files</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        10/3/2019   7:47 AM           2918 Friday.TXT
-a----        10/3/2019   7:46 AM           2918 Monday.Txt
-a----        10/3/2019   7:47 AM           2918 Wednesday.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem *.txt | Rename-Item -NewName { $_.Name -replace '.txt','.log' }
Get-ChildItem *.log
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
    Directory: C:\temp\files</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        10/3/2019   7:47 AM           2918 Friday.log
-a----        10/3/2019   7:46 AM           2918 Monday.log
-a----        10/3/2019   7:47 AM           2918 Wednesday.log
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet gets all the files in the current folder that have a `.txt` file
extension then pipes them to `Rename-Item`. The value of **NewName** is a script block that runs
before the value is submitted to the **NewName** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In the script block, the `$_` automatic variable represents each file object as it comes to the
command through the pipeline. The script block uses the `-replace` operator to replace the file
extension of each file with `.log`. Notice that matching using the `-replace` operator is not case
sensitive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/rename-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ChildItem</maml:linkText>
        <command:uri>Get-ChildItem.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Item</maml:linkText>
        <command:uri>Set-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Rename-ItemProperty</command:name>
      <maml:description>
        <maml:para>Renames a property of an item.</maml:para>
      </maml:description>
      <command:verb>Rename</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Rename-ItemProperty` cmdlet changes the name of a specified item property. The value of the property is not changed. For example, you can use `Rename-ItemProperty` to change the name of a registry entry.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Rename-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter.
The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the
only installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to rename a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the current name of the property to rename.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>NewName</maml:name>
          <maml:description>
            <maml:para>Specifies the new name for the property.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies a path to the item.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Rename-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter.
The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the
only installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to rename a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to the item. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
            <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the current name of the property to rename.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>NewName</maml:name>
          <maml:description>
            <maml:para>Specifies the new name for the property.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter.
The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the
only installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to rename a property of an object that cannot otherwise be accessed by the user.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to the item. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the current name of the property to rename.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>NewName</maml:name>
        <maml:description>
          <maml:para>Specifies the new name for the property.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies a path to the item.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PSCustomObject** representing the
renamed item property.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Rename-ItemProperty`:

- All platforms:
  - `rnp`

`Rename-ItemProperty` is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Rename a registry entry ---------</maml:title>
        <maml:introduction>
          <maml:para>This command renames the config registry entry that is contained in the
`HKEY_LOCAL_MACHINE\Software\SmpApplication` key to "oldconfig".</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Rename-ItemProperty -Path HKLM:\Software\SmpApplication -Name config -NewName oldconfig
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/rename-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ItemProperty</maml:linkText>
        <command:uri>Set-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Resolve-Path</command:name>
      <maml:description>
        <maml:para>Resolves the wildcard characters in a path, and displays the path contents.</maml:para>
      </maml:description>
      <command:verb>Resolve</command:verb>
      <command:noun>Path</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Resolve-Path` cmdlet displays the items and containers that match the wildcard pattern at the location specified. The match can include files, folders, registry keys, or any other object accessible from a **PSDrive** provider.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Resolve-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default is the current
user.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or pass a **PSCredential** object. You can
create a **PSCredential** object using the `Get-Credential` cmdlet. If you type a user name, this
cmdlet prompts you for a password.</maml:para>
            <maml:para>This parameter is not supported by any providers installed with PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the PowerShell path to resolve. This parameter is required. You can also pipe a path
string to `Resolve-Path`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Relative</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns a relative path.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>RelativeBasePath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to resolve the relative path from. When you use this parameter, the cmdlet returns
the **System.Management.Automation.PathInfo** object for the resolved path.</maml:para>
            <maml:para>When you use this parameter with the **Relative** switch parameter, the cmdlet returns a string
representing the relative path from **RelativeBasePath** to **Path**.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Resolve-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default is the current
user.</maml:para>
            <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or pass a **PSCredential** object. You can
create a **PSCredential** object using the `Get-Credential` cmdlet. If you type a user name, this
cmdlet prompts you for a password.</maml:para>
            <maml:para>This parameter is not supported by any providers installed with PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
            <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies the path to be resolved. The value of the **LiteralPath** parameter is used exactly as
typed. No characters are interpreted as wildcard characters. If the path includes escape characters,
enclose it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret
any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Relative</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns a relative path.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>RelativeBasePath</maml:name>
          <maml:description>
            <maml:para>Specifies a path to resolve the relative path from. When you use this parameter, the cmdlet returns
the **System.Management.Automation.PathInfo** object for the resolved path.</maml:para>
            <maml:para>When you use this parameter with the **Relative** switch parameter, the cmdlet returns a string
representing the relative path from **RelativeBasePath** to **Path**.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to perform this action. The default is the current
user.</maml:para>
          <maml:para>Type a user name, such as `User01` or `Domain01\User01`, or pass a **PSCredential** object. You can
create a **PSCredential** object using the `Get-Credential` cmdlet. If you type a user name, this
cmdlet prompts you for a password.</maml:para>
          <maml:para>This parameter is not supported by any providers installed with PowerShell.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Allows the cmdlet to get items that otherwise can't be accessed by the user, such as hidden or
system files. The **Force** parameter doesn't override security restrictions. Implementation varies
among providers. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          <maml:para>This parameter was added in PowerShell 7.5-preview.5.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies the path to be resolved. The value of the **LiteralPath** parameter is used exactly as
typed. No characters are interpreted as wildcard characters. If the path includes escape characters,
enclose it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret
any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the PowerShell path to resolve. This parameter is required. You can also pipe a path
string to `Resolve-Path`. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Relative</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns a relative path.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>RelativeBasePath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to resolve the relative path from. When you use this parameter, the cmdlet returns
the **System.Management.Automation.PathInfo** object for the resolved path.</maml:para>
          <maml:para>When you use this parameter with the **Relative** switch parameter, the cmdlet returns a string
representing the relative path from **RelativeBasePath** to **Path**.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns a **PathInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>If you specify the **Relative** parameter, this cmdlet returns a string value for the resolved path.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Resolve-Path`:

- All platforms:
  - `rvpa`

The `*-Path` cmdlets work with the **FileSystem**, **Registry**, and **Certificate** providers.

`Resolve-Path` is designed to work with any provider. To list the providers available in your
session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

`Resolve-Path` only resolves existing paths. It cannot be used to resolve a location that does not
exist yet.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Resolve the home folder path ---------</maml:title>
        <maml:introduction>
          <maml:para>The tilde character (`~`) is shorthand notation for the current user's home folder. This example
shows `Resolve-Path` returning the fully qualified path value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Resolve-Path ~
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
C:\Users\User01
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Resolve the path of the Windows folder ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Resolve-Path -Path "windows"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
C:\Windows
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When run from the root of the `C:` drive, this command returns the path of the `Windows` folder in
the `C:` drive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get all paths in the Windows folder ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
"C:\windows\*" | Resolve-Path
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command returns all the files and folders in the `C:\Windows` folder. The command uses a
pipeline operator (`|`) to send a path string to `Resolve-Path`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Resolve a UNC path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Resolve-Path -Path "\\Server01\public"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command resolves a Universal Naming Convention (UNC) path and returns the shares in the path.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Get relative paths ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Resolve-Path -Path "C:\prog*" -Relative
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
.\Program Files
.\Program Files (x86)
.\programs.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command returns relative paths for the directories at the root of the `C:` drive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Resolve a path containing brackets ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses the **LiteralPath** parameter to resolve the path of the `Test[xml]` subfolder.
Using **LiteralPath** causes the brackets to be treated as normal characters rather than a regular
expression.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Resolve-Path -LiteralPath 'test[xml]'
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Resolve a path relative to another folder ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses the **RelativeBasePath** parameter to resolve the path of the `pwsh` executable
relative to `$Env:TEMP`. When the command includes the **Relative** switch parameter, it returns a
**String** representing the relative path from `$Env:TEMP` to the `pwsh` executable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$ExecutablePath = Get-Command -Name pwsh | Select-Object -ExpandProperty Source
Resolve-Path -Path $ExecutablePath -RelativeBasePath $Env:TEMP -Relative
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
..\..\..\..\..\Program Files\PowerShell\7\pwsh.exe
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Resolve paths for hidden items ---------</maml:title>
        <maml:introduction>
          <maml:para>By default, `Resolve-Path` does not return hidden items. This example uses the **Force** parameter
to resolve hidden items. The `Get-Item` command confirms that the `.git` folder is hidden. Using
`Resolve-Path` without the **Force** parameter returns only the visible items. Adding the **Force**
parameter returns all items, including hidden items.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Get-Item .git -Force</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Directory: D:\Git\PS-Docs\PowerShell-Docs</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d--h-           9/25/2024  4:46 PM                .git</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Resolve-Path .git*</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
D:\Git\PS-Docs\PowerShell-Docs\.github
D:\Git\PS-Docs\PowerShell-Docs\.gitattributes
D:\Git\PS-Docs\PowerShell-Docs\.gitignore</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Resolve-Path .git* -Force</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Path
----
D:\Git\PS-Docs\PowerShell-Docs\.git
D:\Git\PS-Docs\PowerShell-Docs\.github
D:\Git\PS-Docs\PowerShell-Docs\.gitattributes
D:\Git\PS-Docs\PowerShell-Docs\.gitignore
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/resolve-path?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Convert-Path</maml:linkText>
        <command:uri>Convert-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-Path</maml:linkText>
        <command:uri>Join-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-Path</maml:linkText>
        <command:uri>Split-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Path</maml:linkText>
        <command:uri>Test-Path.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Restart-Computer</command:name>
      <maml:description>
        <maml:para>Restarts the operating system on local and remote computers.</maml:para>
      </maml:description>
      <command:verb>Restart</command:verb>
      <command:noun>Computer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Restart-Computer` cmdlet restarts the operating system on the local and remote computers.</maml:para>
      <maml:para>You can use the parameters of `Restart-Computer` to run the restart operations, to specify the authentication levels and alternate credentials, to limit the operations that run at the same time, and to force an immediate restart.</maml:para>
      <maml:para>Starting in Windows PowerShell 3.0, you can wait for the restart to complete before you run the next command. Specify a waiting time-out and query interval, and wait for particular services to be available on the restarted computer. This feature makes it practical to use `Restart-Computer` in scripts and functions.</maml:para>
      <maml:para>In PowerShell 7.1, `Restart-Computer` was added for Linux and macOS. The non-Windows platforms only have the **WhatIf**, **Confirm**, and **CommonParameters** parameters. The cmdlet is just calling the native command `/sbin/shutdown`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Restart-Computer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies one computer name or a comma-separated array of computer names. `Restart-Computer` accepts
**ComputerName** objects from the pipeline or variables.</maml:para>
            <maml:para>Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To
specify the local computer, type the computer name, a dot `.`, or localhost.</maml:para>
            <maml:para>This parameter doesn't rely on PowerShell remoting. You can use the **ComputerName** parameter even
if your computer isn't configured to run remote commands.</maml:para>
            <maml:para>If the **ComputerName** parameter isn't specified, `Restart-Computer` restarts the local computer.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running `Restart-Computer`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](xref:System.Management.Automation.PSCredential)
object and the password is stored as a [SecureString](xref:System.Security.SecureString).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](xref:System.Security.SecureString#how-secure-is-securestring).</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delay</maml:name>
          <maml:description>
            <maml:para>Specifies the frequency of queries, in seconds. PowerShell queries the service specified by the
**For** parameter to determine whether the service is available after the computer is restarted.</maml:para>
            <maml:para>This parameter is valid only together with the **Wait** and **For** parameters.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
            <maml:para>If the **Delay** parameter isn't specified, `Restart-Computer` uses a five second delay.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int16</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>For</maml:name>
          <maml:description>
            <maml:para>Specifies the behavior of PowerShell as it waits for the specified service or feature to become
available after the computer restarts. This parameter is only valid with the **Wait** parameter.</maml:para>
            <maml:para>The acceptable values for this parameter are:</maml:para>
            <maml:para>- **Default**: Waits for PowerShell to restart.
- **PowerShell**: Can run commands in a PowerShell remote session on the computer.
- **WMI**: Receives a reply to a **Win32_ComputerSystem** query for the computer.
- **WinRM**: Can establish a remote session to the computer by using WS-Management.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.WaitForServiceTypes</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces an immediate restart of the computer.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Timeout</maml:name>
          <maml:description>
            <maml:para>Specifies the duration of the wait, in seconds. When the timeout elapses, `Restart-Computer` returns
to the command prompt, even if the computers aren't restarted.</maml:para>
            <maml:para>The **Timeout** parameter is only valid with the **Wait** parameter. **Timeout** overrides the
**Wait** parameter's indefinite waiting period.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Wait</maml:name>
          <maml:description>
            <maml:para>`Restart-Computer` suppresses the PowerShell prompt and blocks the pipeline until the computers have
restarted. You can use this parameter in a script to restart computers and then continue to process
when the restart is finished.</maml:para>
            <maml:para>The **Wait** parameter waits indefinitely for the computers to restart. You can use **Timeout** to
adjust the timing and the **For** and **Delay** parameters to wait for particular services to become
available on the restarted computers.</maml:para>
            <maml:para>The **Wait** parameter isn't valid when you're restarting the local computer. If the value of the
**ComputerName** parameter contains the names of remote computers and the local computer,
`Restart-Computer` generates a non-terminating error for **Wait** on the local computer, but waits
for the remote computers to restart.</maml:para>
            <maml:para>This parameter was introduced in Windows PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the `Restart-Computer` runs. The `Restart-Computer` cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WsmanAuthentication</maml:name>
          <maml:description>
            <maml:para>Specifies the mechanism that is used to authenticate the user credentials. This parameter was
introduced in Windows PowerShell 3.0.</maml:para>
            <maml:para>The acceptable values for this parameter are: **Basic**, **CredSSP**, **Default**, **Digest**,
**Kerberos**, and **Negotiate**.</maml:para>
            <maml:para>For more information, see
[AuthenticationMechanism](xref:System.Management.Automation.Runspaces.AuthenticationMechanism).</maml:para>
            <maml:para>&gt; [!WARNING]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user credentials are
&gt; passed to a remote computer to be authenticated, is designed for commands that require
&gt; authentication on more than one resource, such as accessing a remote network share. This mechanism
&gt; increases the security risk of the remote operation. If the remote computer is compromised, the
&gt; credentials that are passed to it can be used to control the network session.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Specifies one computer name or a comma-separated array of computer names. `Restart-Computer` accepts
**ComputerName** objects from the pipeline or variables.</maml:para>
          <maml:para>Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To
specify the local computer, type the computer name, a dot `.`, or localhost.</maml:para>
          <maml:para>This parameter doesn't rely on PowerShell remoting. You can use the **ComputerName** parameter even
if your computer isn't configured to run remote commands.</maml:para>
          <maml:para>If the **ComputerName** parameter isn't specified, `Restart-Computer` restarts the local computer.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running `Restart-Computer`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](xref:System.Management.Automation.PSCredential)
object and the password is stored as a [SecureString](xref:System.Security.SecureString).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](xref:System.Security.SecureString#how-secure-is-securestring).</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Delay</maml:name>
        <maml:description>
          <maml:para>Specifies the frequency of queries, in seconds. PowerShell queries the service specified by the
**For** parameter to determine whether the service is available after the computer is restarted.</maml:para>
          <maml:para>This parameter is valid only together with the **Wait** and **For** parameters.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
          <maml:para>If the **Delay** parameter isn't specified, `Restart-Computer` uses a five second delay.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int16</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>For</maml:name>
        <maml:description>
          <maml:para>Specifies the behavior of PowerShell as it waits for the specified service or feature to become
available after the computer restarts. This parameter is only valid with the **Wait** parameter.</maml:para>
          <maml:para>The acceptable values for this parameter are:</maml:para>
          <maml:para>- **Default**: Waits for PowerShell to restart.
- **PowerShell**: Can run commands in a PowerShell remote session on the computer.
- **WMI**: Receives a reply to a **Win32_ComputerSystem** query for the computer.
- **WinRM**: Can establish a remote session to the computer by using WS-Management.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.WaitForServiceTypes</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces an immediate restart of the computer.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Timeout</maml:name>
        <maml:description>
          <maml:para>Specifies the duration of the wait, in seconds. When the timeout elapses, `Restart-Computer` returns
to the command prompt, even if the computers aren't restarted.</maml:para>
          <maml:para>The **Timeout** parameter is only valid with the **Wait** parameter. **Timeout** overrides the
**Wait** parameter's indefinite waiting period.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Wait</maml:name>
        <maml:description>
          <maml:para>`Restart-Computer` suppresses the PowerShell prompt and blocks the pipeline until the computers have
restarted. You can use this parameter in a script to restart computers and then continue to process
when the restart is finished.</maml:para>
          <maml:para>The **Wait** parameter waits indefinitely for the computers to restart. You can use **Timeout** to
adjust the timing and the **For** and **Delay** parameters to wait for particular services to become
available on the restarted computers.</maml:para>
          <maml:para>The **Wait** parameter isn't valid when you're restarting the local computer. If the value of the
**ComputerName** parameter contains the names of remote computers and the local computer,
`Restart-Computer` generates a non-terminating error for **Wait** on the local computer, but waits
for the remote computers to restart.</maml:para>
          <maml:para>This parameter was introduced in Windows PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the `Restart-Computer` runs. The `Restart-Computer` cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WsmanAuthentication</maml:name>
        <maml:description>
          <maml:para>Specifies the mechanism that is used to authenticate the user credentials. This parameter was
introduced in Windows PowerShell 3.0.</maml:para>
          <maml:para>The acceptable values for this parameter are: **Basic**, **CredSSP**, **Default**, **Digest**,
**Kerberos**, and **Negotiate**.</maml:para>
          <maml:para>For more information, see
[AuthenticationMechanism](xref:System.Management.Automation.Runspaces.AuthenticationMechanism).</maml:para>
          <maml:para>&gt; [!WARNING]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user credentials are
&gt; passed to a remote computer to be authenticated, is designed for commands that require
&gt; authentication on more than one resource, such as accessing a remote network share. This mechanism
&gt; increases the security risk of the remote operation. If the remote computer is compromised, the
&gt; credentials that are passed to it can be used to control the network session.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a computer name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- In Windows, `Restart-Computer` uses the
  [Win32Shutdown method](/windows/desktop/CIMWin32Prov/win32shutdown-method-in-class-win32-operatingsystem)
  of the Windows Management Instrumentation (WMI)
  [Win32_OperatingSystem](/windows/desktop/CIMWin32Prov/win32-operatingsystem) class. This method
  requires the **SeShutdownPrivilege** privilege be enabled for the user account used to restart
  the machine.
- This cmdlet was added for Linux and macOS in PowerShell 7.1. On Linux and macOS,
  `Restart-Computer` uses the `/sbin/shutdown` bash tool.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Restart the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>`Restart-Computer` restarts the local computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Restart-Computer
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Restart multiple computers ---------</maml:title>
        <maml:introduction>
          <maml:para>`Restart-Computer` can restart remote and local computers. The **ComputerName** parameter accepts an
array of computer names.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Restart-Computer -ComputerName Server01, Server02, localhost
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get computer names from a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>`Restart-Computer` gets a list of computer names from a text file and restarts the computers. The
**ComputerName** parameter isn't specified. But because it's the first position parameter, it
accepts the computer names from the text file that are sent down the pipeline.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content -Path C:\Domain01.txt | Restart-Computer
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Content` uses the **Path** parameter to get a list of computer names from a text file,
**Domain01.txt**. The computer names are sent down the pipeline. `Restart-Computer` restarts each
computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Force restart of computers listed in a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example forces an immediate restart of the computers listed in the `Domain01.txt` file. The
computer names from the text file are stored in a variable. The **Force** parameter forces an
immediate restart.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Names = Get-Content -Path C:\Domain01.txt
$Creds = Get-Credential
Restart-Computer -ComputerName $Names -Credential $Creds -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Content` uses the **Path** parameter to get a list of computer names from a text file,
**Domain01.txt**. The computer names are stored in the variable `$Names`. `Get-Credential` prompts
you for a username and password and stores the values in the variable `$Creds`. `Restart-Computer`
uses the **ComputerName** and **Credential** parameters with their variables. The **Force**
parameter causes an immediate restart of each computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Restart a remote computer and wait for PowerShell ---------</maml:title>
        <maml:introduction>
          <maml:para>`Restart-Computer` restarts the remote computer and then waits up to 5 minutes (300 seconds) for
PowerShell to become available on the restarted computer before it continues.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Restart-Computer -ComputerName Server01 -Wait -For PowerShell -Timeout 300 -Delay 2
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Restart-Computer` uses the **ComputerName** parameter to specify **Server01**. The **Wait**
parameter waits for the restart to finish. The **For** specifies that PowerShell can run commands on
the remote computer. The **Timeout** parameter specifies a five-minute wait. The **Delay** parameter
queries the remote computer every two seconds to determine whether it's restarted.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Restart a computer by using WsmanAuthentication ---------</maml:title>
        <maml:introduction>
          <maml:para>`Restart-Computer` restarts the remote computer using the **WsmanAuthentication** mechanism.
Kerberos authentication determines whether the current user has permission to restart the remote
computer. For more information, see
[AuthenticationMechanism](xref:System.Management.Automation.Runspaces.AuthenticationMechanism).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Restart-Computer -ComputerName Server01 -WsmanAuthentication Kerberos
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Restart-Computer` uses the **ComputerName** parameter to specify the remote computer, **Server01**.
The **WsmanAuthentication** parameter specifies the authentication method as **Kerberos**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/restart-computer?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>About Windows Remote Management</maml:linkText>
        <command:uri>/windows/desktop/WinRM/about-windows-remote-management</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Credential</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Security/Get-Credential.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>WS-Management Protocol</maml:linkText>
        <command:uri>/windows/desktop/WinRM/ws-management-protocol</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Restart-Service</command:name>
      <maml:description>
        <maml:para>Stops and then starts one or more services.</maml:para>
      </maml:description>
      <command:verb>Restart</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Restart-Service` cmdlet sends a stop message and then a start message to the Windows Service Controller for a specified service. If a service was already stopped, it is started without notifying you of an error. You can specify the services by their service names or display names, or you can use the **InputObject** parameter to pass an object that represents each service that you want to restart.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Restart-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet restarts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects that represent the services to restart. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Restart-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet restarts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of the services to restart.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Restart-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies the display names of the services to restarted. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet restarts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies the display names of the services to restarted. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the command to run without asking for user confirmation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet restarts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects that represent the services to restart. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of the services to restart.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object
representing the restarted service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

- `Restart-Service` can control services only when the current user has permission to do this. If a
  command does not work correctly, you might not have the required permissions.
- To find the service names and display names of the services on your system, type `Get-Service`".
  The service names appear in the **Name** column, and the display names appear in the
  **DisplayName** column.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Restart a service on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Restart-Service -Name winmgmt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command restarts the Windows Management Instrumentation service (WinMgmt) on the local
computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Exclude a service ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Restart-Service -DisplayName "net*" -Exclude "net logon"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command restarts the services that have a display name that starts with Net, except for the Net
Logon service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Start all stopped network services ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-Service -Name "net*" | Where-Object {$_.Status -eq "Stopped"} | Restart-Service
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command starts all of the stopped network services on the computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses the `Get-Service` cmdlet to get objects that represent the services whose service
name starts with net. The pipeline operator (`|`) sends the services object to the `Where-Object`
cmdlet, which selects only the services that have a status of stopped. Another pipeline operator
sends the selected services to `Restart-Service`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In practice, you would use the **WhatIf** parameter to determine the effect of the command before
you run it.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/restart-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Resume-Service</command:name>
      <maml:description>
        <maml:para>Resumes one or more suspended (paused) services.</maml:para>
      </maml:description>
      <command:verb>Resume</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Resume-Service` cmdlet sends a resume message to the Windows Service Controller for each of the specified services. If a service is suspended, it resumes. If it is currently running, the message is ignored. You can specify the services by their service names or display names, or you can use the **InputObject** parameter to pass a service object that represents the services that you want to resume.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Resume-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to resume. The value of this parameter qualifies **Name** parameter. Enter a name
element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects that represent the services to resumed. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Resume-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to resume. The value of this parameter qualifies **Name** parameter. Enter a name
element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of the services to be resumed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Resume-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies the display names of the services to be resumed.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to resume. The value of this parameter qualifies **Name** parameter. Enter a name
element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies the display names of the services to be resumed.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies services to resume. The value of this parameter qualifies **Name** parameter. Enter a name
element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects that represent the services to resumed. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of the services to be resumed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object
representing the resumed service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

- The status of services that have been suspended is Paused. When services are resumed, their status
  is Running.
- `Resume-Service` can control services only when the current user has permission to do this. If a
  command does not work correctly, you might not have the required permissions.
- To find the service names and display names of the services on your system, type `Get-Service`.
  The service names appear in the **Name** column, and the display names appear in the
  **DisplayName** column.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Resume a service on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Resume-Service "sens"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command resumes the System Event Notification service on the local computer. The service name
is represented in the command by sens. The command uses the **Name** parameter to specify the
service name of the service, but the command omits the parameter name because the parameter name is
optional.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Resume all suspended services ---------</maml:title>
        <maml:introduction>
          <maml:para>```
PS C:\&gt; Get-Service | Where-Object {$_.Status -eq "Paused"} | Resume-Service
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command resumes all of the suspended services on the computer. The `Get-Service` cmdlet command
gets all of the services on the computer. The pipeline operator (`|`) passes the results to the
`Where-Object` cmdlet, which selects the services that have a **Status** property of Paused. The
next pipeline operator sends the results to `Resume-Service`, which resumes the paused services.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In practice, you would use the **WhatIf** parameter to determine the effect of the command before
you run it.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/resume-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-Clipboard</command:name>
      <maml:description>
        <maml:para>Sets the contents of the clipboard.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>Clipboard</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Set-Clipboard` cmdlet sets the contents of the clipboard.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; On Linux, this cmdlet requires the `xclip` utility to be in the path. On macOS, this cmdlet uses &gt; the `pbcopy` utility.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-Clipboard</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Append</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet should add to the clipboard instead of replacing it. By default, the
cmdlet clears the current content from the clipboard and sets it to the new content. When this
parameter is specified, the cmdlet appends the new content after a newline to the current content.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsOSC52</maml:name>
          <maml:description>
            <maml:para>When connected to a remote session over SSH, `Set-Clipboard` sets the clipboard of the remote
machine, not the local host. When you use this parameter, `Set-Clipboard` uses the OSC52 ANSI escape
sequence to set the clipboard of the local machine.</maml:para>
            <maml:para>For this feature to work, your terminal application must support the OSC52 ANSI escape sequence. The
[Windows Terminal](/windows/terminal/) supports this feature.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you're working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>The string values to be added to the clipboard.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Append</maml:name>
        <maml:description>
          <maml:para>Indicates that the cmdlet should add to the clipboard instead of replacing it. By default, the
cmdlet clears the current content from the clipboard and sets it to the new content. When this
parameter is specified, the cmdlet appends the new content after a newline to the current content.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsOSC52</maml:name>
        <maml:description>
          <maml:para>When connected to a remote session over SSH, `Set-Clipboard` sets the clipboard of the remote
machine, not the local host. When you use this parameter, `Set-Clipboard` uses the OSC52 ANSI escape
sequence to set the clipboard of the local machine.</maml:para>
          <maml:para>For this feature to work, your terminal application must support the OSC52 ANSI escape sequence. The
[Windows Terminal](/windows/terminal/) supports this feature.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you're working. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>The string values to be added to the clipboard.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string containing the content to set to the clipboard to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Set-Clipboard`:

- All platforms:
  - `scb`

Support for this cmdlet on macOS was added in the PowerShell 7.0.0 release.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Copy text to the clipboard ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-Clipboard -Value "This is a test string"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Copy the contents of a file to the clipboard ---------</maml:title>
        <maml:introduction>
          <maml:para>This example pipes the contents of a file, a public ssh key, to the clipboard. Then, the key can be
pasted into another application, like GitHub.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content C:\Users\user1\.ssh\id_ed25519.pub | Set-Clipboard
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Copy text to the clipboard of the local host over an SSH remote session ---------</maml:title>
        <maml:introduction>
          <maml:para>The **AsOSC52** parameter allows you to set the clipboard of the local machine when connected to a
remote session over SSH.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Clipboard -Value "This is a test string" -AsOSC52
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Set the default value of the **AsOSC52** parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>You can detect if you are connected to a remote session over SSH by checking the value of the
`$Env:SSH_CLIENT` or `$Env:SSH_TTY` environment variables. If either of these variables are set,
then you are connected to a remote session over SSH. You can use this information to set the default
value of the **AsOSC52** parameter. Add one of the following lines to your PowerShell profile
script.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$PSDefaultParameterValues['Set-Clipboard:AsOSC52'] = $Env:SSH_CLIENT
$PSDefaultParameterValues['Set-Clipboard:AsOSC52'] = $Env:SSH_TTY
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about `$PSDefaultParameterValues`, see
[about_Parameters_Default_Values](../Microsoft.PowerShell.Core/About/about_Parameters_Default_Values.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-clipboard?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Clipboard</maml:linkText>
        <command:uri>Get-Clipboard.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-Content</command:name>
      <maml:description>
        <maml:para>Writes new content or replaces existing content in a file.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>Content</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Set-Content` is a string-processing cmdlet that writes new content or replaces the content in a file. `Set-Content` replaces the existing content and differs from the `Add-Content` cmdlet that appends content to a file. To send content to `Set-Content` you can use the **Value** parameter on the command line or send content through the pipeline.</maml:para>
      <maml:para>If you need to create files or directories for the following examples, see [New-Item](New-Item.md).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies that the content should be written as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is written as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). The **Force** parameter
does not override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the content. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This Parameter is only
available on Windows. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
that block files that are downloaded from the Internet. If you verify that a downloaded file is
safe, use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Set-Content` can set the
content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the new content for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies that the content should be written as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is written as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). The **Force** parameter
does not override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the content. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This Parameter is only
available on Windows. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
that block files that are downloaded from the Internet. If you verify that a downloaded file is
safe, use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Set-Content` can set the
content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the new content for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies that the content should be written as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is written as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). The **Force** parameter
does not override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the content. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This Parameter is only
available on Windows. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
that block files that are downloaded from the Internet. If you verify that a downloaded file is
safe, use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Set-Content` can set the
content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the new content for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Content</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsByteStream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies that the content should be written as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
            <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is written as a stream of bytes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
            <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
works only in file system drives.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
            <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).</maml:para>
            <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). The **Force** parameter
does not override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoNewline</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the content. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Stream</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This Parameter is only
available on Windows. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
            <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
            <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
parameter works only in file system drives.</maml:para>
            <maml:para>You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
that block files that are downloaded from the Internet. If you verify that a downloaded file is
safe, use the `Unblock-File` cmdlet.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Set-Content` can set the
content of alternative data streams from directories as well as files.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies the new content for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsByteStream</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          <maml:para>Specifies that the content should be written as a stream of bytes. This parameter was introduced in
PowerShell 6.0.</maml:para>
          <maml:para>A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
**AsByteStream** parameter ignores any encoding and the output is written as a stream of bytes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Encoding</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          <maml:para>Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.</maml:para>
          <maml:para>Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
works only in file system drives.</maml:para>
          <maml:para>The acceptable values for this parameter are as follows:</maml:para>
          <maml:para>- `ascii`: Uses the encoding for the ASCII (7-bit) character set.
- `ansi`: Uses the encoding for the for the current culture's ANSI code page. This option was added
  in PowerShell 7.4.
- `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
- `bigendianutf32`: Encodes in UTF-32 format using the big-endian byte order.
- `oem`: Uses the default encoding for MS-DOS and console programs.
- `unicode`: Encodes in UTF-16 format using the little-endian byte order.
- `utf7`: Encodes in UTF-7 format.
- `utf8`: Encodes in UTF-8 format.
- `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
- `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
- `utf32`: Encodes in UTF-32 format.</maml:para>
          <maml:para>Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
pages (like `-Encoding 1251`) or string names of registered code pages (like
`-Encoding "windows-1251"`). For more information, see the .NET documentation for
[Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).</maml:para>
          <maml:para>Starting with PowerShell 7.4, you can use the `Ansi` value for the **Encoding** parameter to pass
the numeric ID for the current culture's ANSI code page without having to specify it manually.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; **UTF-7*** is no longer recommended to use. As of PowerShell 7.1, a warning is written if you
&gt; specify `utf7` for the **Encoding** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Text.Encoding</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
varies from provider to provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). The **Force** parameter
does not override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoNewline</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          <maml:para>The string representations of the input objects are concatenated to form the output. No spaces or
newlines are inserted between the output strings. No newline is added after the last output string.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the content. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the item that receives the content.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Stream</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider. This Parameter is only
available on Windows. For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          <maml:para>Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
it. Wildcard characters are not supported.</maml:para>
          <maml:para>**Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
parameter works only in file system drives.</maml:para>
          <maml:para>You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
that block files that are downloaded from the Internet. If you verify that a downloaded file is
safe, use the `Unblock-File` cmdlet.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0. As of PowerShell 7.2, `Set-Content` can set the
content of alternative data streams from directories as well as files.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies the new content for the item.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Object[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe an object that contains the new value for the item to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a string representing the content.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- `Set-Content` is designed for string processing. If you pipe non-string objects to `Set-Content`,
  it converts the object to a string before writing it. To write objects to files, use `Out-File`.
- The `Set-Content` cmdlet is designed to work with the data exposed by any provider. To list the
  providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Replace the contents of multiple files in a directory ---------</maml:title>
        <maml:introduction>
          <maml:para>This example replaces the content for multiple files in the current directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem -Path .\Test*.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Test1.txt
Test2.txt
Test3.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Content -Path .\Test*.txt -Value 'Hello, World'
Get-Content -Path .\Test*.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Hello, World
Hello, World
Hello, World
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-ChildItem` cmdlet uses the **Path** parameter to list **.txt** files that begin with
`Test*` in the current directory. The `Set-Content` cmdlet uses the **Path** parameter to specify
the `Test*.txt` files. The **Value** parameter provides the text string **Hello, World** that
replaces the existing content in each file. The `Get-Content` cmdlet uses the **Path** parameter to
specify the `Test*.txt` files and displays each file's content in the PowerShell console.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Create a new file and write content ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a new file and writes the current date and time to the file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Content -Path .\DateTime.txt -Value (Get-Date)
Get-Content -Path .\DateTime.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
1/30/2019 09:55:08
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Set-Content` uses the **Path** and **Value** parameters to create a new file named **DateTime.txt**
in the current directory. The **Value** parameter uses `Get-Date` to get the current date and time.
`Set-Content` writes the **DateTime** object to the file as a string. The `Get-Content` cmdlet uses
the **Path** parameter to display the content of **DateTime.txt** in the PowerShell console.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Replace text in a file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command replaces all instances of word within an existing file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Content -Path .\Notice.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Warning
Replace Warning with a new word.
The word Warning was replaced.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
(Get-Content -Path .\Notice.txt) |
    ForEach-Object {$_ -replace 'Warning', 'Caution'} |
        Set-Content -Path .\Notice.txt
Get-Content -Path .\Notice.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Caution
Replace Caution with a new word.
The word Caution was replaced.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Content` cmdlet uses the **Path** parameter to specify the **Notice.txt** file in the
current directory. The `Get-Content` command is wrapped with parentheses so that the command
finishes before being sent down the pipeline.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The contents of the **Notice.txt** file are sent down the pipeline to the `ForEach-Object` cmdlet.
`ForEach-Object` uses the automatic variable `$_` and replaces each occurrence of **Warning** with
**Caution**. The objects are sent down the pipeline to the `Set-Content` cmdlet. `Set-Content` uses
the **Path** parameter to specify the **Notice.txt** file and writes the updated content to the
file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The last `Get-Content` cmdlet displays the updated file content in the PowerShell console.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Use Filters with Set-Content ---------</maml:title>
        <maml:introduction>
          <maml:para>You can specify a filter to the `Set-Content` cmdlet. When using filters to qualify the **Path**
parameter, you need to include a trailing asterisk (`*`) to indicate the contents of the
path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The following command set the content all `*.txt` files in the `C:\Temp`
directory to the **Value** empty.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Content -Path C:\Temp\* -Filter *.txt -Value "Empty"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-content?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Aliases</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Aliases.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Automatic_Variables.md</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-Content</maml:linkText>
        <command:uri>Add-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Content</maml:linkText>
        <command:uri>Clear-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ChildItem</maml:linkText>
        <command:uri>Get-ChildItem.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Content</maml:linkText>
        <command:uri>Get-Content.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ForEach-Object</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/ForEach-Object.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-Item</command:name>
      <maml:description>
        <maml:para>Changes the value of an item to the value specified in the command.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>Item</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Set-Item` cmdlet changes the value of an item, such as a variable or registry key, to the value specified in the command.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Item</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Options</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
            <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>Specifies a new value for the item.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or
variables. The cmdlet cannot change constant aliases or variables.
Implementation varies from provider to provider.
For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
Even using the *Force* parameter, the cmdlet cannot override security restrictions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Options</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Alias** and **Function** providers. For more
information, see [about_Alias_Provider](../Microsoft.PowerShell.Core/About/about_Alias_Provider.md)
and [about_Function_Provider](../Microsoft.PowerShell.Core/About/about_Function_Provider.md).</maml:para>
          <maml:para>Specifies the value of the **Options** property of an alias.</maml:para>
          <maml:para>Valid values are:</maml:para>
          <maml:para>- `None`: The alias has no constraints (default value)
- `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
- `Constant`: The alias can't be deleted or changed
- `Private`: The alias is available only in the current scope
- `AllScope`: The alias is copied to any new scopes that are created
- `Unspecified`: The option isn't specified</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.ScopedItemOptions</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Passes an object that represents the item to the pipeline.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies a path of the location of the items.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Type</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
          <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies a new value for the item.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Object</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe an object that represents the new value of the item to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns an object representing the item.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Set-Item`:

- All platforms:
  - `si`

- `Set-Item` is not supported by the PowerShell FileSystem provider. To change the values of items
  in the file system, use the `Set-Content` cmdlet.
- In the Registry drives, `HKLM:` and `HKCU:`, `Set-Item` changes the data in the (Default) value of
  a registry key.
  - To create and change the names of registry keys, use the `New-Item` and `Rename-Item` cmdlet.
  - To change the names and data in registry values, use the `New-ItemProperty`, `Set-ItemProperty`,
    and `Rename-ItemProperty` cmdlets.
- `Set-Item` is designed to work with the data exposed by any provider.
  To list the providers available in your session, type `Get-PSProvider`.
  For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Create an alias ---------</maml:title>
        <maml:introduction>
          <maml:para>This command creates an alias of np for Notepad.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Item -Path Alias:np -Value "C:\windows\notepad.exe"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Change the value of an environment variable ---------</maml:title>
        <maml:introduction>
          <maml:para>This command changes the value of the UserRole environment variable to Administrator.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Item -Path Env:UserRole -Value "Administrator"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Modify your prompt function ---------</maml:title>
        <maml:introduction>
          <maml:para>This command changes the prompt function so that it displays the time before the path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Item -Path Function:prompt -Value {
    'PS '+ (Get-Date -Format t) + " " + (Get-Location) + '&gt; '
}
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Set options for your prompt function ---------</maml:title>
        <maml:introduction>
          <maml:para>This command sets the **AllScope** and **ReadOnly** options for the prompt function.
This command uses the **Options** dynamic parameter of `Set-Item`.
The **Options** parameter is available in `Set-Item` only when you use it with the **Alias** or
**Function** provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Item -Path Function:prompt -Options "AllScope,ReadOnly"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-item?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-Item</maml:linkText>
        <command:uri>Clear-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-Item</maml:linkText>
        <command:uri>Copy-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Item</maml:linkText>
        <command:uri>Get-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-Item</maml:linkText>
        <command:uri>Invoke-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-Item</maml:linkText>
        <command:uri>Move-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Item</maml:linkText>
        <command:uri>New-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Item</maml:linkText>
        <command:uri>Remove-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Item</maml:linkText>
        <command:uri>Rename-Item.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ItemProperty</command:name>
      <maml:description>
        <maml:para>Creates or changes the value of a property of an item.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ItemProperty</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Set-ItemProperty` cmdlet changes the value of the property of the specified item. You can use the cmdlet to establish or change the properties of items. For example, you can use `Set-ItemProperty` to set the value of the **IsReadOnly** property of a file object to `$true`.</maml:para>
      <maml:para>You also use `Set-ItemProperty` to create and change registry values and data. For example, you can add a new registry entry to a key and establish or change its value.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ItemProperty</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
            <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported by any providers installed with PowerShell.
&gt; To impersonate another user, or elevate your credentials when running this cmdlet,
&gt; use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter to qualify the **Path** parameter. The
[FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md) provider is the only
installed PowerShell provider that supports the use of filters. You can find the syntax for the
**FileSystem** filter language in
[about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md). Filters are more efficient
than other parameters, because the provider applies them when the cmdlet gets the objects rather
than having PowerShell filter the objects after they are retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
Implementation varies by provider. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
`"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
specifies the contents of the `C:\Windows` directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the object that has the properties that this cmdlet changes.
Enter a variable that contains the object or a command that gets the object.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.PSObject</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
as escape sequences.</maml:para>
          <maml:para>For more information, see
[about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the property.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the item property.
By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the items with the property to modify.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Type</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **Registry** provider. The **Registry** provider
and this parameter are only available on Windows.</maml:para>
          <maml:para>Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:</maml:para>
          <maml:para>- `String`: Specifies a null-terminated string. Used for **REG_SZ** values.
- `ExpandString`: Specifies a null-terminated string that contains unexpanded references to
  environment variables that are expanded when the value is retrieved. Used for **REG_EXPAND_SZ**
  values.
- `Binary`: Specifies binary data in any form. Used for **REG_BINARY** values.
- `DWord`: Specifies a 32-bit binary number. Used for **REG_DWORD** values.
- `MultiString`: Specifies an array of null-terminated strings terminated by two null characters.
  Used for **REG_MULTI_SZ** values.
- `Qword`: Specifies a 64-bit binary number. Used for **REG_QWORD** values.
- `Unknown`: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST** values.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.Win32.RegistryValueKind</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the property.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Object</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **PSCustomObject** object
representing the item that was changed and its new property value.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Set-ItemProperty`:

- All platforms:
  - `sp`

`Set-ItemProperty` is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Set a property of a file ---------</maml:title>
        <maml:introduction>
          <maml:para>This command sets the value of the **IsReadOnly** property of the "final.doc" file to "true".
It uses **Path** to specify the file, **Name** to specify the name of the property, and the
**Value** parameter to specify the new value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The file is a **System.IO.FileInfo** object and **IsReadOnly** is just one of its properties.
To see all of the properties, type `Get-Item C:\GroupFiles\final.doc | Get-Member -MemberType
Property`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `$true` automatic variable represents a value of "TRUE". For more information, see
[about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-ItemProperty -Path C:\GroupFiles\final.doc -Name IsReadOnly -Value $true
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Create a registry entry and value ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to use `Set-ItemProperty` to create a new registry entry and to assign a
value to the entry. It creates the "NoOfEmployees" entry in the "ContosoCompany" key in
`HKLM\Software` key and sets its value to 823.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Because registry entries are considered to be properties of the registry keys, which are items, you
use `Set-ItemProperty` to create registry entries, and to establish and change their values.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-ItemProperty -Path "HKLM:\Software\ContosoCompany" -Name "NoOfEmployees" -Value 823
Get-ItemProperty -Path "HKLM:\Software\ContosoCompany"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software\contosocompany
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software
PSChildName   : contosocompany
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
NoOfLocations : 2
NoOfEmployees : 823
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-ItemProperty -Path "HKLM:\Software\ContosoCompany" -Name "NoOfEmployees" -Value 824
Get-ItemProperty -Path "HKLM:\Software\ContosoCompany"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software\contosocompany
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software
PSChildName   : contosocompany
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
NoOfLocations : 2
NoOfEmployees : 824
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command creates the registry entry.
It uses **Path** to specify the path of the `HKLM:` drive and the `Software\MyCompany` key.
The command uses **Name** to specify the entry name and **Value** to specify a value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses the `Get-ItemProperty` cmdlet to see the new registry entry.
If you use the `Get-Item` or `Get-ChildItem` cmdlets, the entries do not appear because they are
properties of a key, not items or child items.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The third command changes the value of the **NoOfEmployees** entry to 824.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You can also use the `New-ItemProperty` cmdlet to create the registry entry and its value and then
use `Set-ItemProperty` to change the value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about the `HKLM:` drive, type `Get-Help Get-PSDrive`.
For more information about how to use PowerShell to manage the registry, type `Get-Help Registry`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Modify an item by using the pipeline ---------</maml:title>
        <maml:introduction>
          <maml:para>Th example uses `Get-ChildItem` to get the `weekly.txt` file. The file object is piped to
`Set-ItemProperty`. The `Set-ItemProperty` command uses the **Name** and **Value** parameters to
specify the property and its new value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-ChildItem weekly.txt | Set-ItemProperty -Name IsReadOnly -Value $true
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-itemproperty?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ItemProperty</maml:linkText>
        <command:uri>Clear-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Copy-ItemProperty</maml:linkText>
        <command:uri>Copy-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ItemProperty</maml:linkText>
        <command:uri>Get-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-ItemProperty</maml:linkText>
        <command:uri>Move-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ItemProperty</maml:linkText>
        <command:uri>New-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-ItemProperty</maml:linkText>
        <command:uri>Remove-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-ItemProperty</maml:linkText>
        <command:uri>Rename-ItemProperty.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Providers</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Providers.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-Location</command:name>
      <maml:description>
        <maml:para>Sets the current working location to a specified location.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>Location</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Set-Location` cmdlet sets the working location to a specified location. That location could be a directory, a subdirectory, a registry location, or any provider path.</maml:para>
      <maml:para>PowerShell 6.2 added support for `-` and `+` as a values for the **Path** parameter. PowerShell maintains a history of the last 20 locations that can be accessed with `-` and `+`. This list is independent from the location stack that is accessed using the **StackName** parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a **PathInfo** object that represents the location. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specify the path of a new working location. If no path is provided, `Set-Location` defaults to the
current user's home directory. When wildcards are used, the cmdlet chooses the container (directory,
registry key, certificate store) that matches the wildcard pattern. If the wildcard pattern matches
more than one container, the cmdlet returns an error.</maml:para>
            <maml:para>PowerShell keeps a history of the last 20 locations you have set. If the **Path** parameter value
is the `-` character, then the new working location will be the previous working location in history
(if it exists). Similarly, if the value is the `+` character, then the new working location will be
the next working location in history (if it exists). This is similar to using `Pop-Location` and
`Push-Location` except that the history is a list, not a stack, and is implicitly tracked,
not manually controlled. There is no way to view the history list.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Location</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies a path of the location. The value of the **LiteralPath** parameter is used exactly as it
is typed. No characters are interpreted as wildcard characters. If the path includes escape
characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not to
interpret any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a **PathInfo** object that represents the location. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Location</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a **PathInfo** object that represents the location. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StackName</maml:name>
          <maml:description>
            <maml:para>Specifies an existing location stack name that this cmdlet makes the current location stack. Enter
a location stack name. To indicate the unnamed default location stack, type `$null` or an empty
string (`""`).</maml:para>
            <maml:para>Using this parameter does not change the current location. It only changes the stack used by the
`*-Location` cmdlets. The `*-Location` cmdlets act on the current stack unless you use the
**StackName** parameter to specify a different stack. For more information about location stacks,
see the [Notes](#notes).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path of the location. The value of the **LiteralPath** parameter is used exactly as it
is typed. No characters are interpreted as wildcard characters. If the path includes escape
characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not to
interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns a **PathInfo** object that represents the location. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specify the path of a new working location. If no path is provided, `Set-Location` defaults to the
current user's home directory. When wildcards are used, the cmdlet chooses the container (directory,
registry key, certificate store) that matches the wildcard pattern. If the wildcard pattern matches
more than one container, the cmdlet returns an error.</maml:para>
          <maml:para>PowerShell keeps a history of the last 20 locations you have set. If the **Path** parameter value
is the `-` character, then the new working location will be the previous working location in history
(if it exists). Similarly, if the value is the `+` character, then the new working location will be
the next working location in history (if it exists). This is similar to using `Pop-Location` and
`Push-Location` except that the history is a list, not a stack, and is implicitly tracked,
not manually controlled. There is no way to view the history list.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StackName</maml:name>
        <maml:description>
          <maml:para>Specifies an existing location stack name that this cmdlet makes the current location stack. Enter
a location stack name. To indicate the unnamed default location stack, type `$null` or an empty
string (`""`).</maml:para>
          <maml:para>Using this parameter does not change the current location. It only changes the stack used by the
`*-Location` cmdlets. The `*-Location` cmdlets act on the current stack unless you use the
**StackName** parameter to specify a different stack. For more information about location stacks,
see the [Notes](#notes).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter with **Path** or **LiteralPath**, this cmdlet returns a
**PathInfo** object representing the new location.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PathInfoStack</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter with  **StackName**, this cmdlet returns a **PathInfoStack**
object representing the new stack context.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Set-Location`:

- All Platforms:
  - `cd`
  - `chdir`
  - `sl`

PowerShell supports multiple runspaces per process. Each runspace has its own _current directory_.
This is not the same as `[System.Environment]::CurrentDirectory`. This behavior can be an issue
when calling .NET APIs or running native applications without providing explicit directory paths.

Even if the location cmdlets did set the process-wide current directory, you can't depend on it
because another runspace might change it at any time. You should use the location cmdlets to perform
path-based operations using the current working directory specific to the current runspace.

The `Set-Location` cmdlet is designed to work with the data exposed by any provider. To list the
providers available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

A stack is a last-in, first-out list in which only the most recently added item can be accessed. You
add items to a stack in the order that you use them, and then retrieve them for use in the reverse
order. PowerShell lets you store provider locations in location stacks. PowerShell creates an
unnamed default location stack. You can create multiple named location stacks. If you do not specify
a stack name, PowerShell uses the current location stack. By default, the unnamed default location
is the current location stack, but you can use the `Set-Location` cmdlet to change the current
location stack.

To manage location stacks, use the `*-Location` cmdlets, as follows:

- To add a location to a location stack, use the `Push-Location` cmdlet.

- To get a location from a location stack, use the `Pop-Location` cmdlet.

- To display the locations in the current location stack, use the **Stack** parameter of the
  `Get-Location` cmdlet. To display the locations in a named location stack, use the **StackName**
  parameter of `Get-Location`.

- To create a new location stack, use the **StackName** parameter of `Push-Location`. If you specify
  a stack that does not exist, `Push-Location` creates the stack.

- To make a location stack the current location stack, use the **StackName** parameter of
  `Set-Location`.

The unnamed default location stack is fully accessible only when it is the current location stack.
If you make a named location stack the current location stack, you can no longer use the
`Push-Location` or `Pop-Location` cmdlets to add or get items from the default stack or use the
`Get-Location` cmdlet to display the locations in the unnamed stack. To make the unnamed stack
the current stack, use the **StackName** parameter of the `Set-Location` cmdlet with a value of
`$null` or an empty string (`""`).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Set the current location ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Set-Location -Path "HKLM:\"
PS HKLM:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command sets the current location to the root of the `HKLM:` drive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Set the current location and display that location ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Set-Location -Path "Env:\" -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
Env:\</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS Env:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command sets the current location to the root of the `Env:` drive. It uses the **PassThru**
parameter to direct PowerShell to return a **PathInfo** object that represents the `Env:\` location.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Set location to the current location in the C: drive ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\Windows\&gt; Set-Location HKLM:\
PS HKLM:\&gt; Set-Location C:
PS C:\Windows\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command sets the location to the root of the `HKLM:` drive in the Registry provider.
The second command sets the location to the current location of the `C:` drive in the FileSystem
provider.
When the drive name is specified in the form `&lt;DriveName&gt;:` (without backslash), the cmdlet sets
the location to the current location in the PSDrive.
To get the current location in the PSDrive use `Get-Location -PSDrive &lt;DriveName&gt;` command.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Set the current location to a named stack ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Push-Location -Path 'C:\Program Files\PowerShell\' -StackName "Paths"
PS C:\Program Files\PowerShell\&gt; Set-Location -StackName "Paths"
PS C:\Program Files\PowerShell\&gt; Get-Location -Stack
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Path
----
C:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command adds the current location to the Paths stack.
The second command makes the Paths location stack the current location stack.
The third command displays the locations in the current location stack.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `*-Location` cmdlets use the current location stack unless a different location stack is
specified in the command. For information about location stacks, see the [Notes](#notes).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Navigate location history using `+` or `-` ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Set-Location -Path $Env:SystemRoot
PS C:\Windows&gt; Set-Location -Path Cert:\
PS Cert:\&gt; Set-Location -Path HKLM:\
PS HKLM:\&gt;</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Navigate back through the history using "-"
PS HKLM:\&gt; Set-Location -Path -
PS Cert:\&gt; Set-Location -Path -
PS C:\Windows&gt;</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Navigate using the Set-Location alias "cd" and the implicit positional Path parameter
PS C:\Windows&gt; cd -
PS C:\&gt; cd +
PS C:\Windows&gt; cd +
PS Cert:\&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Using the alias, `cd -` or `cd +` is an easy way to navigate through your location history while
in your terminal. For more information on navigating with `-`/`+`, see the **Path** parameter.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-location?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Location</maml:linkText>
        <command:uri>Get-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Pop-Location</maml:linkText>
        <command:uri>Pop-Location.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Push-Location</maml:linkText>
        <command:uri>Push-Location.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-Service</command:name>
      <maml:description>
        <maml:para>Starts, stops, and suspends a service, and changes its properties.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Set-Service` cmdlet changes the properties of a service such as the **Status**, **Description**, **DisplayName**, and **StartupType**. `Set-Service` can start, stop, suspend, or pause a service. To identify a service, enter its service name or submit a service object. Or, send a service name or service object down the pipeline to `Set-Service`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running `Set-Service`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies the account used by the service as the
[Service Logon Account](/windows/desktop/ad/about-service-logon-accounts).</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object,
such as one generated by the `Get-Credential` cmdlet. If you type a user name, this cmdlet prompts
you for a password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](xref:System.Management.Automation.PSCredential) object
and the password is stored as a [SecureString](xref:System.Security.SecureString).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](xref:System.Security.SecureString#how-secure-is-securestring).</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies a new description for the service.</maml:para>
            <maml:para>The service description appears in **Computer Management, Services**. The **Description** isn't a
property of the `Get-Service` **ServiceController** object. To see the service description, use
`Get-CimInstance` that returns a **Win32_Service** object that represents the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies a new display name for the service.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Typically, `Set-Service` only operates on Windows services and not drivers. However, if you
&gt; specify the name of a driver, `Set-Service` can target the driver.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Specifies the Stop mode of the service. This parameter only works when `-Status Stopped` is used. If
enabled, `Set-Service` stops the dependent services before the target service is stopped. By
default, exceptions are raised when other running services depend on the target service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service name of the service to be changed. Wildcard characters aren't permitted. You
can use the pipeline to send a service name to `Set-Service`.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Typically, `Set-Service` only operates on Windows services and not drivers. However, if you
&gt; specify the name of a driver, `Set-Service` can target the driver.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a **ServiceController** object that represents the services that were changed. By default,
`Set-Service` doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SecurityDescriptorSddl</maml:name>
          <maml:description>
            <maml:para>Specifies the **SecurityDescriptor** for the service in **Sddl** format. The account calling
`Set-Service` with this parameter must have the WRITE_DAC and WRITE_OWNER permissions. For more
information, see
[Service security and access rights](/windows/win32/services/service-security-and-access-rights).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StartupType</maml:name>
          <maml:description>
            <maml:para>Specifies the start mode of the service.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- **Automatic** - The service is started or was started by the operating system, at system start-up.
  If an automatically started service depends on a manually started service, the manually started
  service is also started automatically at system startup.
- **AutomaticDelayedStart** - Starts shortly after the system boots.
- **Disabled** - The service is disabled and cannot be started by a user or application.
- **InvalidValue** - Has no effect. The cmdlet does not return an error but the StartupType of the
  service is not changed.
- **Manual** - The service is started only manually, by a user, using the Service Control Manager,
  or by an application.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.ServiceStartupType</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Status</maml:name>
          <maml:description>
            <maml:para>Specifies the status for the service.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- **Paused**. Suspends the service.
- **Running**. Starts the service.
- **Stopped**. Stops the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if `Set-Service` runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running `Set-Service`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies the account used by the service as the
[Service Logon Account](/windows/desktop/ad/about-service-logon-accounts).</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object,
such as one generated by the `Get-Credential` cmdlet. If you type a user name, this cmdlet prompts
you for a password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](xref:System.Management.Automation.PSCredential) object
and the password is stored as a [SecureString](xref:System.Security.SecureString).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](xref:System.Security.SecureString#how-secure-is-securestring).</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies a new description for the service.</maml:para>
            <maml:para>The service description appears in **Computer Management, Services**. The **Description** isn't a
property of the `Get-Service` **ServiceController** object. To see the service description, use
`Get-CimInstance` that returns a **Win32_Service** object that represents the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies a new display name for the service.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; Typically, `Set-Service` only operates on Windows services and not drivers. However, if you
&gt; specify the name of a driver, `Set-Service` can target the driver.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Specifies the Stop mode of the service. This parameter only works when `-Status Stopped` is used. If
enabled, `Set-Service` stops the dependent services before the target service is stopped. By
default, exceptions are raised when other running services depend on the target service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies a **ServiceController** object that represents the service to change. Enter a variable
that contains the object, or type a command or expression that gets the object, such as a
`Get-Service` command. You can use the pipeline to send a service object to `Set-Service`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a **ServiceController** object that represents the services that were changed. By default,
`Set-Service` doesn't generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SecurityDescriptorSddl</maml:name>
          <maml:description>
            <maml:para>Specifies the **SecurityDescriptor** for the service in **Sddl** format. The account calling
`Set-Service` with this parameter must have the WRITE_DAC and WRITE_OWNER permissions. For more
information, see
[Service security and access rights](/windows/win32/services/service-security-and-access-rights).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>StartupType</maml:name>
          <maml:description>
            <maml:para>Specifies the start mode of the service.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- **Automatic** - The service is started or was started by the operating system, at system start-up.
  If an automatically started service depends on a manually started service, the manually started
  service is also started automatically at system startup.
- **AutomaticDelayedStart** - Starts shortly after the system boots.
- **Disabled** - The service is disabled and cannot be started by a user or application.
- **InvalidValue** - Has no effect. The cmdlet does not return an error but the StartupType of the
  service is not changed.
- **Manual** - The service is started only manually, by a user, using the Service Control Manager,
  or by an application.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.ServiceStartupType</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Status</maml:name>
          <maml:description>
            <maml:para>Specifies the status for the service.</maml:para>
            <maml:para>The acceptable values for this parameter are as follows:</maml:para>
            <maml:para>- **Paused**. Suspends the service.
- **Running**. Starts the service.
- **Stopped**. Stops the service.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if `Set-Service` runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running `Set-Service`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies the account used by the service as the
[Service Logon Account](/windows/desktop/ad/about-service-logon-accounts).</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object,
such as one generated by the `Get-Credential` cmdlet. If you type a user name, this cmdlet prompts
you for a password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](xref:System.Management.Automation.PSCredential) object
and the password is stored as a [SecureString](xref:System.Security.SecureString).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](xref:System.Security.SecureString#how-secure-is-securestring).</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies a new description for the service.</maml:para>
          <maml:para>The service description appears in **Computer Management, Services**. The **Description** isn't a
property of the `Get-Service` **ServiceController** object. To see the service description, use
`Get-CimInstance` that returns a **Win32_Service** object that represents the service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies a new display name for the service.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; Typically, `Set-Service` only operates on Windows services and not drivers. However, if you
&gt; specify the name of a driver, `Set-Service` can target the driver.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Specifies the Stop mode of the service. This parameter only works when `-Status Stopped` is used. If
enabled, `Set-Service` stops the dependent services before the target service is stopped. By
default, exceptions are raised when other running services depend on the target service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies a **ServiceController** object that represents the service to change. Enter a variable
that contains the object, or type a command or expression that gets the object, such as a
`Get-Service` command. You can use the pipeline to send a service object to `Set-Service`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service name of the service to be changed. Wildcard characters aren't permitted. You
can use the pipeline to send a service name to `Set-Service`.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; Typically, `Set-Service` only operates on Windows services and not drivers. However, if you
&gt; specify the name of a driver, `Set-Service` can target the driver.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns a **ServiceController** object that represents the services that were changed. By default,
`Set-Service` doesn't generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SecurityDescriptorSddl</maml:name>
        <maml:description>
          <maml:para>Specifies the **SecurityDescriptor** for the service in **Sddl** format. The account calling
`Set-Service` with this parameter must have the WRITE_DAC and WRITE_OWNER permissions. For more
information, see
[Service security and access rights](/windows/win32/services/service-security-and-access-rights).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>StartupType</maml:name>
        <maml:description>
          <maml:para>Specifies the start mode of the service.</maml:para>
          <maml:para>The acceptable values for this parameter are as follows:</maml:para>
          <maml:para>- **Automatic** - The service is started or was started by the operating system, at system start-up.
  If an automatically started service depends on a manually started service, the manually started
  service is also started automatically at system startup.
- **AutomaticDelayedStart** - Starts shortly after the system boots.
- **Disabled** - The service is disabled and cannot be started by a user or application.
- **InvalidValue** - Has no effect. The cmdlet does not return an error but the StartupType of the
  service is not changed.
- **Manual** - The service is started only manually, by a user, using the Service Control Manager,
  or by an application.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.ServiceStartupType</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Status</maml:name>
        <maml:description>
          <maml:para>Specifies the status for the service.</maml:para>
          <maml:para>The acceptable values for this parameter are as follows:</maml:para>
          <maml:para>- **Paused**. Suspends the service.
- **Running**. Starts the service.
- **Stopped**. Stops the service.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if `Set-Service` runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

`Set-Service` requires elevated permissions. Use the **Run as administrator** option.

`Set-Service` can only control services when the current user has permissions to manage services. If
a command doesn't work correctly, you might not have the required permissions.

To find a service's service name or display name, use `Get-Service`. The service names are in the
**Name** column and the display names are in the **DisplayName** column.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Change a display name ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, a service's display name is changed. To view the original display name, use
`Get-Service`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Service -Name LanmanWorkstation -DisplayName "LanMan Workstation"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Set-Service` uses the **Name** parameter to specify the service's name, **LanmanWorkstation**. The
**DisplayName** parameter specifies the new display name, **LanMan Workstation**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Change the startup type of services ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to change a service's startup type.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Service -Name BITS -StartupType Automatic
Get-Service BITS | Select-Object -Property Name, StartType, Status
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name  StartType   Status
----  ---------   ------
BITS  Automatic  Running
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Set-Service` uses the **Name** parameter to specify the service's name, **BITS**. The
**StartupType** parameter sets the service to **Automatic**.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Service` uses the **Name** parameter to specify the **BITS** service and sends the object down
the pipeline. `Select-Object` uses the **Property** parameter to display the **BITS** service's
status.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Change the description of a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example changes the BITS service's description and displays the result.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-CimInstance` cmdlet is used because it returns a **Win32_Service** object that includes the
service's **Description**.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-CimInstance Win32_Service -Filter 'Name = "BITS"'  | Format-List  Name, Description
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name        : BITS
Description : Transfers files in the background using idle network bandwidth. If the service is
              disabled, then any applications that depend on BITS, such as Windows Update or MSN
              Explorer, will be unable to automatically download programs and other information.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Service -Name BITS -Description "Transfers files in the background using idle network bandwidth."
Get-CimInstance Win32_Service -Filter 'Name = "BITS"' | Format-List  Name, Description
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name        : BITS
Description : Transfers files in the background using idle network bandwidth.
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-CimInstance` sends the object down the pipeline to `Format-List` and displays the service's
name and description. For comparison purposes, the command is run before and after the description
is updated.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Set-Service` uses the **Name** parameter to specify the **BITS** service. The **Description**
parameter specifies the updated text for the services' description.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Start a service ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, a service is started.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-Service -Name WinRM -Status Running -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Status   Name               DisplayName
------   ----               -----------
Running  WinRM              Windows Remote Management (WS-Manag...
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Set-Service` uses the **Name** parameter to specify the service, **WinRM**. The **Status**
parameter uses the value **Running** to start the service. The **PassThru** parameter outputs a
**ServiceController** object that displays the results.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Suspend a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses the pipeline to pause to service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service -Name Schedule | Set-Service -Status Paused
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Service` uses the **Name** parameter to specify the **Schedule** service, and sends the object
down the pipeline. `Set-Service` uses the **Status** parameter to set the service to **Paused**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Stop a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses a variable to stop a service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$S = Get-Service -Name Schedule
Set-Service -InputObject $S -Status Stopped
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Service` uses the **Name** parameter to specify the service, **Schedule**. The object is stored
in the variable, `$S`. `Set-Service` uses the **InputObject** parameter and specifies the object
stored `$S`. The **Status** parameter sets the service to **Stopped**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Stop a service on a remote system ---------</maml:title>
        <maml:introduction>
          <maml:para>This example stops a service on a remote computer.
For more information, see [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Cred = Get-Credential
$S = Get-Service -Name Schedule
Invoke-Command -ComputerName server01.contoso.com -Credential $Cred -ScriptBlock {
  Set-Service -InputObject $S -Status Stopped
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Credential` prompts for a username and password, and stores the credentials in the `$Cred`
variable. `Get-Service` uses the **Name** parameter to specify the **Schedule** service. The object
is stored in the variable, `$S`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Invoke-Command` uses the **ComputerName** parameter to specify a remote computer. The
**Credential** parameter uses the `$Cred` variable to sign on to the computer. The **ScriptBlock**
calls `Set-Service`. The **InputObject** parameter specifies the service object stored `$S`. The
**Status** parameter sets the service to **Stopped**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Change credential of a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example changes the credentials that are used to manage a service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$credential = Get-Credential
Set-Service -Name Schedule -Credential $credential
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Credential` prompts for a username and password, and stores the credentials in the
`$credential` variable. `Set-Service` uses the **Name** parameter to specify the **Schedule**
service. The **Credential** parameter uses the `$credential` variable and updates the **Schedule**
service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Change the SecurityDescriptor of a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example changes a service's **SecurityDescriptor**.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$SDDL = "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;SU)"
Set-Service -Name "BITS" -SecurityDescriptorSddl $SDDL
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **SecurityDescriptor** is stored in the `$SDDL` variable. `Set-Service` uses the **Name**
parameter to specify the **BITS** service. The **SecurityDescriptorSddl** parameter uses
`$SDDL` to change the **SecurityDescriptor** for the **BITS** service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 10: Set the startup type for multiple services ---------</maml:title>
        <maml:introduction>
          <maml:para>The `Set-Service` cmdlet only accepts one service name at a time. However, you can pipe multiple
services to `Set-Service` to change the configuration of multiple services.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Service SQLWriter,spooler |
    Set-Service -StartupType Automatic -PassThru |
    Select-Object Name, StartType
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Name      StartType
----      ---------
spooler   Automatic
SQLWriter Automatic
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-TimeZone</command:name>
      <maml:description>
        <maml:para>Sets the system time zone to a specified time zone.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>TimeZone</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Set-TimeZone` cmdlet sets the system time zone to a specified time zone.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-TimeZone</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the time zone that this cmdlet sets. A full list of Time Zone names can be
obtained by running the following command: `Get-TimeZone -ListAvailable`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-TimeZone</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies the ID of the time zone that this cmdlet sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-TimeZone</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies a **TimeZoneInfo** object to use as input.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.TimeZoneInfo</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies the ID of the time zone that this cmdlet sets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies a **TimeZoneInfo** object to use as input.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.TimeZoneInfo</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the time zone that this cmdlet sets. A full list of Time Zone names can be
obtained by running the following command: `Get-TimeZone -ListAvailable`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.TimeZoneInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.TimeZoneInfo</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **TimeZoneInfo** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Set-TimeZone`:

- Windows:
  - `stz`

This cmdlet is only available on Windows platforms.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Set the time zone by Id ---------</maml:title>
        <maml:introduction>
          <maml:para>This example sets the time zone on the local computer to UTC.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-TimeZone -Id "UTC"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Id                         : UTC
HasIanaId                  : True
DisplayName                : (UTC) Coordinated Universal Time
StandardName               : Coordinated Universal Time
DaylightName               : Coordinated Universal Time
BaseUtcOffset              : 00:00:00
SupportsDaylightSavingTime : False
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Set the time zone by name ---------</maml:title>
        <maml:introduction>
          <maml:para>This example sets the time zone on the local computer to UTC.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Set-TimeZone -Name 'Coordinated Universal Time' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>As we saw in the previous example, the **Id** and the **Name** of the Time Zone do not always match.
The **Name** parameter must match the **StandardName** or **DaylightName** properties of the
**TimeZoneInfo** object.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; The time zone names can vary based on the Culture settings in Windows. This example shows the
&gt; values for a system set to `en-US`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3 - List all available time zones ---------</maml:title>
        <maml:introduction>
          <maml:para>A full list of Time Zone IDs can be obtained by running the following command:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-TimeZone -ListAvailable
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/set-timezone?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-TimeZone</maml:linkText>
        <command:uri>Get-TimeZone.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Split-Path</command:name>
      <maml:description>
        <maml:para>Returns the specified part of a path.</maml:para>
      </maml:description>
      <command:verb>Split</command:verb>
      <command:noun>Path</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Split-Path` cmdlet returns only the specified part of a path, such as the parent folder, a subfolder, or a filename. It can also get items that are referenced by the split path and tell whether the path is relative or absolute. If you split a path without specifying any other parameters, `Split-Path` returns the parent part of the path provided.</maml:para>
      <maml:para>The `Split-Path` command returns strings. It doesn't return **FileInfo** or other item objects like the `*-Item` commands do.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Parent</maml:name>
          <maml:description>
            <maml:para>`Split-Path` returns only the parent container portion of the path string supplied. If the **Path**
string doesn't contain a parent container, `Split-Path` returns an empty string.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Leaf</maml:name>
          <maml:description>
            <maml:para>When using the **Leaf** parameter, `Split-Path` returns only the last item in the path string
supplied, regardless whether that item is a file or a directory.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LeafBase</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns only base name of the leaf. For example, in the path
`C:\Test\Logs\Pass1.log`, it returns only `Pass1`.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Extension</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns only the extension of the leaf. For example, in the path
`C:\Test\Logs\Pass1.log`, it returns only `.log`.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Qualifier</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns only the qualifier of the specified path. For the FileSystem or
Registry providers, the qualifier is the drive of the provider path, such as `C:` or `HKCU:`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoQualifier</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns the path without the qualifier. For the FileSystem or registry
providers, the qualifier is the drive of the provider path, such as `C:` or `HKCU:`. For example,
in the path `C:\Test\Logs\Pass1.log`, it returns only `\Test\Logs\Pass1.log`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IsAbsolute</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns `$true` if the path is absolute and `$false` if it's relative. On
Windows, an absolute path string must start with a provider drive specifier, like `C:` or `HKCU:`. A
relative path starts with a dot (`.`) or a dot-dot (`..`).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Split-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>LiteralPath</maml:name>
          <maml:description>
            <maml:para>Specifies the paths to be split. Unlike **Path**, the value of **LiteralPath** is used exactly as it
is typed. No characters are interpreted as wildcard characters. If the path includes escape
characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not to
interpret any characters as escape sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Resolve</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Extension</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns only the extension of the leaf. For example, in the path
`C:\Test\Logs\Pass1.log`, it returns only `.log`.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IsAbsolute</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns `$true` if the path is absolute and `$false` if it's relative. On
Windows, an absolute path string must start with a provider drive specifier, like `C:` or `HKCU:`. A
relative path starts with a dot (`.`) or a dot-dot (`..`).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Leaf</maml:name>
        <maml:description>
          <maml:para>When using the **Leaf** parameter, `Split-Path` returns only the last item in the path string
supplied, regardless whether that item is a file or a directory.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LeafBase</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns only base name of the leaf. For example, in the path
`C:\Test\Logs\Pass1.log`, it returns only `Pass1`.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies the paths to be split. Unlike **Path**, the value of **LiteralPath** is used exactly as it
is typed. No characters are interpreted as wildcard characters. If the path includes escape
characters, enclose it in single quotation marks. Single quotation marks tell PowerShell not to
interpret any characters as escape sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoQualifier</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns the path without the qualifier. For the FileSystem or registry
providers, the qualifier is the drive of the provider path, such as `C:` or `HKCU:`. For example,
in the path `C:\Test\Logs\Pass1.log`, it returns only `\Test\Logs\Pass1.log`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Parent</maml:name>
        <maml:description>
          <maml:para>`Split-Path` returns only the parent container portion of the path string supplied. If the **Path**
string doesn't contain a parent container, `Split-Path` returns an empty string.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks. You can also pipe a path to this cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Qualifier</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns only the qualifier of the specified path. For the FileSystem or
Registry providers, the qualifier is the drive of the provider path, such as `C:` or `HKCU:`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Resolve</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet displays the items that are referenced by the resulting split path
instead of displaying the path elements.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns text strings. When you specify the **Resolve** parameter, it returns a
string that describes the location of the items. It doesn't return objects that represent the
items, such as a **FileInfo** or **RegistryKey** object.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Boolean</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you specify the **IsAbsolute** parameter, this cmdlet returns a **Boolean** value.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- The split location parameters (**Qualifier**, **Parent**, **Extension**, **Leaf**, **LeafBase**,
  and **NoQualifier**) are exclusive. You can use only one in each command.

- The cmdlets that contain the **Path** noun (the **Path** cmdlets) work with path names and return
  the names in a concise format that all PowerShell providers can interpret. They're designed for
  use in programs and scripts where you want to display all or part of a path name in a particular
  format. Use them in the way that you would use **Dirname**, **Normpath**, **Realpath**, **Join**,
  or other path manipulators.

- You can use the **Path** cmdlets together with several providers. These include the FileSystem,
  Registry, and Certificate providers.

- `Split-Path` is designed to work with the data exposed by any provider. To list the providers
  available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the qualifier of a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Split-Path -Path "HKCU:\Software\Microsoft" -Qualifier
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
HKCU:
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command returns only the qualifier of the path. The qualifier is the drive.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display filename portion of the path ---------</maml:title>
        <maml:introduction>
          <maml:para>When using the **Leaf** parameter, `Split-Path` returns only the last item in the path string
supplied, regardless whether that item is a file or a directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Split-Path -Path .\folder1\*.txt -Leaf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
*.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Split-Path -Path .\folder1\*.txt -Leaf -Resolve
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
file1.txt
file2.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When you use the **Resolve** parameter, `Split-Path` resolves the path string provided and returns
the items referenced by the path.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get the parent container ---------</maml:title>
        <maml:introduction>
          <maml:para>When using the **Parent** parameter, `Split-Path` returns only the parent container portion of the
path string supplied. If the **Path** string doesn't contain a parent container, `Split-Path`
returns an empty string.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Split-Path -Path .\folder1\file1.txt -Parent
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
.\folder1
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Split-Path -Path .\folder1\file1.txt -Parent -Resolve
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
D:\temp\test\folder1
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When you use the **Resolve** parameter, `Split-Path` resolves the path string provided and returns
the full path of the parent container.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Determines whether a path is absolute ---------</maml:title>
        <maml:introduction>
          <maml:para>This command determines whether the path is relative or absolute. In this case, because the path is
relative to the current folder, which is represented by a dot (`.`), it returns `$false`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Split-Path -Path ".\My Pictures\*.jpg" -IsAbsolute
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Change location to a specified path ---------</maml:title>
        <maml:introduction>
          <maml:para>This command changes your location to the folder that contains the PowerShell profile.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS C:\&gt; Set-Location (Split-Path -Path $PROFILE)
PS C:\Users\User01\Documents\PowerShell&gt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command in parentheses uses `Split-Path` to return only the parent of the path stored in the
built-in `$PROFILE` variable. The **Parent** parameter is the default split location parameter.
Therefore, you can omit it from the command. The parentheses direct PowerShell to run the command
first. This is a useful way to move to a folder that has a long path name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Split a path using the pipeline ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
'C:\Users\User01\My Documents\My Pictures' | Split-Path
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
C:\Users\User01\My Documents
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses a pipeline operator (`|`) to send a path to `Split-Path`. The path is enclosed in
quotation marks to indicate that it's a single token.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/split-path?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Convert-Path</maml:linkText>
        <command:uri>Convert-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-Path</maml:linkText>
        <command:uri>Join-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resolve-Path</maml:linkText>
        <command:uri>Resolve-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Path</maml:linkText>
        <command:uri>Test-Path.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Start-Process</command:name>
      <maml:description>
        <maml:para>Starts one or more processes on the local computer.</maml:para>
      </maml:description>
      <command:verb>Start</command:verb>
      <command:noun>Process</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Start-Process` cmdlet starts one or more processes on the local computer. By default, `Start-Process` creates a new process that inherits all the environment variables that are defined in the current process.</maml:para>
      <maml:para>To specify the program that runs in the process, enter an executable file or script file, or a file that can be opened using a program on the computer. If you specify a non-executable file, `Start-Process` starts the program that's associated with the file, similar to the `Invoke-Item` cmdlet.</maml:para>
      <maml:para>You can use the parameters of `Start-Process` to specify options, such as loading a user profile, starting the process in a new window, or using alternate credentials.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Start-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ArgumentList</maml:name>
          <maml:description>
            <maml:para>Specifies parameters or parameter values to use when this cmdlet starts the process. Arguments can
be accepted as a single string with the arguments separated by spaces, or as an array of strings
separated by commas. The cmdlet joins the array into a single string with each element of the array
separated by a single space.</maml:para>
            <maml:para>The outer quotes of the PowerShell strings aren't included when the **ArgumentList** values are
passed to the new process. If parameters or parameter values contain a space or quotes, they need to
be surrounded with escaped double quotes. For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
            <maml:para>For the best results, use a single **ArgumentList** value containing all the arguments and any
needed quote characters.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Environment</maml:name>
          <maml:description>
            <maml:para>Specifies one or more environment variables to override for the process as a hash table. Specify
the name of an environment variable as a key in the hash table and the desired value. To unset an
environment variable, specify its value as `$null`.</maml:para>
            <maml:para>The specified variables are replaced in the process. When you specify the `PATH` environment
variable it's replaced with the value of `$PSHOME` followed by the specified value from this
parameter. On Windows, the command appends the values for `PATH` in the Machine and User scopes
after the new value.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>FilePath</maml:name>
          <maml:description>
            <maml:para>Specifies the optional path and filename of the program that runs in the process. Enter the name of
an executable file or of a document, such as a `.txt` or `.doc` file, that's associated with a
program on the computer. This parameter is required.</maml:para>
            <maml:para>If you specify only a filename that does not correspond to a system command, use the
**WorkingDirectory** parameter to specify the path.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns a process object for each process that the cmdlet started. By default, this cmdlet doesn't
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Verb</maml:name>
          <maml:description>
            <maml:para>Specifies a verb to use when this cmdlet starts the process. The verbs that are available are
determined by the filename extension of the file that runs in the process.</maml:para>
            <maml:para>The following table shows the verbs for some common process file types.</maml:para>
            <maml:para>| File type |                     Verbs                     |
| --------- | --------------------------------------------- |
| .cmd      | `Edit`, `Open`, `Print`, `RunAs`, `RunAsUser` |
| .exe      | `Open`, `RunAs`, `RunAsUser`                  |
| .txt      | `Open`, `Print`, `PrintTo`                    |
| .wav      | `Open`, `Play`                                |</maml:para>
            <maml:para>To find the verbs that can be used with the file that runs in a process, use the `New-Object` cmdlet
to create a **System.Diagnostics.ProcessStartInfo** object for the file. The available verbs are in
the **Verbs** property of the **ProcessStartInfo** object. For details, see the examples.</maml:para>
            <maml:para>The parameter doesn't apply to non-Windows systems.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Wait</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet waits for the specified process and its descendants to complete before
accepting more input. This parameter suppresses the command prompt or retains the window until the
processes finish.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WindowStyle</maml:name>
          <maml:description>
            <maml:para>Specifies the state of the window that's used for the new process. The default value is `Normal`.
The acceptable values for this parameter are:</maml:para>
            <maml:para>- `Normal`
- `Hidden`
- `Minimized`
- `Maximized`</maml:para>
            <maml:para>You can't use the **WindowStyle** and **NoNewWindow** parameters in the same command.</maml:para>
            <maml:para>The parameter doesn't apply to non-Windows systems. When using on non-Windows systems, you never
get a new window.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Diagnostics.ProcessWindowStyle</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WorkingDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the location that the new process should start in.</maml:para>
            <maml:para>When not specified, the cmdlet defaults to the fully-qualified location specified in the
**FilePath** parameter. If the value of the **FilePath** parameter is not fully-qualified, it
defaults to the current working directory of the calling process.</maml:para>
            <maml:para>Wildcards aren't supported. The path must not contain characters that would be interpreted as
wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>ArgumentList</maml:name>
        <maml:description>
          <maml:para>Specifies parameters or parameter values to use when this cmdlet starts the process. Arguments can
be accepted as a single string with the arguments separated by spaces, or as an array of strings
separated by commas. The cmdlet joins the array into a single string with each element of the array
separated by a single space.</maml:para>
          <maml:para>The outer quotes of the PowerShell strings aren't included when the **ArgumentList** values are
passed to the new process. If parameters or parameter values contain a space or quotes, they need to
be surrounded with escaped double quotes. For more information, see
[about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).</maml:para>
          <maml:para>For the best results, use a single **ArgumentList** value containing all the arguments and any
needed quote characters.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to perform this action. By default, the cmdlet uses the
credentials of the current user.</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Environment</maml:name>
        <maml:description>
          <maml:para>Specifies one or more environment variables to override for the process as a hash table. Specify
the name of an environment variable as a key in the hash table and the desired value. To unset an
environment variable, specify its value as `$null`.</maml:para>
          <maml:para>The specified variables are replaced in the process. When you specify the `PATH` environment
variable it's replaced with the value of `$PSHOME` followed by the specified value from this
parameter. On Windows, the command appends the values for `PATH` in the Machine and User scopes
after the new value.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>FilePath</maml:name>
        <maml:description>
          <maml:para>Specifies the optional path and filename of the program that runs in the process. Enter the name of
an executable file or of a document, such as a `.txt` or `.doc` file, that's associated with a
program on the computer. This parameter is required.</maml:para>
          <maml:para>If you specify only a filename that does not correspond to a system command, use the
**WorkingDirectory** parameter to specify the path.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LoadUserProfile</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet loads the Windows user profile stored in the `HKEY_USERS` registry key
for the current user. The parameter doesn't apply to non-Windows systems.</maml:para>
          <maml:para>This parameter doesn't affect the PowerShell profiles. For more information, see
[about_Profiles](../Microsoft.PowerShell.Core/About/about_Profiles.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoNewWindow</maml:name>
        <maml:description>
          <maml:para>Start the new process in the current console window. By default on Windows, PowerShell opens a new
window. On non-Windows systems, you never get a new window.</maml:para>
          <maml:para>You can't use the **NoNewWindow** and **WindowStyle** parameters in the same command.</maml:para>
          <maml:para>The parameter doesn't apply to non-Windows systems.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns a process object for each process that the cmdlet started. By default, this cmdlet doesn't
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>RedirectStandardError</maml:name>
        <maml:description>
          <maml:para>Specifies a file. This cmdlet sends any errors generated by the process to a file that you specify.
Enter the path and filename. By default, the errors are displayed in the console.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>RedirectStandardInput</maml:name>
        <maml:description>
          <maml:para>Specifies a file. This cmdlet reads input from the specified file. Enter the path and filename of
the input file. By default, the process gets its input from the keyboard.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>RedirectStandardOutput</maml:name>
        <maml:description>
          <maml:para>Specifies a file. This cmdlet sends the output generated by the process to a file that you specify.
Enter the path and filename. By default, the output is displayed in the console.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>UseNewEnvironment</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet uses new environment variables specified for the process. By default, the
started process runs with the environment variables inherited from the parent process.</maml:para>
          <maml:para>On Windows, when you use **UseNewEnvironment**, the new process starts only containing the default
environment variables defined for the **Machine** scope. This has the side effect that the
`$Env:USERNAME` is set to **SYSTEM**. None of the variables from the **User** scope are included.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Verb</maml:name>
        <maml:description>
          <maml:para>Specifies a verb to use when this cmdlet starts the process. The verbs that are available are
determined by the filename extension of the file that runs in the process.</maml:para>
          <maml:para>The following table shows the verbs for some common process file types.</maml:para>
          <maml:para>| File type |                     Verbs                     |
| --------- | --------------------------------------------- |
| .cmd      | `Edit`, `Open`, `Print`, `RunAs`, `RunAsUser` |
| .exe      | `Open`, `RunAs`, `RunAsUser`                  |
| .txt      | `Open`, `Print`, `PrintTo`                    |
| .wav      | `Open`, `Play`                                |</maml:para>
          <maml:para>To find the verbs that can be used with the file that runs in a process, use the `New-Object` cmdlet
to create a **System.Diagnostics.ProcessStartInfo** object for the file. The available verbs are in
the **Verbs** property of the **ProcessStartInfo** object. For details, see the examples.</maml:para>
          <maml:para>The parameter doesn't apply to non-Windows systems.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Wait</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet waits for the specified process and its descendants to complete before
accepting more input. This parameter suppresses the command prompt or retains the window until the
processes finish.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WindowStyle</maml:name>
        <maml:description>
          <maml:para>Specifies the state of the window that's used for the new process. The default value is `Normal`.
The acceptable values for this parameter are:</maml:para>
          <maml:para>- `Normal`
- `Hidden`
- `Minimized`
- `Maximized`</maml:para>
          <maml:para>You can't use the **WindowStyle** and **NoNewWindow** parameters in the same command.</maml:para>
          <maml:para>The parameter doesn't apply to non-Windows systems. When using on non-Windows systems, you never
get a new window.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Diagnostics.ProcessWindowStyle</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WorkingDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the location that the new process should start in.</maml:para>
          <maml:para>When not specified, the cmdlet defaults to the fully-qualified location specified in the
**FilePath** parameter. If the value of the **FilePath** parameter is not fully-qualified, it
defaults to the current working directory of the calling process.</maml:para>
          <maml:para>Wildcards aren't supported. The path must not contain characters that would be interpreted as
wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **Process** object.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Start-Process`:

- All platforms
  - `saps`
- Windows
  - `start`

Native commands are executable files installed in the operating system. These executables can be run
from any command-line shell, like PowerShell. Usually you run the command exactly as you would in
`bash` or `cmd.exe`. The `Start-Process` cmdlet can be used to run any native commands, but should
only be used when you need to control how the command is executed.

`Start-Process` is useful for running GUI programs on non-Windows platforms. For example, run
`Start-Process gedit` to launch the graphical text editor common the GNOME Desktop environments.

By default, `Start-Process` launches a process _asynchronously_. Control is instantly returned to
PowerShell even if the new process is still running.

- On the local system, the launched process lives on independent from the calling process.
- On a remote system, the new process is terminated when the remote session ends, immediately
  following the `Start-Process` command. Therefore, you can't use `Start-Process` in a remote
  session expecting the launched process to outlive the session.

If you do need to use `Start-Process` in a remote session, invoke it with the **Wait** parameter. Or
you could use other methods to create a new process on the remote system.

When using the **Wait** parameter, `Start-Process` waits for the process tree (the process and all
its descendants) to exit before returning control. This is different than the behavior of the
`Wait-Process` cmdlet, which only waits for the specified processes to exit.

On Windows, the most common use case for `Start-Process` is to use the **Wait** parameter to block
progress until the new process exits. On non-Windows system, this is rarely needed since the default
behavior for command-line applications is equivalent to `Start-Process -Wait`.

This cmdlet is implemented using the **Start** method of the **System.Diagnostics.Process**
class. For more information about this method, see
[Process.Start Method](/dotnet/api/system.diagnostics.process.start#overloads).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Start a process that uses default values ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts a process that uses the `Sort.exe` file in the current folder. The command uses
all the default values, including the default window style, working folder, and credentials.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Process -FilePath "sort.exe"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Print a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts a process that prints the `C:\PS-Test\MyFile.txt` file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Process -FilePath "myfile.txt" -WorkingDirectory "C:\PS-Test" -Verb Print
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Start a process to sort items to a new file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts a process that sorts items in the `TestSort.txt` file and returns the sorted
items in the `Sorted.txt` files. Any errors are written to the `SortError.txt` file. The
**UseNewEnvironment** parameter specifies that the process runs with its own environment variables.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$processOptions = @{
    FilePath = "sort.exe"
    RedirectStandardInput = "TestSort.txt"
    RedirectStandardOutput = "Sorted.txt"
    RedirectStandardError = "SortError.txt"
    UseNewEnvironment = $true
}
Start-Process @processOptions
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example uses splatting to pass parameters to the cmdlet. For more information, see
[about_Splatting](../microsoft.powershell.core/about/about_splatting.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Start a process in a maximized window ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts the `Notepad.exe` process. It maximizes the window and retains the window until
the process completes.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Process -FilePath "notepad" -Wait -WindowStyle Maximized
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Start PowerShell as an administrator ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts PowerShell using the **Run as administrator** option.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Process -FilePath "powershell" -Verb RunAs
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Using different verbs to start a process ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to find the verbs that can be used when starting a process. The available
verbs are determined by the filename extension of the file that runs in the process.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$startExe = New-Object System.Diagnostics.ProcessStartInfo -Args powershell.exe
$startExe.Verbs
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
open
runas
runasuser
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The example uses `New-Object` to create a **System.Diagnostics.ProcessStartInfo** object for
`powershell.exe`, the file that runs in the PowerShell process. The **Verbs** property of the
**ProcessStartInfo** object shows that you can use the **Open** and `RunAs` verbs with
`powershell.exe`, or with any process that runs a `.exe` file.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Specifying arguments to the process ---------</maml:title>
        <maml:introduction>
          <maml:para>Both commands start the Windows command interpreter, issuing a `dir` command on the `Program Files`
folder. Because this foldername contains a space, the value needs surrounded with escaped quotes.
Note that the first command specifies a string as **ArgumentList**. The second command is a string
array.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Process -FilePath "$Env:ComSpec" -ArgumentList "/c dir `"%SystemDrive%\Program Files`""
Start-Process -FilePath "$Env:ComSpec" -ArgumentList "/c","dir","`"%SystemDrive%\Program Files`""
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Create a detached process on Linux ---------</maml:title>
        <maml:introduction>
          <maml:para>On Windows, `Start-Process` creates an independent process that remains running independently of the
launching shell. On non-Windows platforms, the newly started process is attached to the shell that
launched. If the launching shell is closed, the child process is terminated.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>To avoid terminating the child process on Unix-like platforms, you can combine `Start-Process` with
`nohup`. The following example launches a background instance of PowerShell on Linux that stays
alive even after you close the launching session. The `nohup` command collects output in file
`nohup.out` in the current directory.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Runs for 2 minutes and appends output to ./nohup.out
Start-Process nohup 'pwsh -NoProfile -c "1..120 | % { Write-Host . -NoNewline; sleep 1 }"'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, `Start-Process` is running the Linux `nohup` command, which launches `pwsh` as a
detached process. For more information, see the [nohup](https://wikipedia.org/wiki/Nohup) article on
Wikipedia.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Overriding an environment variable for a process ---------</maml:title>
        <maml:introduction>
          <maml:para>By default, when you use `Start-Process`, the new process is created with the same environment
variables as the current session. You can use the **Environment** parameter to override the values
of those variables.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this example, the environment variable `FOO` is added to the session with `foo` as the value.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The example runs `Start-Process` three times, returning the value of `FOO` each time. The first
command doesn't override the environment variable. In the second command, `FOO` is set to `bar`. In
the third command, `FOO` is set to `$null`, which removes it.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$Env:FOO = 'foo'
Start-Process pwsh -NoNewWindow -ArgumentList '-c', '$Env:FOO'
Start-Process pwsh -NoNewWindow -ArgumentList '-c', '$Env:FOO' -Environment @{
    FOO  = 'bar'
}
Start-Process pwsh -NoNewWindow -ArgumentList '-c', '$Env:FOO' -Environment @{
    FOO  = $null
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
foo
bar</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/start-process?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Quoting_Rules</maml:linkText>
        <command:uri>../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Debug-Process</maml:linkText>
        <command:uri>Debug-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Process</maml:linkText>
        <command:uri>Stop-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Wait-Process</maml:linkText>
        <command:uri>Wait-Process.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Start-Service</command:name>
      <maml:description>
        <maml:para>Starts one or more stopped services.</maml:para>
      </maml:description>
      <command:verb>Start</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Start-Service` cmdlet sends a start message to the Windows Service Controller for each of the specified services. If a service is already running, the message is ignored without error. You can specify the services by their service names or display names, or you can use the **InputObject** parameter to supply a service object that represents the services that you want to start.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Start-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet starts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects representing the services to be started. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Start-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet starts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names for the service to be started.</maml:para>
            <maml:para>The parameter name is optional. You can use **Name** or its alias, **ServiceName**, or you can omit
the parameter name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Start-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies the display names of the services to start. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet starts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies the display names of the services to start. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet starts. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as `s*`. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects representing the services to be started. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names for the service to be started.</maml:para>
          <maml:para>The parameter name is optional. You can use **Name** or its alias, **ServiceName**, or you can omit
the parameter name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains the service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object
representing the service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Start-Service`:

- Windows:
  - `sasv`

This cmdlet is only available on Windows platforms.

- By default, only members of the Administrators group can start, stop, pause, resume, or restart a
  service. If you are a member of the Administrators group, you need to run `Start-Service` from an
  elevated PowerShell session. Use the **Run as Administrator** option to start PowerShell.
- To find the service names and display names of the services on your system, type `Get-Service`.
  The service names appear in the **Name** column, and the display names appear in the
  **DisplayName** column.
- You can start only the services that have a start type of Manual, Automatic, or Automatic (Delayed
  Start). You cannot start the services that have a start type of Disabled. If a `Start-Service`
  command fails with the message `Cannot start service \&lt;service-name\&gt; on computer`, use
  `Get-CimInstance` to find the start type of the service and, if you have to, use the `Set-Service`
  cmdlet to change the start type of the service.
- Some services, such as Performance Logs and Alerts (SysmonLog) stop automatically if they have no
  work to do. When PowerShell starts a service that stops itself almost immediately, it displays the
  following message: `Service \&lt;display-name\&gt; start failed.`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Start a service by using its name ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts the EventLog service on the local computer. The **Name** parameter identifies
the service by its service name.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Service -Name "eventlog"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display information without starting a service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows what would occur if you started the services that have a display name that
includes "remote".</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Start-Service -DisplayName *remote* -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **DisplayName** parameter identifies the services by their display name instead of their service
name. The **WhatIf** parameter causes the cmdlet to display what would happen when you run the
command but does not make changes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Start a service and record the action in a text file ---------</maml:title>
        <maml:introduction>
          <maml:para>This example starts the Windows Management Instrumentation (WMI) service on the computer and adds a
record of the action to the services.txt file.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$s = Get-Service wmi
Start-Service -InputObject $s -PassThru | Format-List &gt;&gt; services.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>First we use `Get-Service` to get an object that represent the WMI service and store it in the `$s`
variable. Next, we start the service. Without the **PassThru** parameter, `Start-Service` does not
create any output. The pipeline operator (`|`) passes the object output by `Start-Service` to the
`Format-List` cmdlet to format the object as a list of its properties. The append redirection
operator (`&gt;&gt;`) redirects the output to the services.txt file. The output is added to the end of the
existing file.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Start a disabled service ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to start a service when the start type of the service is **Disabled**.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
PS&gt; Start-Service tlntsvr
Start-Service : Service 'Telnet (TlntSvr)' cannot be started due to the following error: Cannot
start service TlntSvr on computer '.'.
At line:1 char:14
+ Start-Service  &lt;&lt;&lt;&lt; tlntsvr</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Get-CimInstance Win32_Service | Where-Object Name -EQ "tlntsvr"
ExitCode  : 0
Name      : TlntSvr
ProcessId : 0
StartMode : Disabled
State     : Stopped
Status    : OK</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>PS&gt; Set-Service tlntsvr -StartupType manual
PS&gt; Start-Service tlntsvr
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first attempt to start the Telnet service (tlntsvr) fails. The `Get-CimInstance` command shows
that the **StartMode** property of the Tlntsvr service is **Disabled**. The `Set-Service` cmdlet
changes the start type to **Manual**. Now, we can resubmit the `Start-Service` command. This time,
the command succeeds. To verify that the command succeeded, run `Get-Service`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/start-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Stop-Computer</command:name>
      <maml:description>
        <maml:para>Stops (shuts down) local and remote computers.</maml:para>
      </maml:description>
      <command:verb>Stop</command:verb>
      <command:noun>Computer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Stop-Computer` cmdlet shuts down the local computer and remote computers.</maml:para>
      <maml:para>You can use the parameters of `Stop-Computer` to specify the authentication levels and alternate credentials, and to force an immediate shut down.</maml:para>
      <maml:para>In PowerShell 7.1, `Stop-Computer` was added for Linux and macOS. The non-Windows platforms only have the **WhatIf**, **Confirm**, and **CommonParameters** parameters. The cmdlet is just calling the native command `/sbin/shutdown`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Stop-Computer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the computers to stop. The default is the local computer.</maml:para>
            <maml:para>Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a
comma-separated list. To specify the local computer, type the computer name or localhost.</maml:para>
            <maml:para>This parameter doesn't rely on PowerShell remoting. You can use the **ComputerName** parameter even
if your computer isn't configured to run remote commands.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
            <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
            <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces an immediate shut down of the computer.</maml:para>
            <maml:para>This parameter is only available on Windows platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WsmanAuthentication</maml:name>
          <maml:description>
            <maml:para>Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the
WSMan protocol. The default value is **Default**.</maml:para>
            <maml:para>The acceptable values for this parameter are:</maml:para>
            <maml:para>- Basic
- CredSSP
- Default
- Digest
- Kerberos
- Negotiate.</maml:para>
            <maml:para>For more information about the values of this parameter, see
[AuthenticationMechanism](/dotnet/api/system.management.automation.runspaces.authenticationmechanism).</maml:para>
            <maml:para>&gt; [!CAUTION]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user credentials are
&gt; passed to a remote computer to be authenticated, is designed for commands that require
&gt; authentication on more than one resource, such as accessing a remote network share. This mechanism
&gt; increases the security risk of the remote operation. If the remote computer is compromised, the
&gt; credentials that are passed to it can be used to control the network session.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Specifies the computers to stop. The default is the local computer.</maml:para>
          <maml:para>Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a
comma-separated list. To specify the local computer, type the computer name or localhost.</maml:para>
          <maml:para>This parameter doesn't rely on PowerShell remoting. You can use the **ComputerName** parameter even
if your computer isn't configured to run remote commands.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to do this action. The default is the current user.</maml:para>
          <maml:para>Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
password.</maml:para>
          <maml:para>Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; For more information about **SecureString** data protection, see
&gt; [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces an immediate shut down of the computer.</maml:para>
          <maml:para>This parameter is only available on Windows platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WsmanAuthentication</maml:name>
        <maml:description>
          <maml:para>Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the
WSMan protocol. The default value is **Default**.</maml:para>
          <maml:para>The acceptable values for this parameter are:</maml:para>
          <maml:para>- Basic
- CredSSP
- Default
- Digest
- Kerberos
- Negotiate.</maml:para>
          <maml:para>For more information about the values of this parameter, see
[AuthenticationMechanism](/dotnet/api/system.management.automation.runspaces.authenticationmechanism).</maml:para>
          <maml:para>&gt; [!CAUTION]
&gt; Credential Security Service Provider (CredSSP) authentication, in which the user credentials are
&gt; passed to a remote computer to be authenticated, is designed for commands that require
&gt; authentication on more than one resource, such as accessing a remote network share. This mechanism
&gt; increases the security risk of the remote operation. If the remote computer is compromised, the
&gt; credentials that are passed to it can be used to control the network session.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 3.0. This parameter is only available on Windows
platforms.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet uses the
[Win32Shutdown](/windows/desktop/CIMWin32Prov/win32shutdown-method-in-class-win32-operatingsystem)
method of the [Win32_OperatingSystem](/windows/desktop/CIMWin32Prov/win32-operatingsystem) WMI
class. This method requires the `SeShutdownPrivilege` privilege be enabled for the user account
used to shutdown the machine.

In PowerShell 7.1, `Stop-Computer` was added for Linux and macOS. For these platforms, the cmdlet
calls the native command `/sbin/shutdown`.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Shut down the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shuts down the local computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Stop-Computer -ComputerName localhost
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Shut down two remote computers and the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example stops two remote computers and the local computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Stop-Computer -ComputerName "Server01", "Server02", "localhost"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Stop-Computer` uses the **ComputerName** parameter to specify two remote computers and the local
computer. Each computer is shut down.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Shut down remote computers as a background job ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, `Stop-Computer` runs as a background job on two remote computers.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The background operator `&amp;` runs the `Stop-Computer` command as a background job. For more
information, see
[about_Operators](../microsoft.powershell.core/about/about_operators.md#background-operator-).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$j = Stop-Computer -ComputerName "Server01", "Server02" &amp;
$results = $j | Receive-Job
$results
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Stop-Computer` uses the **ComputerName** parameter to specify two remote computers. The `&amp;`
background operator runs the command as a background job. The job objects are stored in the `$j`
variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The job objects in the `$j` variable are sent down the pipeline to `Receive-Job`, which gets the job
results. The objects are stored in the `$results` variable. The `$results` variable displays the job
information in the PowerShell console.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Shut down a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shuts down a remote computer using specified authentication.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Stop-Computer -ComputerName "Server01" -WsmanAuthentication Kerberos
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Stop-Computer` uses the **ComputerName** parameter to specify the remote computer. The
**WsmanAuthentication** parameter specifies to use Kerberos to establish a remote connection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Shut down computers in a domain ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, the commands force an immediate shut down of all computers in a specified domain.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$s = Get-Content -Path ./Domain01.txt
$c = Get-Credential -Credential Domain01\Admin01
Stop-Computer -ComputerName $s -Force -Credential $c
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Content` uses the **Path** parameter to get a file in the current directory with the list of
domain computers. The objects are stored in the `$s` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Get-Credential` uses the **Credential** parameter to specify the credentials of a domain
administrator. The credentials are stored in the `$c` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Stop-Computer` shuts down the computers specified with the **ComputerName** parameter's list of
computers in the `$s` variable. The **Force** parameter forces an immediate shutdown. The
**Credential** parameter submits the credentials saved in the `$c` variable.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/stop-computer?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Rename-Computer</maml:linkText>
        <command:uri>Rename-Computer.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Computer</maml:linkText>
        <command:uri>Restart-Computer.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Connection</maml:linkText>
        <command:uri>Test-Connection.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Stop-Process</command:name>
      <maml:description>
        <maml:para>Stops one or more running processes.</maml:para>
      </maml:description>
      <command:verb>Stop</command:verb>
      <command:noun>Process</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Stop-Process` cmdlet stops one or more running processes. You can specify a process by process name or process ID (PID), or pass a process object to `Stop-Process`. `Stop-Process` works only on processes running on the local computer.</maml:para>
      <maml:para>On Windows Vista and later versions of the Windows operating system, to stop a process that is not owned by the current user, you must start PowerShell by using the Run as administrator option. Also, you are not prompted for confirmation unless you specify the **Confirm** parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Stop-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Stops the specified processes without prompting for confirmation. By default, `Stop-Process` prompts
for confirmation before stopping any process that is not owned by the current user.</maml:para>
            <maml:para>To find the owner of a process, use the `Get-CimInstance` cmdlet to get a **Win32_Process** object
that represents the process, and then use the **GetOwner** method of the object.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies the process IDs of the processes to stop. To specify multiple IDs, use commas to separate
the IDs. To find the PID of a process, type `Get-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the process. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Stop-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Stops the specified processes without prompting for confirmation. By default, `Stop-Process` prompts
for confirmation before stopping any process that is not owned by the current user.</maml:para>
            <maml:para>To find the owner of a process, use the `Get-CimInstance` cmdlet to get a **Win32_Process** object
that represents the process, and then use the **GetOwner** method of the object.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the process names of the processes to stop. You can type multiple process names, separated
by commas, or use wildcard characters.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the process. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Stop-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Stops the specified processes without prompting for confirmation. By default, `Stop-Process` prompts
for confirmation before stopping any process that is not owned by the current user.</maml:para>
            <maml:para>To find the owner of a process, use the `Get-CimInstance` cmdlet to get a **Win32_Process** object
that represents the process, and then use the **GetOwner** method of the object.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the process objects to stop. Enter a variable that contains the objects, or type a command
or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the process. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Stops the specified processes without prompting for confirmation. By default, `Stop-Process` prompts
for confirmation before stopping any process that is not owned by the current user.</maml:para>
          <maml:para>To find the owner of a process, use the `Get-CimInstance` cmdlet to get a **Win32_Process** object
that represents the process, and then use the **GetOwner** method of the object.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies the process IDs of the processes to stop. To specify multiple IDs, use commas to separate
the IDs. To find the PID of a process, type `Get-Process`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the process objects to stop. Enter a variable that contains the objects, or type a command
or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the process names of the processes to stop. You can type multiple process names, separated
by commas, or use wildcard characters.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the process. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a process object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **Process** object representing the
stopped process.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Stop-Process`:

- All platforms:
  - `spps`
- Windows:
  - `kill`

You can also use the properties and methods of the Windows Management Instrumentation (WMI)
**Win32_Process** object in Windows PowerShell. For more information, see `Get-CimInstance` and
the WMI SDK.

- When stopping processes, realize that stopping a process can stop process and services that depend
  on the process. In an extreme case, stopping a process can stop Windows.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Stop all instances of a process ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Stop-Process -Name "notepad"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command stops all instances of the Notepad process on the computer. Each instance of Notepad
runs in its own process. It uses the **Name** parameter to specify the processes, all of which have
the same name. If you were to use the **Id** parameter to stop the same processes, you would have to
list the process IDs of each instance of Notepad.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Stop a specific instance of a process ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Stop-Process -Id 3952 -Confirm -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Confirm
Are you sure you want to perform this action?
Performing operation "Stop-Process" on Target "notepad (3952)".
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is "Y"):y
Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
41       2      996       3212    31            3952 notepad
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command stops a particular instance of the Notepad process. It uses the process ID, 3952, to
identify the process. The **Confirm** parameter directs PowerShell to prompt you before it stops the
process. Because the prompt includes the process name in addition to its ID, this is best practice.
The **PassThru** parameter passes the process object to the formatter for display. Without this
parameter, there would be no display after a `Stop-Process` command.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Stop a process and detect that it has stopped ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
calc
$p = Get-Process -Name "calc"
Stop-Process -InputObject $p
Get-Process | Where-Object {$_.HasExited}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This series of commands starts and stops the `Calc` process, and then detects processes that have
stopped.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command starts an instance of the calculator.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command uses `Get-Process` gets an object that represents the `Calc` process, and then
stores it in the `$p` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The third command stops the `Calc` process. It uses the **InputObject** parameter to pass the object
to `Stop-Process`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The last command gets all of the processes on the computer that were running but that are now
stopped. It uses `Get-Process` to get all of the processes on the computer. The pipeline operator
(`|`) passes the results to the `Where-Object` cmdlet, which selects the ones where the value of the
**HasExited** property is $true. **HasExited** is just one property of process objects. To find all
the properties, type `Get-Process | Get-Member`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Stop a process not owned by the current user ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS&gt; Get-Process -Name "lsass" | Stop-Process
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Stop-Process : Cannot stop process 'lsass (596)' because of the following error: Access is denied
At line:1 char:34
+ Get-Process -Name "lsass" | Stop-Process &lt;&lt;&lt;&lt;
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
[ADMIN]: PS&gt; Get-Process -Name "lsass" | Stop-Process
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Warning!
Are you sure you want to perform this action?
Performing operation 'Stop-Process' on Target 'lsass(596)'
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"):
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
[ADMIN]: PS&gt; Get-Process -Name "lsass" | Stop-Process -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands show the effect of using **Force** to stop a process that is not owned by the user.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command uses `Get-Process` to get the Lsass process. A pipeline operator sends the process
to `Stop-Process` to stop it. As shown in the sample output, the first command fails with an Access
denied message, because this process can be stopped only by a member of the Administrator group on
the computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>When PowerShell is opened by using the Run as administrator option, and the command is repeated,
PowerShell prompts you for confirmation.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command specifies **Force** to suppress the prompt. As a result, the process is stopped
without confirmation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/stop-process?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Debug-Process</maml:linkText>
        <command:uri>Debug-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Process</maml:linkText>
        <command:uri>Start-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Process</maml:linkText>
        <command:uri>Stop-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Wait-Process</maml:linkText>
        <command:uri>Wait-Process.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Stop-Service</command:name>
      <maml:description>
        <maml:para>Stops one or more running services.</maml:para>
      </maml:description>
      <command:verb>Stop</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Stop-Service` cmdlet sends a stop message to the Windows Service Controller for each of the specified services. You can specify the services by their service names or display names, or you can use the **InputObject** parameter to pass a service object that represents the service that you want to stop.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Stop-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to stop a service even if that service has dependent services.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet stops. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects that represent the services to stop. Enter a variable that
contains the objects, or type a command or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoWait</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet uses the no wait option.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Stop-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to stop a service even if that service has dependent services.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet stops. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of the services to stop. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoWait</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet uses the no wait option.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Stop-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies the display names of the services to stop.
Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to stop a service even if that service has dependent services.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services that this cmdlet stops. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoWait</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet uses the no wait option.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies the display names of the services to stop.
Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet omits. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to stop a service even if that service has dependent services.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies services that this cmdlet stops. The value of this parameter qualifies the **Name**
parameter. Enter a name element or pattern, such as s*. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects that represent the services to stop. Enter a variable that
contains the objects, or type a command or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of the services to stop. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoWait</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet uses the no wait option.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object that represents the service. By default, this cmdlet does not generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains the name of a service to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object
representing the service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>PowerShell includes the following aliases for `Stop-Service`:

- Windows:
  - `spsv`

This cmdlet is only available on Windows platforms.

`Stop-Service` can control services only when the current user has permission to do this. If a
command does not work correctly, you might not have the required permissions.

To find the service names and display names of the services on your system, type `Get-Service`. The
service names appear in the **Name** column and the display names appear in the **DisplayName**
column.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Stop a service on the local computer ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Stop-Service -Name "sysmonlog"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command stops the Performance Logs and Alerts (SysmonLog) service on the local computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Stop a service by using the display name ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-Service -DisplayName "telnet" | Stop-Service
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command stops the Telnet service on the local computer. The command uses `Get-Service` to get
an object that represents the Telnet service. The pipeline operator (`|`) pipes the object to
`Stop-Service`, which stops the service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Stop a service that has dependent services ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-Service -Name "iisadmin" | Format-List -Property Name, DependentServices
PS C:\&gt; Stop-Service -Name "iisadmin" -Force -Confirm
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example stops the IISAdmin service on the local computer. Because stopping this service also
stops the services that depend on the IISAdmin service, it is best to precede `Stop-Service` with a
command that lists the services that depend on the IISAdmin service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command lists the services that depend on IISAdmin. It uses `Get-Service` to get an object
that represents the IISAdmin service. The pipeline operator (`|`) passes the result to the
`Format-List` cmdlet. The command uses the **Property** parameter of `Format-List` to list only the
**Name** and **DependentServices** properties of the service.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The second command stops the IISAdmin service. The **Force** parameter is required to stop a service
that has dependent services. The command uses the **Confirm** parameter to request confirmation from
the user before it stops each service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/stop-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Suspend-Service</maml:linkText>
        <command:uri>Suspend-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Suspend-Service</command:name>
      <maml:description>
        <maml:para>Suspends (pauses) one or more running services.</maml:para>
      </maml:description>
      <command:verb>Suspend</command:verb>
      <command:noun>Service</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet is only available on the Windows platform.**</maml:para>
      <maml:para>The `Suspend-Service` cmdlet sends a suspend message to the Windows Service Controller for each of the specified services. While suspended, the service is still running, but its action is stopped until resumed, such as by using the `Resume-Service` cmdlet. You can specify the services by their service names or display names, or you can use the **InputObject** parameter to pass a service object that represents the services that you want to suspend.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Suspend-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services to omit from the specified services. The value of this parameter qualifies the
**Name** parameter. Enter a name element or pattern, such as "s*". Wildcard characters are
permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to suspend. The value of this parameter qualifies the **Name** parameter. Enter a
name element or pattern, such as "s*". Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies **ServiceController** objects that represent the services to suspend. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Suspend-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services to omit from the specified services. The value of this parameter qualifies the
**Name** parameter. Enter a name element or pattern, such as "s*". Wildcard characters are
permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to suspend. The value of this parameter qualifies the **Name** parameter. Enter a
name element or pattern, such as "s*". Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the service names of the services to suspend. Wildcard characters are permitted.</maml:para>
            <maml:para>The parameter name is optional. You can use **Name** or its alias, **ServiceName**, or you can omit
the parameter name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Suspend-Service</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DisplayName</maml:name>
          <maml:description>
            <maml:para>Specifies the display names of the services to be suspended. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies services to omit from the specified services. The value of this parameter qualifies the
**Name** parameter. Enter a name element or pattern, such as "s*". Wildcard characters are
permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies services to suspend. The value of this parameter qualifies the **Name** parameter. Enter a
name element or pattern, such as "s*". Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DisplayName</maml:name>
        <maml:description>
          <maml:para>Specifies the display names of the services to be suspended. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies services to omit from the specified services. The value of this parameter qualifies the
**Name** parameter. Enter a name element or pattern, such as "s*". Wildcard characters are
permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies services to suspend. The value of this parameter qualifies the **Name** parameter. Enter a
name element or pattern, such as "s*". Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies **ServiceController** objects that represent the services to suspend. Enter a variable
that contains the objects, or type a command or expression that gets the objects.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.ServiceProcess.ServiceController[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the service names of the services to suspend. Wildcard characters are permitted.</maml:para>
          <maml:para>The parameter name is optional. You can use **Name** or its alias, **ServiceName**, or you can omit
the parameter name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns an object representing the item with which you are working. By default, this cmdlet does not
generate any output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a service object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a service name to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.ServiceProcess.ServiceController</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **PassThru** parameter, this cmdlet returns a **ServiceController** object
representing the service.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This cmdlet is only available on Windows platforms.

- `Suspend-Service` can control services only when the current user has permission to do this. If a
  command does not work correctly, you might not have the required permissions.
- `Suspend-Service` can suspend only services that support being suspended and resumed. To determine
  whether a particular service can be suspended, use the `Get-Service` cmdlet together with the
  **CanPauseAndContinue** property. For example,
  `Get-Service wmi | Format-List Name, CanPauseAndContinue`. To find all services on the computer
  that can be suspended, type `Get-Service | Where-Object {$_.CanPauseAndContinue -eq $true}`.
- To find the service names and display names of the services on your system, type `Get-Service`.
  The service names appear in the **Name** column, and the display names appear in the
  **DisplayName** column.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Suspend a service ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Suspend-Service -DisplayName "Telnet"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command suspends the Telnet service (Tlntsvr) service on the local computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Display what would happen if you suspend services ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Suspend-Service -Name lanman* -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command tells what would happen if you suspended the services that have a service name that
starts with lanman. To suspend the services, rerun the command without the **WhatIf** parameter.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get and suspend a service ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Service schedule | Suspend-Service
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command uses the `Get-Service` cmdlet to get an object that represents the Task Scheduler
(Schedule) service on the computer. The pipeline operator (`|`) passes the result to
`Suspend-Service`, which suspends the service.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Suspend all services that can be suspended ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-Service |
    Where-Object {$_.CanPauseAndContinue -eq "True"} |
    Suspend-Service -Confirm
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command suspends all of the services on the computer that can be suspended. It uses
`Get-Service` to get objects that represent the services on the computer. The pipeline operator
passes the results to the `Where-Object` cmdlet, which selects only the services that have a value
of `$true` for the **CanPauseAndContinue** property. Another pipeline operator passes the results to
`Suspend-Service`. The **Confirm** parameter prompts you for confirmation before suspending each of
the services.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/suspend-service?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Service</maml:linkText>
        <command:uri>Get-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-Service</maml:linkText>
        <command:uri>New-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Service</maml:linkText>
        <command:uri>Restart-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resume-Service</maml:linkText>
        <command:uri>Resume-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-Service</maml:linkText>
        <command:uri>Set-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Service</maml:linkText>
        <command:uri>Start-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Service</maml:linkText>
        <command:uri>Stop-Service.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-Service</maml:linkText>
        <command:uri>Remove-Service.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Test-Connection</command:name>
      <maml:description>
        <maml:para>Sends ICMP echo request packets, or pings, to one or more computers.</maml:para>
      </maml:description>
      <command:verb>Test</command:verb>
      <command:noun>Connection</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Test-Connection` cmdlet sends Internet Control Message Protocol (ICMP) echo request packets, or pings, to one or more remote computers and returns the echo response replies. You can use this cmdlet to determine whether a particular computer can be contacted across an IP network.</maml:para>
      <maml:para>You can use the parameters of `Test-Connection` to specify both the sending and receiving computers, to run the command as a background job, to set a time-out and number of pings, and to configure the connection and authentication.</maml:para>
      <maml:para>Unlike the familiar **ping** command, `Test-Connection` returns a **TestConnectionCommand+PingStatus** object that you can investigate in PowerShell. The **Quiet** parameter returns a **Boolean** value in a **System.Boolean** object for each tested connection. If multiple connections are tested, an array of **Boolean** values is returned.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-Connection</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>BufferSize</maml:name>
          <maml:description>
            <maml:para>Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Count</maml:name>
          <maml:description>
            <maml:para>Specifies the number of echo requests to send. The default value is 4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delay</maml:name>
          <maml:description>
            <maml:para>Specifies the interval between pings, in seconds.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DontFragment</maml:name>
          <maml:description>
            <maml:para>This parameter sets the **Don't Fragment** flag in the IP header. You can use this parameter with
the **BufferSize** parameter to test the Path MTU size. For more information about Path MTU, see the
[Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv4</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv6</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>MaxHops</maml:name>
          <maml:description>
            <maml:para>Sets the maximum number of hops that an ICMP request message can be sent. The default value is
controlled by the operating system. The default value for Windows 10 and higher is 128 hops.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Ping</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to do a ping test. This is the default mode for the `Test-Connection` cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
            <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
            <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
            <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ResolveDestination</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the computers where the ping originates. Enter a comma-separated list of
computer names. The default is the local computer.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported in PowerShell versions 6 and up. Supplying this parameter
&gt; causes an error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>TargetName</maml:name>
          <maml:description>
            <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TimeoutSeconds</maml:name>
          <maml:description>
            <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Connection</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>BufferSize</maml:name>
          <maml:description>
            <maml:para>Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delay</maml:name>
          <maml:description>
            <maml:para>Specifies the interval between pings, in seconds.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DontFragment</maml:name>
          <maml:description>
            <maml:para>This parameter sets the **Don't Fragment** flag in the IP header. You can use this parameter with
the **BufferSize** parameter to test the Path MTU size. For more information about Path MTU, see the
[Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv4</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv6</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>MaxHops</maml:name>
          <maml:description>
            <maml:para>Sets the maximum number of hops that an ICMP request message can be sent. The default value is
controlled by the operating system. The default value for Windows 10 and higher is 128 hops.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Ping</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to do a ping test. This is the default mode for the `Test-Connection` cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
            <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
            <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
            <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Repeat</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to send ping requests continuously. When the value of **TargetName** is an array
of targets, the cmdlet repeats the ping requests for the first target only. It ignores the
remaining targets. This parameter can't be used with the **Count** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ResolveDestination</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the computers where the ping originates. Enter a comma-separated list of
computer names. The default is the local computer.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported in PowerShell versions 6 and up. Supplying this parameter
&gt; causes an error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>TargetName</maml:name>
          <maml:description>
            <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TimeoutSeconds</maml:name>
          <maml:description>
            <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Connection</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv4</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv6</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>MaxHops</maml:name>
          <maml:description>
            <maml:para>Sets the maximum number of hops that an ICMP request message can be sent. The default value is
controlled by the operating system. The default value for Windows 10 and higher is 128 hops.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
            <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
            <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
            <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ResolveDestination</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the computers where the ping originates. Enter a comma-separated list of
computer names. The default is the local computer.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported in PowerShell versions 6 and up. Supplying this parameter
&gt; causes an error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>TargetName</maml:name>
          <maml:description>
            <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TimeoutSeconds</maml:name>
          <maml:description>
            <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Traceroute</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to do a traceroute test. When this parameter is used, the cmdlet returns a
`TestConnectionCommand+TraceStatus` object.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Connection</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv4</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv6</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>MtuSize</maml:name>
          <maml:description>
            <maml:para>This parameter is used to discover the Path MTU size. The cmdlet returns a **PingReply#MTUSize**
object that contains the Path MTU size to the target. For more information about Path MTU, see the
[Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
            <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
            <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
            <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ResolveDestination</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>TargetName</maml:name>
          <maml:description>
            <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TimeoutSeconds</maml:name>
          <maml:description>
            <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Connection</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Count</maml:name>
          <maml:description>
            <maml:para>Specifies the number of echo requests to send. The default value is 4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Delay</maml:name>
          <maml:description>
            <maml:para>Specifies the interval between pings, in seconds.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>When you use the **Detailed** parameter, this cmdlet returns a detailed information about the status
of the TCP connection attempts.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv4</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IPv6</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
            <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
            <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
            <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Repeat</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to send ping requests continuously. When the value of **TargetName** is an array
of targets, the cmdlet repeats the ping requests for the first target only. It ignores the
remaining targets. This parameter can't be used with the **Count** parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ResolveDestination</maml:name>
          <maml:description>
            <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the names of the computers where the ping originates. Enter a comma-separated list of
computer names. The default is the local computer.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported in PowerShell versions 6 and up. Supplying this parameter
&gt; causes an error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>TargetName</maml:name>
          <maml:description>
            <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TcpPort</maml:name>
          <maml:description>
            <maml:para>Specifies the TCP port number on the target to be used in the TCP connection test.</maml:para>
            <maml:para>The cmdlet attempts to make a TCP connection to the specified port on the target.</maml:para>
            <maml:para>- The cmdlet returns `$true` if a connection is made.
- The cmdlet returns `$false` if a connection is not made.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>TimeoutSeconds</maml:name>
          <maml:description>
            <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>BufferSize</maml:name>
        <maml:description>
          <maml:para>Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Count</maml:name>
        <maml:description>
          <maml:para>Specifies the number of echo requests to send. The default value is 4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Delay</maml:name>
        <maml:description>
          <maml:para>Specifies the interval between pings, in seconds.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Detailed</maml:name>
        <maml:description>
          <maml:para>When you use the **Detailed** parameter, this cmdlet returns a detailed information about the status
of the TCP connection attempts.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DontFragment</maml:name>
        <maml:description>
          <maml:para>This parameter sets the **Don't Fragment** flag in the IP header. You can use this parameter with
the **BufferSize** parameter to test the Path MTU size. For more information about Path MTU, see the
[Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IPv4</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to use the IPv4 protocol for the test.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IPv6</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to use the IPv6 protocol for the test.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>MaxHops</maml:name>
        <maml:description>
          <maml:para>Sets the maximum number of hops that an ICMP request message can be sent. The default value is
controlled by the operating system. The default value for Windows 10 and higher is 128 hops.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>MtuSize</maml:name>
        <maml:description>
          <maml:para>This parameter is used to discover the Path MTU size. The cmdlet returns a **PingReply#MTUSize**
object that contains the Path MTU size to the target. For more information about Path MTU, see the
[Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Ping</maml:name>
        <maml:description>
          <maml:para>Causes the cmdlet to do a ping test. This is the default mode for the `Test-Connection` cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Quiet</maml:name>
        <maml:description>
          <maml:para>The **Quiet** parameter returns a **Boolean** value. Using this parameter suppresses all
errors.</maml:para>
          <maml:para>Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
specifies multiple computers, an array of **Boolean** values is returned.</maml:para>
          <maml:para>If **any** ping to a given target succeeds, `$true` is returned.</maml:para>
          <maml:para>If **all** pings to a given target fail, `$false` is returned.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Repeat</maml:name>
        <maml:description>
          <maml:para>Causes the cmdlet to send ping requests continuously. When the value of **TargetName** is an array
of targets, the cmdlet repeats the ping requests for the first target only. It ignores the
remaining targets. This parameter can't be used with the **Count** parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ResolveDestination</maml:name>
        <maml:description>
          <maml:para>Causes the cmdlet to attempt to resolve the DNS name of the target. When used in conjunction
with the **Traceroute** parameter, the DNS names of all intermediate hosts will also be
retrieved, if possible.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the names of the computers where the ping originates. Enter a comma-separated list of
computer names. The default is the local computer.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; This parameter is not supported in PowerShell versions 6 and up. Supplying this parameter
&gt; causes an error.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>TargetName</maml:name>
        <maml:description>
          <maml:para>Specifies the computer(s) to test. Type the computer names or type IP addresses in IPv4 or IPv6
format.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>TcpPort</maml:name>
        <maml:description>
          <maml:para>Specifies the TCP port number on the target to be used in the TCP connection test.</maml:para>
          <maml:para>The cmdlet attempts to make a TCP connection to the specified port on the target.</maml:para>
          <maml:para>- The cmdlet returns `$true` if a connection is made.
- The cmdlet returns `$false` if a connection is not made.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>TimeoutSeconds</maml:name>
        <maml:description>
          <maml:para>Sets the timeout value for the test. The test fails if a response isn't received before the timeout
expires. The default is five seconds.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 6.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Traceroute</maml:name>
        <maml:description>
          <maml:para>Causes the cmdlet to do a traceroute test. When this parameter is used, the cmdlet returns a
`TestConnectionCommand+TraceStatus` object.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can't pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.TestConnectionCommand+PingStatus</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns a **TestConnectionCommand+PingStatus** object for each
ping reply.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.TestConnectionCommand+TraceStatus</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **Traceroute** parameter, this cmdlet returns a
**TestConnectionCommand+TraceStatus** object for each ping reply along the route.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Boolean</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **Quiet** or **TcpPort** parameters, this cmdlet returns a **Boolean** value. If
the cmdlet tests multiple connections, it returns an array of **Boolean** values.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.TestConnectionCommand+PingMtuStatus</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **MtuSize** parameter, this cmdlet returns a
**TestConnectionCommand+PingMtuStatus** object for each ping reply.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.PowerShell.Commands.TestConnectionCommand+TcpPortStatus</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When you use the **Detailed** parameter, this cmdlet returns a
**TestConnectionCommand+TcpPortStatus** object that shows the status of the TCP connection.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>On Linux, using the **BufferSize** parameter or any combination of parameters with the **MtuSize**
parameter set that results in a non-default buffer size of 32 bytes may require `sudo`. In those
cases, `Test-Command` raises an exception with a message indicating that `sudo` is required.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Send echo requests to a remote computer ---------</maml:title>
        <maml:introduction>
          <maml:para>This example sends echo request packets from the local computer to the Server01 computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Connection -TargetName Server01 -IPv4
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   Destination: Server01</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Ping Source           Address                   Latency BufferSize Status
                                                   (ms)        (B)
---- ------           -------                   ------- ---------- ------
   1 ADMIN1           10.59.137.44                   24         32 Success
   2 ADMIN1           10.59.137.44                   39         32 Success
   3 ADMIN1           *                               *          * TimedOut
   4 ADMIN1           10.59.137.44                   28         32 Success
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Test-Connection` uses the **TargetName** parameter to specify the Server01 computer. The **IPv4**
parameter specifies the protocol for the test.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>A series of **TestConnectionCommand+PingStatus** objects are sent to the output stream, one
object per ping reply from the target machine.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Send echo requests to several computers ---------</maml:title>
        <maml:introduction>
          <maml:para>This example sends pings from the local computer to several remote computers.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Connection -TargetName Server01, Server02, Server12
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Use parameters to customize the test command ---------</maml:title>
        <maml:introduction>
          <maml:para>This example uses the parameters of `Test-Connection` to customize the command. The local computer
sends a ping test to a remote computer.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Connection -TargetName Server01 -Count 3 -Delay 2 -MaxHops 255 -BufferSize 256
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>`Test-Connection` uses the **TargetName** parameter to specify Server01. The **Count** parameter
specifies three pings are sent to the Server01 computer with a **Delay** of 2-second intervals.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>You might use these options when the ping response is expected to take longer than usual, either
because of an extended number of hops or a high-traffic network condition.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Run a test as a background job ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows how to run a `Test-Connection` command as a PowerShell background job.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$job = Start-Job -ScriptBlock { Test-Connection -TargetName (Get-Content -Path "Servers.txt") }
$Results = Receive-Job $job -Wait
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Start-Job` command uses the `Test-Connection` cmdlet to ping many computers in an enterprise.
The value of the **TargetName** parameter is a `Get-Content` command that reads a list of computer
names from the `Servers.txt` file. The command uses the `Start-Job` cmdlet to run the command as a
background job and it saves the job in the `$job` variable.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Receive-Job` command is instructed to `-Wait` until the job is completed, and then gets the
results and stores them in the `$Results` variable.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Create a session only if a connection test succeeds ---------</maml:title>
        <maml:introduction>
          <maml:para>This example creates a session on the Server01 computer only if at least one of the pings sent to
the computer succeeds.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
if (Test-Connection -TargetName Server01 -Quiet) { New-PSSession -ComputerName Server01 }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Test-Connection` cmdlet pings the `Server01` computer, with the **Quiet** parameter provided.
The resulting value is `$true` if any of the four pings succeed. If none of the pings succeed,
the value is `$false`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>If the `Test-Connection` command returns a value of `$true`, the command uses the `New-PSSession`
cmdlet to create the **PSSession**.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Use the Traceroute parameter ---------</maml:title>
        <maml:introduction>
          <maml:para>Introduced in PowerShell 6.0, the **Traceroute** parameter maps a route between the local computer
and the remote destination you specify with the **TargetName** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Connection -TargetName www.google.com -Traceroute
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   Target: google.com</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Hop Hostname                  Ping Latency Status           Source       TargetAddress
                                      (ms)
--- --------                  ---- ------- ------           ------       -------------
  1 172.20.0.1                   1       4 Success          Lira         172.217.9.174
  1 172.20.0.1                   2       3 Success          Lira         172.217.9.174
  1 172.20.0.1                   3       2 Success          Lira         172.217.9.174
  2 12.108.153.193               1       3 Success          Lira         172.217.9.174
  2 12.108.153.193               2       3 Success          Lira         172.217.9.174
  2 12.108.153.193               3       2 Success          Lira         172.217.9.174
  3 12.244.85.177                1      11 Success          Lira         172.217.9.174
  3 12.244.85.177                2      12 Success          Lira         172.217.9.174
  3 12.244.85.177                3      12 Success          Lira         172.217.9.174
  4 *                            1      14 DestinationNetw… Lira         172.217.9.174
  4 *                            2       * TimedOut         Lira         172.217.9.174
  4 *                            3      20 DestinationNetw… Lira         172.217.9.174
  5 *                            1       * TimedOut         Lira         172.217.9.174
  5 *                            2      15 DestinationNetw… Lira         172.217.9.174
  5 *                            3       * TimedOut         Lira         172.217.9.174
  6 *                            1      18 DestinationNetw… Lira         172.217.9.174
  6 *                            2       * TimedOut         Lira         172.217.9.174
  6 *                            3      16 DestinationNetw… Lira         172.217.9.174
  7 *                            1       * TimedOut         Lira         172.217.9.174
  7 *                            2       * TimedOut         Lira         172.217.9.174
  7 *                            3       * TimedOut         Lira         172.217.9.174
  8 *                            1       * TimedOut         Lira         172.217.9.174
  8 *                            2       * TimedOut         Lira         172.217.9.174
  8 *                            3       * TimedOut         Lira         172.217.9.174
  9 *                            1       * TimedOut         Lira         172.217.9.174
  9 *                            2       * TimedOut         Lira         172.217.9.174
  9 *                            3       * TimedOut         Lira         172.217.9.174
 10 *                            1       * TimedOut         Lira         172.217.9.174
 10 *                            2       * TimedOut         Lira         172.217.9.174
 10 *                            3       * TimedOut         Lira         172.217.9.174
 11 172.217.9.174                1      23 Success          Lira         172.217.9.174
 11 172.217.9.174                2      21 Success          Lira         172.217.9.174
 11 172.217.9.174                3      22 Success          Lira         172.217.9.174
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Test-Connection` command is called with the **Traceroute** parameter. The results, which are
`[Microsoft.PowerShell.Commands.TestConnectionCommand+TraceStatus]` objects, are output to
the **Success** output stream.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Get detailed output for a TCP connection test ---------</maml:title>
        <maml:introduction>
          <maml:para>When you use the **Detailed** parameter, this cmdlet returns a detailed information about the status
of the TCP connection attempts.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Connection bing.com -TCPPort 443 -Detailed -Count 4
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
   Target: bing.com</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Id Source     Address           Port Latency(ms) Connected Status
-- ------     -------           ---- ----------- --------- ------
 1 circumflex 2620:1ec:c11::200  443          12 True      Success
 2 circumflex 2620:1ec:c11::200  443          14 True      Success
 3 circumflex 2620:1ec:c11::200  443          17 True      Success
 4 circumflex 2620:1ec:c11::200  443          17 True      Success
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/test-connection?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Restart-Computer</maml:linkText>
        <command:uri>Restart-Computer.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Computer</maml:linkText>
        <command:uri>Stop-Computer.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Test-Path</command:name>
      <maml:description>
        <maml:para>Determines whether all elements of a path exist.</maml:para>
      </maml:description>
      <command:verb>Test</command:verb>
      <command:noun>Path</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Test-Path` cmdlet determines whether all elements of the path exist. It returns `$true` if all elements exist and `$false` if any are missing. It can also tell whether the path syntax is valid and whether the path leads to a container or a terminal or leaf element. If the **Path** is a whitespace or empty string, then the cmdlet returns `$false`. If the **Path** is `$null`, an array of `$null` or an empty array, the cmdlet returns a non-terminating error.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies items that this cmdlet omits. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the format or language of the provider. The value of this parameter qualifies
the **Path** parameter. The syntax of the filter, including the use of wildcard characters, depends
on the provider. Filters are more efficient than other parameters, because the provider applies
them when it retrieves the objects instead of having PowerShell filter the objects after they're
retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies paths that this cmdlet tests. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IsValid</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the
path exist. This cmdlet returns `$true` if the path syntax is valid and `$false` if it's not. If the
path being tested includes a drive specification, the cmdlet returns false when the drive does not
exist. PowerShell returns false because it doesn't know which drive provider to test.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; A breaking change in the Path APIs was introduced in .NET 2.1. Those methods no longer check for
&gt; invalid path characters. This change caused a regression in PowerShell where the **IsValid** check
&gt; no longer tests for invalid characters. The regression will be addressed in a future release. For
&gt; more information, see
&gt; [Breaking changes in .NET Core 2.1](/dotnet/core/compatibility/2.1#path-apis-dont-throw-an-exception-for-invalid-characters).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NewerThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- The **OlderThan** parameter when used with this parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **OlderThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OlderThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- This parameter when used with the **NewerThan** parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **NewerThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PathType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of the final element in the path. This cmdlet returns `$true` if the element is
of the specified type and `$false` if it's not. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `Container` - An element that contains other elements, such as a directory or registry key.
- `Leaf` - An element that doesn't contain other elements, such as a file.
- `Any` - Either a container or a leaf.</maml:para>
            <maml:para>Tells whether the final element in the path is of a particular type.</maml:para>
            <maml:para>&gt; [!CAUTION]
&gt;
&gt; Up to PowerShell version 6.1.2, when the **IsValid** and **PathType** switches are specified
&gt; together, the `Test-Path` cmdlet ignores the **PathType** switch and only validates the syntactic
&gt; path without validating the path type.
&gt;
&gt; According to [issue #8607](https://github.com/PowerShell/PowerShell/issues/8607), fixing this
&gt; behavior may be a breaking change in a future version, where the **IsValid** and **PathType**
&gt; switches belong to separate parameter sets, and thus, can't be used together avoiding this
&gt; confusion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.TestPathType</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies items that this cmdlet omits. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the format or language of the provider. The value of this parameter qualifies
the **Path** parameter. The syntax of the filter, including the use of wildcard characters, depends
on the provider. Filters are more efficient than other parameters, because the provider applies
them when it retrieves the objects instead of having PowerShell filter the objects after they're
retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies paths that this cmdlet tests. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IsValid</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the
path exist. This cmdlet returns `$true` if the path syntax is valid and `$false` if it's not. If the
path being tested includes a drive specification, the cmdlet returns false when the drive does not
exist. PowerShell returns false because it doesn't know which drive provider to test.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; A breaking change in the Path APIs was introduced in .NET 2.1. Those methods no longer check for
&gt; invalid path characters. This change caused a regression in PowerShell where the **IsValid** check
&gt; no longer tests for invalid characters. The regression will be addressed in a future release. For
&gt; more information, see
&gt; [Breaking changes in .NET Core 2.1](/dotnet/core/compatibility/2.1#path-apis-dont-throw-an-exception-for-invalid-characters).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NewerThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- The **OlderThan** parameter when used with this parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **OlderThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OlderThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- This parameter when used with the **NewerThan** parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **NewerThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PathType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of the final element in the path. This cmdlet returns `$true` if the element is
of the specified type and `$false` if it's not. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `Container` - An element that contains other elements, such as a directory or registry key.
- `Leaf` - An element that doesn't contain other elements, such as a file.
- `Any` - Either a container or a leaf.</maml:para>
            <maml:para>Tells whether the final element in the path is of a particular type.</maml:para>
            <maml:para>&gt; [!CAUTION]
&gt;
&gt; Up to PowerShell version 6.1.2, when the **IsValid** and **PathType** switches are specified
&gt; together, the `Test-Path` cmdlet ignores the **PathType** switch and only validates the syntactic
&gt; path without validating the path type.
&gt;
&gt; According to [issue #8607](https://github.com/PowerShell/PowerShell/issues/8607), fixing this
&gt; behavior may be a breaking change in a future version, where the **IsValid** and **PathType**
&gt; switches belong to separate parameter sets, and thus, can't be used together avoiding this
&gt; confusion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.TestPathType</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies items that this cmdlet omits. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the format or language of the provider. The value of this parameter qualifies
the **Path** parameter. The syntax of the filter, including the use of wildcard characters, depends
on the provider. Filters are more efficient than other parameters, because the provider applies
them when it retrieves the objects instead of having PowerShell filter the objects after they're
retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies paths that this cmdlet tests. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IsValid</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the
path exist. This cmdlet returns `$true` if the path syntax is valid and `$false` if it's not. If the
path being tested includes a drive specification, the cmdlet returns false when the drive does not
exist. PowerShell returns false because it doesn't know which drive provider to test.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; A breaking change in the Path APIs was introduced in .NET 2.1. Those methods no longer check for
&gt; invalid path characters. This change caused a regression in PowerShell where the **IsValid** check
&gt; no longer tests for invalid characters. The regression will be addressed in a future release. For
&gt; more information, see
&gt; [Breaking changes in .NET Core 2.1](/dotnet/core/compatibility/2.1#path-apis-dont-throw-an-exception-for-invalid-characters).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NewerThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- The **OlderThan** parameter when used with this parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **OlderThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OlderThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- This parameter when used with the **NewerThan** parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **NewerThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PathType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of the final element in the path. This cmdlet returns `$true` if the element is
of the specified type and `$false` if it's not. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `Container` - An element that contains other elements, such as a directory or registry key.
- `Leaf` - An element that doesn't contain other elements, such as a file.
- `Any` - Either a container or a leaf.</maml:para>
            <maml:para>Tells whether the final element in the path is of a particular type.</maml:para>
            <maml:para>&gt; [!CAUTION]
&gt;
&gt; Up to PowerShell version 6.1.2, when the **IsValid** and **PathType** switches are specified
&gt; together, the `Test-Path` cmdlet ignores the **PathType** switch and only validates the syntactic
&gt; path without validating the path type.
&gt;
&gt; According to [issue #8607](https://github.com/PowerShell/PowerShell/issues/8607), fixing this
&gt; behavior may be a breaking change in a future version, where the **IsValid** and **PathType**
&gt; switches belong to separate parameter sets, and thus, can't be used together avoiding this
&gt; confusion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.TestPathType</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-Path</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Exclude</maml:name>
          <maml:description>
            <maml:para>Specifies items that this cmdlet omits. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Filter</maml:name>
          <maml:description>
            <maml:para>Specifies a filter in the format or language of the provider. The value of this parameter qualifies
the **Path** parameter. The syntax of the filter, including the use of wildcard characters, depends
on the provider. Filters are more efficient than other parameters, because the provider applies
them when it retrieves the objects instead of having PowerShell filter the objects after they're
retrieved.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Include</maml:name>
          <maml:description>
            <maml:para>Specifies paths that this cmdlet tests. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IsValid</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the
path exist. This cmdlet returns `$true` if the path syntax is valid and `$false` if it's not. If the
path being tested includes a drive specification, the cmdlet returns false when the drive does not
exist. PowerShell returns false because it doesn't know which drive provider to test.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt; A breaking change in the Path APIs was introduced in .NET 2.1. Those methods no longer check for
&gt; invalid path characters. This change caused a regression in PowerShell where the **IsValid** check
&gt; no longer tests for invalid characters. The regression will be addressed in a future release. For
&gt; more information, see
&gt; [Breaking changes in .NET Core 2.1](/dotnet/core/compatibility/2.1#path-apis-dont-throw-an-exception-for-invalid-characters).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NewerThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- The **OlderThan** parameter when used with this parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **OlderThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>OlderThan</maml:name>
          <maml:description>
            <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
            <maml:para>Specify a time as a **DateTime** object.</maml:para>
            <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
            <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- This parameter when used with the **NewerThan** parameter.
- This parameter when **Path** points to a directory.</maml:para>
            <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **NewerThan** parameter, and to test the age of
directories.</maml:para>
            <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PathType</maml:name>
          <maml:description>
            <maml:para>Specifies the type of the final element in the path. This cmdlet returns `$true` if the element is
of the specified type and `$false` if it's not. The acceptable values for this parameter are:</maml:para>
            <maml:para>- `Container` - An element that contains other elements, such as a directory or registry key.
- `Leaf` - An element that doesn't contain other elements, such as a file.
- `Any` - Either a container or a leaf.</maml:para>
            <maml:para>Tells whether the final element in the path is of a particular type.</maml:para>
            <maml:para>&gt; [!CAUTION]
&gt;
&gt; Up to PowerShell version 6.1.2, when the **IsValid** and **PathType** switches are specified
&gt; together, the `Test-Path` cmdlet ignores the **PathType** switch and only validates the syntactic
&gt; path without validating the path type.
&gt;
&gt; According to [issue #8607](https://github.com/PowerShell/PowerShell/issues/8607), fixing this
&gt; behavior may be a breaking change in a future version, where the **IsValid** and **PathType**
&gt; switches belong to separate parameter sets, and thus, can't be used together avoiding this
&gt; confusion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.TestPathType</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>&gt; [!NOTE]
&gt; This parameter isn't supported by any providers installed with PowerShell. To impersonate another
&gt; user, or elevate your credentials when running this cmdlet, use
&gt; [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSCredential</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Exclude</maml:name>
        <maml:description>
          <maml:para>Specifies items that this cmdlet omits. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Filter</maml:name>
        <maml:description>
          <maml:para>Specifies a filter in the format or language of the provider. The value of this parameter qualifies
the **Path** parameter. The syntax of the filter, including the use of wildcard characters, depends
on the provider. Filters are more efficient than other parameters, because the provider applies
them when it retrieves the objects instead of having PowerShell filter the objects after they're
retrieved.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Include</maml:name>
        <maml:description>
          <maml:para>Specifies paths that this cmdlet tests. The value of this parameter qualifies the **Path**
parameter. Enter a path element or pattern, such as `*.txt`. Wildcard characters are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IsValid</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the
path exist. This cmdlet returns `$true` if the path syntax is valid and `$false` if it's not. If the
path being tested includes a drive specification, the cmdlet returns false when the drive does not
exist. PowerShell returns false because it doesn't know which drive provider to test.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt; A breaking change in the Path APIs was introduced in .NET 2.1. Those methods no longer check for
&gt; invalid path characters. This change caused a regression in PowerShell where the **IsValid** check
&gt; no longer tests for invalid characters. The regression will be addressed in a future release. For
&gt; more information, see
&gt; [Breaking changes in .NET Core 2.1](/dotnet/core/compatibility/2.1#path-apis-dont-throw-an-exception-for-invalid-characters).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>LiteralPath</maml:name>
        <maml:description>
          <maml:para>Specifies a path to be tested. Unlike **Path**, the value of the **LiteralPath** parameter is used
exactly as it's typed. No characters are interpreted as wildcard characters. If the path includes
characters that could be interpreted by PowerShell as escape sequences, you must enclose the path
in single quote so that they won't be interpreted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NewerThan</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
          <maml:para>Specify a time as a **DateTime** object.</maml:para>
          <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
          <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- The **OlderThan** parameter when used with this parameter.
- This parameter when **Path** points to a directory.</maml:para>
          <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **OlderThan** parameter, and to test the age of
directories.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>OlderThan</maml:name>
        <maml:description>
          <maml:para>This is a dynamic parameter made available by the **FileSystem** provider.</maml:para>
          <maml:para>Specify a time as a **DateTime** object.</maml:para>
          <maml:para>Before PowerShell 7.5, the cmdlet ignores:</maml:para>
          <maml:para>- This parameter when you specify **PathType** as any value other than `Any`.
- This parameter when used with the **NewerThan** parameter.
- This parameter when **Path** points to a directory.</maml:para>
          <maml:para>Starting with PowerShell 7.5, you can use this parameter with any value for the **PathType**
parameter, to test a date range with the **NewerThan** parameter, and to test the age of
directories.</maml:para>
          <maml:para>For more information, see
[about_FileSystem_Provider](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[[System.DateTime]]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies a path to be tested. Wildcard characters are permitted. If the path includes spaces,
enclose it in quotation marks.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PathType</maml:name>
        <maml:description>
          <maml:para>Specifies the type of the final element in the path. This cmdlet returns `$true` if the element is
of the specified type and `$false` if it's not. The acceptable values for this parameter are:</maml:para>
          <maml:para>- `Container` - An element that contains other elements, such as a directory or registry key.
- `Leaf` - An element that doesn't contain other elements, such as a file.
- `Any` - Either a container or a leaf.</maml:para>
          <maml:para>Tells whether the final element in the path is of a particular type.</maml:para>
          <maml:para>&gt; [!CAUTION]
&gt;
&gt; Up to PowerShell version 6.1.2, when the **IsValid** and **PathType** switches are specified
&gt; together, the `Test-Path` cmdlet ignores the **PathType** switch and only validates the syntactic
&gt; path without validating the path type.
&gt;
&gt; According to [issue #8607](https://github.com/PowerShell/PowerShell/issues/8607), fixing this
&gt; behavior may be a breaking change in a future version, where the **IsValid** and **PathType**
&gt; switches belong to separate parameter sets, and thus, can't be used together avoiding this
&gt; confusion.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">Microsoft.PowerShell.Commands.TestPathType</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a string that contains a path, but not a literal path, to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Boolean</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a **Boolean** value.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>The cmdlets that contain the **Path** noun (the **Path** cmdlets) work with path and return the
names in a concise format that all PowerShell providers can interpret. They're designed for use in
programs and scripts where you want to display all or part of a path in a particular format. Use
them as you would use **Dirname**, **Normpath**, **Realpath**, **Join**, or other path
manipulators.

The `Test-Path` is designed to work with the data exposed by any provider. To list the providers
available in your session, type `Get-PSProvider`. For more information, see
[about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Test a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Test-Path -Path "C:\Documents and Settings\DavidC"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
True
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command checks whether all elements in the path exist, including the `C:` directory, the
`Documents and Settings` directory, and the `DavidC` directory. If any are missing, the cmdlet
returns `$false`. Otherwise, it returns `$true`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Test the path of a profile ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Test-Path -Path $PROFILE
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path -Path $PROFILE -IsValid
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
True
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands test the path of the PowerShell profile.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command determines whether all elements in the path exist. The second command determines
whether the syntax of the path is correct. In this case, the path is `$false`, but the syntax is
correct `$true`. These commands use `$PROFILE`, the automatic variable that points to the location
for the profile, even if the profile doesn't exist.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>For more information about automatic variables, see
[about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Check whether there are any files besides a specified type ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Test-Path -Path "C:\CAD\Commercial Buildings\*" -Exclude *.dwg
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command checks whether there are any files in the Commercial Buildings directory other than
.dwg files.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command uses the **Path** parameter to specify the path. Because the path includes a space, the
path is enclosed in quotation marks. The asterisk at the end of the path indicates the contents of
the Commercial Building directory. With long paths, such as this one, type the first few letters of
the path, and then use the TAB key to complete the path.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command specifies the **Exclude** parameter to specify files to omit from the evaluation.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>In this case, because the directory contains only .dwg files, the result is `$false`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Check for a file ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Test-Path -Path $PROFILE -PathType Leaf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
True
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command checks whether the path stored in the `$PROFILE` variable leads to a file. In this
case, because the PowerShell profile is a `.ps1` file, the cmdlet returns `$true`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Check paths in the Registry ---------</maml:title>
        <maml:introduction>
          <maml:para>These commands use `Test-Path` with the PowerShell Registry provider.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The first command tests whether the registry path of the **Microsoft.PowerShell** registry key is
correct on the system. If PowerShell is installed correctly, the cmdlet returns `$true`.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>&gt; [!IMPORTANT]
&gt; `Test-Path` doesn't work correctly with all PowerShell providers. For example, you can use
&gt; `Test-Path` to test the path of a registry key, but if you use it to test the path of a registry
&gt; entry, it always returns `$false`, even if the registry entry is present.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path -Path "HKLM:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
True
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path -Path "HKLM:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell\ExecutionPolicy"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 6: Test if a file is in a date range ---------</maml:title>
        <maml:introduction>
          <maml:para>This command uses the **NewerThan** and **OlderThan** dynamic parameters to determine whether the
`pwsh.exe` file on the computer is newer than `July 13, 2009` and older than last week.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The **NewerThan** and **OlderThan** parameters only work in file system drives.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Get-Command pwsh |
    Select-Object -ExpandProperty Path |
    Test-Path -NewerThan "July 13, 2009" -OlderThan (Get-Date).AddDays(-7)
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
True
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 7: Test a path with null as the value ---------</maml:title>
        <maml:introduction>
          <maml:para>The error returned for `null`, array of `null` or empty array is a non-terminating error. It can be
suppress by using `-ErrorAction SilentlyContinue`. The following example shows all cases that
return the `NullPathNotPermitted` error.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path $null
Test-Path $null, $null
Test-Path @()
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
Test-Path : Cannot bind argument to parameter 'Path' because it is null.
At line:1 char:11
+ Test-Path $null
+           ~~~~~
    + CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.TestPathCommand
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 8: Test a path with whitespace as the value ---------</maml:title>
        <maml:introduction>
          <maml:para>When a whitespace string is provided for the **Path** parameter, it returns `$false`. This is a
change from Windows PowerShell 5.1. When an empty string is provided, `Test-Path` returns an error.
The following example shows whitespace and empty string.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path ' '
Test-Path ''
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
False
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 9: Test a path that may have an invalid drive ---------</maml:title>
        <maml:introduction>
          <maml:para>When you test a path that includes a drive specification, testing the validity of the path fails if
the drive doesn't exist. You can prefix the drive with the provider name to work around this
problem.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Test-Path -IsValid Z:\abc.txt
Test-Path -IsValid FileSystem::Z:\abc.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```Output
False
True
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/test-path?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Convert-Path</maml:linkText>
        <command:uri>Convert-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-Path</maml:linkText>
        <command:uri>Join-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Resolve-Path</maml:linkText>
        <command:uri>Resolve-Path.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-Path</maml:linkText>
        <command:uri>Split-Path.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Wait-Process</command:name>
      <maml:description>
        <maml:para>Waits for the processes to be stopped before accepting more input.</maml:para>
      </maml:description>
      <command:verb>Wait</command:verb>
      <command:noun>Process</command:noun>
    </command:details>
    <maml:description>
      <maml:para>&gt; **This cmdlet doesn't work on Linux or macOS.**</maml:para>
      <maml:para>The `Wait-Process` cmdlet waits for one or more running processes to be stopped before accepting input. In the PowerShell console, this cmdlet suppresses the command prompt until the processes are stopped. You can specify a process by process name or process ID (PID), or pipe a process object to `Wait-Process`.</maml:para>
      <maml:para>`Wait-Process` works only on processes running on the local computer.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Wait-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Any</maml:name>
          <maml:description>
            <maml:para>When multiple processes are passed into `Wait-Process`, the cmdlet waits for all processes to exit
before returning. With this parameter, the cmdlet returns when any of the processes exits. The
remaining processes continue to run.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the process names of the processes. To specify multiple names, use commas to separate the
names. Wildcard characters are not supported.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>By default, this cmdlet doesn't output anything. With this parameter, the cmdlet returns objects
representing the processes that were waited on.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Timeout</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop.
When this interval expires, the command displays a non-terminating error that lists the processes
that are still running, and ends the wait. By default, there is no time-out.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Wait-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Any</maml:name>
          <maml:description>
            <maml:para>When multiple processes are passed into `Wait-Process`, the cmdlet waits for all processes to exit
before returning. With this parameter, the cmdlet returns when any of the processes exits. The
remaining processes continue to run.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies the process IDs of the processes. To specify multiple IDs, use commas to separate the IDs.
To find the PID of a process, type `Get-Process`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>By default, this cmdlet doesn't output anything. With this parameter, the cmdlet returns objects
representing the processes that were waited on.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Timeout</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop.
When this interval expires, the command displays a non-terminating error that lists the processes
that are still running, and ends the wait. By default, there is no time-out.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Wait-Process</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Any</maml:name>
          <maml:description>
            <maml:para>When multiple processes are passed into `Wait-Process`, the cmdlet waits for all processes to exit
before returning. With this parameter, the cmdlet returns when any of the processes exits. The
remaining processes continue to run.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the processes by submitting process objects. Enter a variable that contains the process
objects, or type a command or expression that gets the process objects, such as the `Get-Process`
cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>By default, this cmdlet doesn't output anything. With this parameter, the cmdlet returns objects
representing the processes that were waited on.</maml:para>
            <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Timeout</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop.
When this interval expires, the command displays a non-terminating error that lists the processes
that are still running, and ends the wait. By default, there is no time-out.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Any</maml:name>
        <maml:description>
          <maml:para>When multiple processes are passed into `Wait-Process`, the cmdlet waits for all processes to exit
before returning. With this parameter, the cmdlet returns when any of the processes exits. The
remaining processes continue to run.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies the process IDs of the processes. To specify multiple IDs, use commas to separate the IDs.
To find the PID of a process, type `Get-Process`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Int32[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the processes by submitting process objects. Enter a variable that contains the process
objects, or type a command or expression that gets the process objects, such as the `Get-Process`
cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Diagnostics.Process[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the process names of the processes. To specify multiple names, use commas to separate the
names. Wildcard characters are not supported.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>By default, this cmdlet doesn't output anything. With this parameter, the cmdlet returns objects
representing the processes that were waited on.</maml:para>
          <maml:para>This parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Timeout</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop.
When this interval expires, the command displays a non-terminating error that lists the processes
that are still running, and ends the wait. By default, there is no time-out.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Int32</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe a process object to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet returns no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Diagnostics.Process</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns process objects when you use the **PassThru** parameter.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- This cmdlet uses the **WaitForExit** method of the **System.Diagnostics.Process** class.

- Unlike `Start-Process -Wait`, `Wait-Process` only waits for the processes identified.
  `Start-Process -Wait` waits for the process tree (the process and all its descendants) to exit
  before returning control.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Stop a process and wait ---------</maml:title>
        <maml:introduction>
          <maml:para>This example stops the **Notepad** process and then waits for the process to be stopped before it
continues with the next command.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$nid = (Get-Process notepad).Id
Stop-Process -Id $nid
Wait-Process -Id $nid
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The `Get-Process` cmdlet gets the process ID of the **Notepad** process and stores it in the `$nid`
variable. `Stop-Process` stops the process with the ID stored in `$nid`. `Wait-Process` waits until
the **Notepad** process is stopped.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Specifying a process ---------</maml:title>
        <maml:introduction>
          <maml:para>This example shows three different methods of specifying a process to `Wait-Process`. The first
command gets the Notepad process and stores it in the `$p` variable. The second command uses the
**Id** parameter, the third command uses the **Name** parameter, and the fourth command uses the
**InputObject** parameter.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$p = Get-Process notepad
Wait-Process -Id $p.Id
Wait-Process -Name "notepad"
Wait-Process -InputObject $p
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>These commands have the same results and can be used interchangeably.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Wait for processes for a specified time ---------</maml:title>
        <maml:introduction>
          <maml:para>In this example, `Wait-Process` waits 30 seconds for the **Outlook** and **Winword** processes to
stop. If both processes are not stopped, the cmdlet displays a non-terminating error and the command
prompt.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Wait-Process -Name outlook, winword -Timeout 30
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/microsoft.powershell.management/wait-process?view=powershell-7.5&amp;WT.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Debug-Process</maml:linkText>
        <command:uri>Debug-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Process</maml:linkText>
        <command:uri>Get-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Process</maml:linkText>
        <command:uri>Start-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Stop-Process</maml:linkText>
        <command:uri>Stop-Process.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Wait-Process</maml:linkText>
        <command:uri>Wait-Process.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>