<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-AppSharedPackageContainer</command:name>
      <maml:description>
        <maml:para>Deploys the shared package container definition.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>AppSharedPackageContainer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Add-AppSharedPackageContainer` cmdlet deploys the shared package container definition for the particular user.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-AppSharedPackageContainer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Replaces an existing container of the same name with the newly created container's definition for
the target users.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ForceApplicationShutdown</maml:name>
          <maml:description>
            <maml:para>Closes all packages currently running in the Shared Package Container.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Merge</maml:name>
          <maml:description>
            <maml:para>Merges a new container's definition into an existing container definition of the same name for
target users.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Path to the XML definition file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Replaces an existing container of the same name with the newly created container's definition for
the target users.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ForceApplicationShutdown</maml:name>
        <maml:description>
          <maml:para>Closes all packages currently running in the Shared Package Container.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Merge</maml:name>
        <maml:description>
          <maml:para>Merges a new container's definition into an existing container definition of the same name for
target users.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Path to the XML definition file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-AppSharedPackageContainer -Path C:\MyFolder\ContosoTestContainer.xml
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command deploys the definition described in the ContosoTestContainer file.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/add-appsharedpackagecontainer?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Add-AppxVolume</command:name>
      <maml:description>
        <maml:para>Adds an appx volume to the Package Manager.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>AppxVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Add-AppxVolume` cmdlet adds an **AppxVolume** for the Package Manager to advertise. After you add a volume, Appx deployment operations can use that volume as a target. This cmdlet returns the volume that it adds. Note, the **Path** parameter must be specified as a drive letter followed by `WindowsApps` as the directory. Not using this format could lead to inconsistent behavior in the application model subsystems or the volume itself. For more information, see the examples section.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-AppxVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the mount point of the volume that this cmdlet adds.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the mount point of the volume that this cmdlet adds.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Appx.PackageManager.Commands.AppxVolume</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns the **AppxVolume** object that it adds.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Add a volume ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-AppxVolume -Path "E:\WindowsApps"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command adds the volume `E:\WindowsApps` to Package Manager.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/add-appxvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-AppxVolume</maml:linkText>
        <command:uri>./Dismount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxVolume</maml:linkText>
        <command:uri>./Get-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-AppxVolume</maml:linkText>
        <command:uri>./Mount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxVolume</maml:linkText>
        <command:uri>./Remove-AppxVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Dismount-AppxVolume</command:name>
      <maml:description>
        <maml:para>Dismounts an appx volume.</maml:para>
      </maml:description>
      <command:verb>Dismount</command:verb>
      <command:noun>AppxVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Dismount-AppxVolume` cmdlet dismounts an **AppxVolume**. After you dismount a volume, all apps that are deployed to that target become inaccessible.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Dismount-AppxVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies the **AppxVolume** object to dismount.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies the **AppxVolume** object to dismount.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Dismount a volume by using a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Dismount-AppxVolume -Volume E:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command dismounts a volume at the path `E:\`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Dismount a volume by using an ID ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Dismount-AppxVolume -Volume {7e62a691-398e-4fbe-819a-64f1e407777a}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command dismounts a volume that has the specified media ID.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/dismount-appxvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxVolume</maml:linkText>
        <command:uri>./Add-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxVolume</maml:linkText>
        <command:uri>./Get-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-AppxVolume</maml:linkText>
        <command:uri>./Mount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxVolume</maml:linkText>
        <command:uri>./Remove-AppxVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-AppSharedPackageContainer</command:name>
      <maml:description>
        <maml:para>Gets information about the shared package container.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>AppSharedPackageContainer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The cmdlet shows information about any shared package container. In particular, it shows what packages are inside the shared package container.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppSharedPackageContainer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>Unsupported. Will result in `-AllUsers functionality is not yet implemented` error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Id of the container. Can be acquired by running `Get-AppSharedPackageContainer`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the container.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>Unsupported. Will result in `-AllUsers functionality is not yet implemented` error.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Id of the container. Can be acquired by running `Get-AppSharedPackageContainer`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the container.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppSharedPackageContainer -Name Contoso*
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```output
Name               : ContosoTestContainer
Id                 : ContosoTestContainer_1
PackageFamilyNames : {Contoso.SpellCheckPlugin.1.0.0.0_7pneu3d8sswe, Notepad++.2.0.0.1_ohjis898f1}</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Name               : ContosoTestContainer
Id                 : ContosoTestContainer_2
PackageFamilyNames : {Contoso.SpellCheckPlugin2.1.0.0.0_7pneu3d8sswe, Notepad++.2.0.0.1_ohjis898f1}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command shows the packages in any shared package container that has a prefix of Contoso.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/get-appsharedpackagecontainer?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-AppxDefaultVolume</command:name>
      <maml:description>
        <maml:para>Gets the default appx volume.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>AppxDefaultVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-AppxDefaultVolume` cmdlet gets the default **AppxVolume**. The default **AppxVolume** is the default target for all deployment operations on the computer. You can't remove the default **AppxVolume** from the list of volumes.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppxDefaultVolume</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Appx.PackageManager.Commands.AppxVolume</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the default volume ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxDefaultVolume
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the current default deployment target.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/get-appxdefaultvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-AppxDefaultVolume</maml:linkText>
        <command:uri>./Set-AppxDefaultVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-AppxPackage</command:name>
      <maml:description>
        <maml:para>Gets a list of the app packages that are installed in a user profile.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>AppxPackage</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-AppxPackage` cmdlet gets a list of the app packages that are installed in a user profile. An app package has an `.msix` or `.appx` file extension. To get the list of packages for a user profile other than the profile for the current user, you must run this command with administrator permissions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet lists app packages for all user accounts on the computer. To use this
parameter, you must run the command with administrator permissions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a particular package. If you specify this parameter, the cmdlet returns
results for this package only. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PackageTypeFilter</maml:name>
          <maml:description>
            <maml:para>Specifies one or more comma-separated types of packages that the cmdlet gets from the package
repository.</maml:para>
            <maml:para>By default, this cmdlet returns only packages of types `Main` and `Framework`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">PackageTypes</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Publisher</maml:name>
          <maml:description>
            <maml:para>Specifies the publisher of a particular package. If you specify this parameter, the cmdlet returns
results only for this publisher. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>User</maml:name>
          <maml:description>
            <maml:para>Specifies a user. If you specify this parameter, the cmdlet returns a list of app packages that are
installed for only the user that this cmdlet specifies. To get the list of packages for a user
profile other than the profile for the current user, you must run this command with
administrator permissions. The user name can be in one of these formats:</maml:para>
            <maml:para>- `domain\user_name`
- `user_name@fqn.domain.tld`
- `user_name`
- `SID-string`</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxVolume** object. If you specify this parameter, this cmdlet returns only
packages that are relative to volume that this parameter specifies.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">AppxVolume</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet lists app packages for all user accounts on the computer. To use this
parameter, you must run the command with administrator permissions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of a particular package. If you specify this parameter, the cmdlet returns
results for this package only. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PackageTypeFilter</maml:name>
        <maml:description>
          <maml:para>Specifies one or more comma-separated types of packages that the cmdlet gets from the package
repository.</maml:para>
          <maml:para>By default, this cmdlet returns only packages of types `Main` and `Framework`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">PackageTypes</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Publisher</maml:name>
        <maml:description>
          <maml:para>Specifies the publisher of a particular package. If you specify this parameter, the cmdlet returns
results only for this publisher. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>User</maml:name>
        <maml:description>
          <maml:para>Specifies a user. If you specify this parameter, the cmdlet returns a list of app packages that are
installed for only the user that this cmdlet specifies. To get the list of packages for a user
profile other than the profile for the current user, you must run this command with
administrator permissions. The user name can be in one of these formats:</maml:para>
          <maml:para>- `domain\user_name`
- `user_name@fqn.domain.tld`
- `user_name`
- `SID-string`</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies an **AppxVolume** object. If you specify this parameter, this cmdlet returns only
packages that are relative to volume that this parameter specifies.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">AppxVolume</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Windows.Appx.PackageManager.Commands.AppxPackage</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns an **AppxPackage** object that contains information, including the full name of
the app package.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get all app packages for every user account ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackage -AllUsers
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command lists the app packages that are installed for every user account on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get an app package for a specific a user ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackage -Name "Package17" -User "Contoso\EvanNarvaez"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays information about `Package17` if it's installed in the specified user
profile.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get a particular app package information ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackage -Name Microsoft.ScreenSketch
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command displays information about the ScreenSketch app.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get all app packages for a particular Publisher ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackage -Publisher "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command lists all the Microsoft app packages that are installed on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 5: Get all app packages with PackageTypeFilter ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackage -PackageTypeFilter Bundle,Framework,Main,Resource
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command lists all the app packages with PackageTypeFilter installed on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/get-appxpackage?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Package Manager API</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkId=245447</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>How to Add and Remove Apps</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkID=231020</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxPackage</maml:linkText>
        <command:uri>./Add-AppxPackage.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxPackageManifest</maml:linkText>
        <command:uri>./Get-AppxPackageManifest.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Move-AppxPackage</maml:linkText>
        <command:uri>./Move-AppxPackage.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxPackage</maml:linkText>
        <command:uri>./Remove-AppxPackage.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-AppxPackageManifest</command:name>
      <maml:description>
        <maml:para>Gets the manifest of an app package.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>AppxPackageManifest</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-AppxPackageManifest` cmdlet gets the manifest of an app package. An app package has an `.msix` or `.appx` file name extension. The manifest is an `.xml` document that contains information about the package, like the package ID.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppxPackageManifest</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package. To get the manifest of a package
on the computer that's not installed for the current user, you must run this command with
administrator permissions. Wildcards are permitted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>User</maml:name>
          <maml:description>
            <maml:para>Specifies a user. This cmdlet gets the manifest of packages that are installed for the user that
this parameter specifies. To get the list of packages for a user profile other than the profile for
the current user, you must run this command with administrator permissions. The user name can be
in one of these formats:</maml:para>
            <maml:para>- `domain\user_name`
- `user_name@fqn.domain.tld`
- `user_name`
- `SID-string`</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Package</maml:name>
        <maml:description>
          <maml:para>Specifies an **AppxPackage** object or the full name of a package. To get the manifest of a package
on the computer that's not installed for the current user, you must run this command with
administrator permissions. Wildcards are permitted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>User</maml:name>
        <maml:description>
          <maml:para>Specifies a user. This cmdlet gets the manifest of packages that are installed for the user that
this parameter specifies. To get the list of packages for a user profile other than the profile for
the current user, you must run this command with administrator permissions. The user name can be
in one of these formats:</maml:para>
          <maml:para>- `domain\user_name`
- `user_name@fqn.domain.tld`
- `user_name`
- `SID-string`</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>Microsoft.Windows.Appx.PackageManager.Commands.AppxPackage</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet accepts an array of **AppxPackage** objects that contain information, including the full
name of the app package.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.XML.XMLDocument</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet returns a read-only `.xml` document that contains information about the app package,
like the package ID.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get the manifest for an app package ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxPackageManifest -Package "package1_1.0.0.0_neutral__8wekyb3d8bbwe"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the manifest for an app package named package1_1.0.0.0_neutral__8wekyb3d8bbwe.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get the application ID for an app package ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
(Get-AppxPackage -Name "*WinJS*" | Get-AppxPackageManifest).package.applications.application.id
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the application ID for an app package that has the string WinJS in the name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
(Get-AppxPackage -Name "*ZuneMusic*" | Get-AppxPackageManifest).Package.Capabilities
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the capabilities for an app package that has the string ZuneMusic in the name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/get-appxpackagemanifest?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Package Manager API</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkId=245447</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>How to Add and Remove Apps</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkID=231020</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxPackage</maml:linkText>
        <command:uri>./Get-AppxPackage.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxPackage</maml:linkText>
        <command:uri>./Add-AppxPackage.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-AppxVolume</command:name>
      <maml:description>
        <maml:para>Gets appx volumes for the computer.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>AppxVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-AppxVolume` cmdlet gets a list of **AppxVolume** objects known to the computer. Volumes can be added by the user or a device, for instance, by using Storage Sense.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppxVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path of the mount point of a volume. This cmdlet gets a volume at the location that
this parameter specifies.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-AppxVolume</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns only volumes that are currently mounted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-AppxVolume</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Offline</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns only volumes that are currently dismounted.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Offline</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns only volumes that are currently dismounted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns only volumes that are currently mounted.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path of the mount point of a volume. This cmdlet gets a volume at the location that
this parameter specifies.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>Microsoft.Appx.PackageManager.Commands.AppxVolume</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get all the volumes ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxVolume
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>The command gets all the **AppxVolume** objects on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Get the volume at a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxVolume -Path F:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the **AppxVolume** at the path F:\.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Get mounted volumes ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxVolume -Online
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets only **AppxVolume** objects that are currently mounted on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Get volumes that are note mounted ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-AppxVolume -Offline
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command gets the **AppxVolume** objects that not currently mounted on the computer.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/get-appxvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxVolume</maml:linkText>
        <command:uri>./Add-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-AppxVolume</maml:linkText>
        <command:uri>./Dismount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-AppxVolume</maml:linkText>
        <command:uri>./Mount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxVolume</maml:linkText>
        <command:uri>./Remove-AppxVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Invoke-CommandInDesktopPackage</command:name>
      <maml:description>
        <maml:para>A debugging tool that creates a new process in the context of a packaged app.</maml:para>
      </maml:description>
      <command:verb>Invoke</command:verb>
      <command:noun>CommandInDesktopPackage</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Invoke-CommandInDesktopPackage` creates a new process in the context of the supplied **PackageFamilyName** and **AppId**.</maml:para>
      <maml:para>The created process will have the identity of the provided **AppId** and will have access to its virtualized file system and registry (if any). The new process will have a token that's similar to, but not identical to, a real **AppId** process.</maml:para>
      <maml:para>The primary use-case of this command is to invoke debugging or troubleshooting tools in the context of the packaged app to access its virtualized resources. For example, you can run the Registry Editor to see virtualized registry keys, or Notepad to read virtualized files. See the important note that follows on using tools such as the Registry Editor that require elevation.</maml:para>
      <maml:para>No guarantees are made about the behavior of the created process, other than it having the package identity and access to the package's virtualized resources. In particular, the new process will _not_ be created in an AppContainer even if an **AppId** process would normally be created in an AppContainer. Features such as Privacy Controls or other App Settings may or may not apply to the new process. You shouldn't rely on any specific side-effects of using this command, as they're undefined and subject to change.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Invoke-CommandInDesktopPackage</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>AppId</maml:name>
          <maml:description>
            <maml:para>**AppId** is the Application ID from the target package's manifest.</maml:para>
            <maml:para>For example, `MyAppName` is the Application ID in this manifest snippet:</maml:para>
            <maml:para>`&lt;Application Id="MyAppName" ... /&gt;`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="none">
          <maml:name>Args</maml:name>
          <maml:description>
            <maml:para>Optional arguments to be passed to the new process. For example, `/foo /bar`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Command</maml:name>
          <maml:description>
            <maml:para>An executable to invoke, like `regedit.exe`.</maml:para>
            <maml:para>Note that if the executable requires elevation (like `regedit`), you must call
`Invoke-CommandInDesktopPackage` from an already-elevated context. Calling
`Invoke-CommandInDesktopPackage` from a non-elevated context doesn't work as expected. The new
process is created without the package context, and the PowerShell command fails.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>PackageFamilyName</maml:name>
          <maml:description>
            <maml:para>The Package Family Name of the target package. You can retrieve this by calling
[Get-AppxPackage](./Get-AppxPackage.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="none">
          <maml:name>PreventBreakaway</maml:name>
          <maml:description>
            <maml:para>Causes all child processes of the invoked process to also be created in the context of the
**AppId**. By default, child processes are created without any context. This switch is useful for
running `cmd.exe` so that you can launch multiple other tools in the package context.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>AppId</maml:name>
        <maml:description>
          <maml:para>**AppId** is the Application ID from the target package's manifest.</maml:para>
          <maml:para>For example, `MyAppName` is the Application ID in this manifest snippet:</maml:para>
          <maml:para>`&lt;Application Id="MyAppName" ... /&gt;`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="none">
        <maml:name>Args</maml:name>
        <maml:description>
          <maml:para>Optional arguments to be passed to the new process. For example, `/foo /bar`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Command</maml:name>
        <maml:description>
          <maml:para>An executable to invoke, like `regedit.exe`.</maml:para>
          <maml:para>Note that if the executable requires elevation (like `regedit`), you must call
`Invoke-CommandInDesktopPackage` from an already-elevated context. Calling
`Invoke-CommandInDesktopPackage` from a non-elevated context doesn't work as expected. The new
process is created without the package context, and the PowerShell command fails.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>PackageFamilyName</maml:name>
        <maml:description>
          <maml:para>The Package Family Name of the target package. You can retrieve this by calling
[Get-AppxPackage](./Get-AppxPackage.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="none">
        <maml:name>PreventBreakaway</maml:name>
        <maml:description>
          <maml:para>Causes all child processes of the invoked process to also be created in the context of the
**AppId**. By default, child processes are created without any context. This switch is useful for
running `cmd.exe` so that you can launch multiple other tools in the package context.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Invoke Notepad to read virtualized files ---------</maml:title>
        <maml:introduction>
          <maml:para>The following command invokes Notepad in the context of the `ContosoApp` app from the
`Contoso.MyApp` package. This allows you to access resources such as a log file or configuration
file stored in the app's virtualized filesystem.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$params = @{
    AppId             = 'ContosoApp'
    PackageFamilyName = 'Contoso.MyApp_abcdefgh23456'
    Command           = 'notepad.exe'
}
Invoke-CommandInDesktopPackage @params
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/invoke-commandindesktoppackage?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxPackage</maml:linkText>
        <command:uri>./Get-AppxPackage.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Mount-AppxVolume</command:name>
      <maml:description>
        <maml:para>Mounts an appx volume.</maml:para>
      </maml:description>
      <command:verb>Mount</command:verb>
      <command:noun>AppxVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Mount-AppxVolume` cmdlet mounts an **AppxVolume**. After you mount a volume, all apps that are deployed to that target become accessible.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Mount-AppxVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies the **AppxVolume** object to mount.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies the **AppxVolume** object to mount.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Mount a volume by using a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Mount-AppxVolume -Volume E:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command mounts a volume at the path `E:\`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Mount a volume by using an ID ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Mount-AppxVolume -Volume {7e62a691-398e-4fbe-819a-64f1e407777a}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command mounts a volume that has the specified media ID.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/mount-appxvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxVolume</maml:linkText>
        <command:uri>./Add-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-AppxVolume</maml:linkText>
        <command:uri>./Dismount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxVolume</maml:linkText>
        <command:uri>./Get-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxVolume</maml:linkText>
        <command:uri>./Remove-AppxVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Move-AppxPackage</command:name>
      <maml:description>
        <maml:para>Moves a package from its current location to another appx volume.</maml:para>
      </maml:description>
      <command:verb>Move</command:verb>
      <command:noun>AppxPackage</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Move-AppxPackage` cmdlet moves a package from its current location to another **AppxVolume**. The new location must be a volume that Package Manager knows about and that's mounted. This cmdlet also moves your application data to the specified volume.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Move-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package. This cmdlet moves the package
that this parameter specifies.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxVolume** object. The cmdlet moves the package to the volume that this parameter
specifies.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">AppxVolume</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Package</maml:name>
        <maml:description>
          <maml:para>Specifies an **AppxPackage** object or the full name of a package. This cmdlet moves the package
that this parameter specifies.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies an **AppxVolume** object. The cmdlet moves the package to the volume that this parameter
specifies.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">AppxVolume</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Move a package to a volume specified by a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Move-AppxPackage -Package "package1_1.0.0.0_neutral__8wekyb3d8bbwe" -Volume F:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command moves package that has the specified name to volume `F:\`. This cmdlet also moves your
app data.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Move a package to a volume specified by an ID ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$params = @{
    Package = 'package1_1.0.0.0_neutral__8wekyb3d8bbwe'
    Volume  = '{d2a4d1f4-f45a-46f3-a419-160ab52af091}'
}
Move-AppxPackage @params
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command moves package that has the specified name to the volume that has the specified media
ID. This cmdlet also moves your app data.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/move-appxpackage?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxPackage</maml:linkText>
        <command:uri>./Add-AppxPackage.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxPackage</maml:linkText>
        <command:uri>./Get-AppxPackage.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxPackage</maml:linkText>
        <command:uri>./Remove-AppxPackage.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-AppSharedPackageContainer</command:name>
      <maml:description>
        <maml:para>Removes the shared package container.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>AppSharedPackageContainer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The cmdlet removes the shared package container definition for the particular user.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-AppSharedPackageContainer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>Unsupported. Will result in `-AllUsers functionality is not yet implemented` error.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ForceApplicationShutdown</maml:name>
          <maml:description>
            <maml:para>Closes all packages in the Shared Package Container.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the container.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>Unsupported. Will result in `-AllUsers functionality is not yet implemented` error.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ForceApplicationShutdown</maml:name>
        <maml:description>
          <maml:para>Closes all packages in the Shared Package Container.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the container.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Remove-AppSharedPackageContainer -Name ContosoTestContainer
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command removes the shared package container definition with the name `ContosoTestContainer`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/remove-appsharedpackagecontainer?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-AppxPackage</command:name>
      <maml:description>
        <maml:para>Removes an app package from one or more user accounts.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>AppxPackage</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-AppxPackage` cmdlet removes an app package from a user account. An app package has an `.msix` or `.appx` file extension.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PreserveApplicationData</maml:name>
          <maml:description>
            <maml:para>Specifies that the cmdlet preserves the application data during the package removal. The
application data is available for later use. Note that this is only applicable for apps that are
under development so this option can only be specified for apps that are registered from file
layout (Loose file registered).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PreserveRoamableApplicationData</maml:name>
          <maml:description>
            <maml:para>Preserves the roamable portion of the app's data when the package is removed. This parameter is
incompatible with **PreserveApplicationData**.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>This parameter removes the app package for all user accounts on the computer. The parameter works
off the parent package type. If it's a bundle, use **PackageTypeFilter** with the `Get-AppxPackage`
command and specify the bundle. To use this parameter, you must run the command with administrator
permissions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-AppxPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Specifies an **AppxPackage** object or the full name of a package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>User</maml:name>
          <maml:description>
            <maml:para>If you specify this parameter, the cmdlet removes the app package for only the user that this cmdlet
specifies. To remove a package for a user profile other than the profile of the current user, you
must run this command with administrator permissions.</maml:para>
            <maml:para>&gt; [!NOTE]
&gt;
&gt; This parameter only accepts user SIDs. Use the **whoami /user** command to display the current
&gt; SID of a user. See [whoami syntax](/windows-server/administration/windows-commands/whoami) for
&gt; details.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>This parameter removes the app package for all user accounts on the computer. The parameter works
off the parent package type. If it's a bundle, use **PackageTypeFilter** with the `Get-AppxPackage`
command and specify the bundle. To use this parameter, you must run the command with administrator
permissions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Package</maml:name>
        <maml:description>
          <maml:para>Specifies an **AppxPackage** object or the full name of a package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PreserveApplicationData</maml:name>
        <maml:description>
          <maml:para>Specifies that the cmdlet preserves the application data during the package removal. The
application data is available for later use. Note that this is only applicable for apps that are
under development so this option can only be specified for apps that are registered from file
layout (Loose file registered).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PreserveRoamableApplicationData</maml:name>
        <maml:description>
          <maml:para>Preserves the roamable portion of the app's data when the package is removed. This parameter is
incompatible with **PreserveApplicationData**.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>User</maml:name>
        <maml:description>
          <maml:para>If you specify this parameter, the cmdlet removes the app package for only the user that this cmdlet
specifies. To remove a package for a user profile other than the profile of the current user, you
must run this command with administrator permissions.</maml:para>
          <maml:para>&gt; [!NOTE]
&gt;
&gt; This parameter only accepts user SIDs. Use the **whoami /user** command to display the current
&gt; SID of a user. See [whoami syntax](/windows-server/administration/windows-commands/whoami) for
&gt; details.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>Microsoft.Windows.Appx.PackageManager.Commands.AppxPackage</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>An **AppxPackage** object that contain information, including the full name of the app package.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Remove an app package ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Remove-AppxPackage -Package 'package1_1.0.0.0_neutral__8wekyb3d8bbwe'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command removes an app package named `package1_1.0.0.0_neutral__8wekyb3d8bbwe` from the
account of the current user.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/remove-appxpackage?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>PackageManager class</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkId=245447</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Sideload Apps with DISM</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkID=231020</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-AppxPackageAutoUpdateSettings</command:name>
      <maml:description>
        <maml:para>Removes settings configured for a particular Windows app.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>AppxPackageAutoUpdateSettings</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The 'Remove-AppxPackageAutoUpdateSettings' PowerShell cmdlet removes the settings configured for a specific or all installed Windows apps in relation to the Auto Update and Repair settings.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-AppxPackageAutoUpdateSettings</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>{{ Fill AllUsers Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>PackageFamilyName</maml:name>
          <maml:description>
            <maml:para>{{ Fill PackageFamilyName Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>UseSystemPolicySource</maml:name>
          <maml:description>
            <maml:para>{{ Fill UseSystemPolicySource Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>{{ Fill AllUsers Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>PackageFamilyName</maml:name>
        <maml:description>
          <maml:para>{{ Fill PackageFamilyName Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>UseSystemPolicySource</maml:name>
        <maml:description>
          <maml:para>{{ Fill UseSystemPolicySource Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs.
The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Remove-AppxPackageAutoUpdateSettings -PackageFullName publisher.package1_1.0.0.0_neutral__8wekyb3d8bbwe
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This example removes the Auto Update and Repair settings for a specific Windows app that has been installed and registered to the signed-in user.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://go.microsoft.com/fwlink/?LinkId=246400</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Remove-AppxVolume</command:name>
      <maml:description>
        <maml:para>Removes an appx volume.</maml:para>
      </maml:description>
      <command:verb>Remove</command:verb>
      <command:noun>AppxVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-AppxVolume` cmdlet removes an **AppxVolume**. You can only remove a volume after there are no apps staged to it for any user. After you remove a volume, apps can no longer be added to it.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-AppxVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies the **AppxVolume** object to remove.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies the **AppxVolume** object to remove.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">AppxVolume[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Remove a volume by using an ID ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Remove-AppxVolume -Volume {984786d3-0cae-49de-a68f-8bedb0ca260b}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command removes a volume that has the specified media ID.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Remove a volume by using a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Remove-AppxVolume -Volume E:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command removes a volume at the path `E:\`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/remove-appxvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxVolume</maml:linkText>
        <command:uri>./Add-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-AppxVolume</maml:linkText>
        <command:uri>./Dismount-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxVolume</maml:linkText>
        <command:uri>./Get-AppxVolume.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-AppxVolume</maml:linkText>
        <command:uri>./Mount-AppxVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Reset-AppSharedPackageContainer</command:name>
      <maml:description>
        <maml:para>Destroys all the application data of the container.</maml:para>
      </maml:description>
      <command:verb>Reset</command:verb>
      <command:noun>AppSharedPackageContainer</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The cmdlet destroys all the application data of the container, including the virtual files and registry keys.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-AppSharedPackageContainer</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips asking for confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the container.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips asking for confirmation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the container.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-AppSharedPackageContainer -Name ContosoTestContainer
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command clears all the application data of the shared package container
`ContosoTestContainer`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/reset-appsharedpackagecontainer?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-AppxDefaultVolume</command:name>
      <maml:description>
        <maml:para>Specifies a default appx volume.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>AppxDefaultVolume</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Set-AppxDefaultVolume` cmdlet specifies a default **AppxVolume**. The default **AppxVolume** is the default target for all deployment operations on the computer. Deployment operations can specify a different non-default target volume.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-AppxDefaultVolume</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Volume</maml:name>
          <maml:description>
            <maml:para>Specifies the path a volume. This cmdlet sets the volume that this parameter specifies to be the
default deployment target for the computer.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">AppxVolume</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Volume</maml:name>
        <maml:description>
          <maml:para>Specifies the path a volume. This cmdlet sets the volume that this parameter specifies to be the
default deployment target for the computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">AppxVolume</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <maml:alertSet>
      <maml:alert>
        <maml:para />
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Set a default volume by using a path ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-AppxDefaultVolume -Volume F:\
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command sets the default volume to be the volume `F:\`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Set a default volume by using an ID ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-AppxDefaultVolume -Volume {ef23c8d6-b13c-4c4c-ae3b-7d5a162de9b9}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This command sets the default volume to be the one that has the specified media ID.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://learn.microsoft.com/powershell/module/appx/set-appxdefaultvolume?view=windowsserver2025-ps&amp;wt.mc_id=ps-gethelp</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxDefaultVolume</maml:linkText>
        <command:uri>./Get-AppxDefaultVolume.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>